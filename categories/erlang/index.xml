<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Erlang on Qiu&#39;s Quibble</title>
    <link>http://blog.idempotent.ca/categories/erlang/</link>
    <description>Recent content in Erlang on Qiu&#39;s Quibble</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Jun 2009 09:37:00 +0000</lastBuildDate>
    
	<atom:link href="http://blog.idempotent.ca/categories/erlang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Fast and elegant way to sum primes in a gigantic range</title>
      <link>http://blog.idempotent.ca/2009/06/01/fast-and-elegant-way-to-sum-primes-in-a-gigantic-range/</link>
      <pubDate>Mon, 01 Jun 2009 09:37:00 +0000</pubDate>
      
      <guid>http://blog.idempotent.ca/2009/06/01/fast-and-elegant-way-to-sum-primes-in-a-gigantic-range/</guid>
      <description>The problem is taken from Project-Euler, which asks what is the sum of all prime numbers under 2 million.
Traditional Approach Project-Euler has many problems like this which looks ridiculously easy in theory, but practically impossible when using the old-school brute force way to solve them.
Even after applying some well-known techniques to shrink the problem space, the computation still takes a long time (too long for me to stick around and wait it to finish).</description>
    </item>
    
    <item>
      <title>Fast and elegant way to sum primes in a gigantic range</title>
      <link>http://blog.idempotent.ca/starred/2009-06-01-fast-and-elegant-way-to-sum-primes-in-a-gigantic-range/</link>
      <pubDate>Mon, 01 Jun 2009 09:37:00 +0000</pubDate>
      
      <guid>http://blog.idempotent.ca/starred/2009-06-01-fast-and-elegant-way-to-sum-primes-in-a-gigantic-range/</guid>
      <description>The problem is taken from Project-Euler, which asks what is the sum of all prime numbers under 2 million.
Traditional Approach Project-Euler has many problems like this which looks ridiculously easy in theory, but practically impossible when using the old-school brute force way to solve them.
Even after applying some well-known techniques to shrink the problem space, the computation still takes a long time (too long for me to stick around and wait it to finish).</description>
    </item>
    
  </channel>
</rss>