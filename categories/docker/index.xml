<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on Qiu&#39;s Quibble</title>
    <link>http://blog.idempotent.ca/categories/docker/</link>
    <description>Recent content in Docker on Qiu&#39;s Quibble</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 19 Jun 2016 21:49:51 -0700</lastBuildDate>
    <atom:link href="http://blog.idempotent.ca/categories/docker/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Docker Security</title>
      <link>http://blog.idempotent.ca/2016/06/19/docker-security/</link>
      <pubDate>Sun, 19 Jun 2016 21:49:51 -0700</pubDate>
      
      <guid>http://blog.idempotent.ca/2016/06/19/docker-security/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://2016.dockercon.com/&#34;&gt;DockerCon 2016&lt;/a&gt; is here and this is the very first day with workshops on various topics. I chose to attend the Docker Security workshop as I&amp;rsquo;m interested in seeing how Docker tackles some security challenges. This blog post is my notes taken from the workshop.&lt;/p&gt;

&lt;p&gt;In order to talk about security, we first have to know how docker works on a higher level to know what to secure. The workshop addresses that question early on. Container security is different from, say, securing a hypervisor, since they work differently. Docker is essentially an abstraction layer on top of &lt;a href=&#34;http://man7.org/linux/man-pages/man7/namespaces.7.html&#34;&gt;namespaces&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Cgroups&#34;&gt;cgroups&lt;/a&gt; so we have to talk about security in those contexts. On a higher level, namespaces govern what a container can see, and cgroups govern what a container can use.&lt;/p&gt;

&lt;h1 id=&#34;docker-internals&#34;&gt;Docker Internals&lt;/h1&gt;

&lt;h2 id=&#34;namespaces&#34;&gt;Namespaces&lt;/h2&gt;

&lt;p&gt;When forking a child process on Linux, you can specify what system resource is shared from the parent process and what is &amp;ldquo;unshared&amp;rdquo;, and the &amp;ldquo;unshared&amp;rdquo; resource becomes the namespace isolation provided by the kernel to the process. Such resources are:
* mount
* UTS
* IPC
* network
* pid
* cgroup
* user
See &lt;code&gt;man unshare&lt;/code&gt; for more detailed description.&lt;/p&gt;

&lt;p&gt;What this means is changes made within a namespace by a process isn&amp;rsquo;t visible to other processes outside of the namespace, which effectively provided process isolation, and made a docker container appears to be like a virtual machine on the surface.&lt;/p&gt;

&lt;p&gt;Namespaces appear as files under &lt;code&gt;/proc/&amp;lt;pid&amp;gt;/ns&lt;/code&gt; folder, e.g.,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# ls -l /proc/1/ns
total 0
lrwxrwxrwx 1 root root 0 Jun 28 03:56 cgroup -&amp;gt; cgroup:[4026531835]
lrwxrwxrwx 1 root root 0 Jun 28 03:56 ipc -&amp;gt; ipc:[4026532440]
lrwxrwxrwx 1 root root 0 Jun 28 03:56 mnt -&amp;gt; mnt:[4026532438]
lrwxrwxrwx 1 root root 0 Jun 28 03:56 net -&amp;gt; net:[4026532443]
lrwxrwxrwx 1 root root 0 Jun 28 03:56 pid -&amp;gt; pid:[4026532441]
lrwxrwxrwx 1 root root 0 Jun 28 03:56 uts -&amp;gt; uts:[4026532439]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and if you are within a container, can you find out the container id by querying &lt;code&gt;/proc/1/cgroup&lt;/code&gt; file, which lists the name of the namespaces.&lt;/p&gt;

&lt;h2 id=&#34;cgroups&#34;&gt;Cgroups&lt;/h2&gt;

&lt;p&gt;cgroups, or control groups is a kernel feature that provides resource tracking and limitations for a group of tasks. In docker terms, the docker daemon creates and assigns a cgroup for each running container, and you can set what resource container is able to get, e.g., CPU, memory or pid limits.&lt;/p&gt;

&lt;p&gt;e.g., &lt;code&gt;docker run&lt;/code&gt; takes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--cpuset-cpus&lt;/code&gt;: CPUs in which to allow execution&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--cpuset-mems&lt;/code&gt;: MEMs in which to allow execution&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--memory-reservation&lt;/code&gt;: Memory soft limit&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--pids-limit&lt;/code&gt;: Tune container pids limit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Docker names the cgroup it creates using the container id, so a handy way to find out the container id within the container is to inspect &lt;code&gt;/proc/1/cgroup&lt;/code&gt; file in the container:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@48b83d3621b5:/proc/1# cat cgroup
9:pids:/docker/48b83d3621b5c176b22885e799e73f2cec6e14d821c83b2ecb4fc73324212631
8:cpu,cpuacct:/docker/48b83d3621b5c176b22885e799e73f2cec6e14d821c83b2ecb4fc73324212631
7:net_cls:/docker/48b83d3621b5c176b22885e799e73f2cec6e14d821c83b2ecb4fc73324212631
6:devices:/docker/48b83d3621b5c176b22885e799e73f2cec6e14d821c83b2ecb4fc73324212631
5:memory:/docker/48b83d3621b5c176b22885e799e73f2cec6e14d821c83b2ecb4fc73324212631
4:blkio:/docker/48b83d3621b5c176b22885e799e73f2cec6e14d821c83b2ecb4fc73324212631
3:freezer:/docker/48b83d3621b5c176b22885e799e73f2cec6e14d821c83b2ecb4fc73324212631
2:cpuset:/docker/48b83d3621b5c176b22885e799e73f2cec6e14d821c83b2ecb4fc73324212631
1:name=systemd:/docker/48b83d3621b5c176b22885e799e73f2cec6e14d821c83b2ecb4fc73324212631
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here the container id is &lt;code&gt;48b83...&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;docker-security-best-practices&#34;&gt;Docker Security Best Practices&lt;/h1&gt;

&lt;h2 id=&#34;secure-the-containers&#34;&gt;Secure the Containers&lt;/h2&gt;

&lt;h3 id=&#34;use-minimal-base-images&#34;&gt;Use minimal base images&lt;/h3&gt;

&lt;p&gt;In a secured environment, every image you build has to come from a known and trusted source. The minimal the base image, the narrower the attack surface is going to be. &lt;a href=&#34;https://www.alpinelinux.org/&#34;&gt;Alpine Linux&lt;/a&gt; has gain significantly in popularity as it&amp;rsquo;s a very minimal Linux distribution. I personally build almost everything from Alpine when I can. The caveat is it&amp;rsquo;s built using &lt;a href=&#34;https://www.musl-libc.org/&#34;&gt;musl libc&lt;/a&gt; instead of the ubiquitous glibc so your mileage may vary depending on how your code or your dependency rely on specifics of glibc.&lt;/p&gt;

&lt;h3 id=&#34;verify-content&#34;&gt;Verify content&lt;/h3&gt;

&lt;p&gt;In order to build the chain of trust, we want to know where our software dependencies come from when building the image. Different package management systems have ways to verify the authenticity and integrity of the packages you want to install. For example, when using &lt;code&gt;apt-get&lt;/code&gt; to install software from 3rd party source, always obtain it from the official channel and verify the keys.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RUN apt-key adv \
    --keyserver hkp://keyserver.ubuntu.com:80 \
    --recv-keys ... \
    &amp;amp;&amp;amp; echo deb http://repository.example.com stable non-free \
    | tee /etc/apt/sources.list.d/example.list
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;create-read-only-containers-volumes&#34;&gt;Create read-only containers/volumes&lt;/h3&gt;

&lt;p&gt;By default, &lt;code&gt;docker run ...&lt;/code&gt; creates and runs a container in read-write mode. The process in the container is able to write to the root file system of the container. According to the &lt;a href=&#34;https://en.wikipedia.org/wiki/Principle_of_least_privilege&#34;&gt;security principle of least privilege&lt;/a&gt;, if you don&amp;rsquo;t expect the container process to write to the disk, you should run the container with &lt;code&gt;--read-only&lt;/code&gt; flag.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run -it --rm --read-only alpine sh
/ # touch foo
touch: foo: Read-only file system
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Same applies to moounted volumes. If you volume mount a folder from the host not for persistence (e.g., for configuration), you don&amp;rsquo;t need write permission for the mapped folder. You can use &lt;code&gt;-v host_dir:container_dir:ro&lt;/code&gt; to tell docker to mount the folder in read-only mode:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run -it --rm -v $(pwd):/content:ro alpine sh
/ # cd /content
/content # touch foo
touch: foo: Read-only file system
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;networking&#34;&gt;Networking&lt;/h2&gt;

&lt;h3 id=&#34;use-network-namespaces&#34;&gt;Use network namespaces&lt;/h3&gt;

&lt;p&gt;Containers can be &amp;ldquo;linked&amp;rdquo; by specifying &lt;code&gt;--link&lt;/code&gt; during run. e.g., if your &lt;code&gt;app&lt;/code&gt; container has a link to &lt;code&gt;redis&lt;/code&gt; container, within your app container, you can use &lt;code&gt;redis&lt;/code&gt; as the host name for the redis instance:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -d --name redis redis:latest
docker run -d --name app --link redis:redis app_image
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, this is considered a bad practice with the newer docker versions. Links do not survive a container restart, so if either the &lt;code&gt;redis&lt;/code&gt; or the &lt;code&gt;app&lt;/code&gt; container gets restarted, the linkage is gone and hence it&amp;rsquo;s pretty brittle.&lt;/p&gt;

&lt;p&gt;Since docker 1.9, network is a top-level concept and is now a recommended way of connecting containers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker network create test
704c22d89347f18ca1d369af02af5aa89b25a78b8fa0f243bef0978c7aa4fedf

$ docker network ls
NETWORK ID          NAME                DRIVER
ab205c46f52f        bridge              bridge
9ef569719a04        host                host
29053ecdedda        none                null
4e4f01be3f14        onebody_default     bridge
704c22d89347        test                bridge
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The network &lt;code&gt;test&lt;/code&gt; we just created is not tied to any containers. The network is its own subnet under the docker0:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker network inspect test
[
    {
        &amp;quot;Name&amp;quot;: &amp;quot;test&amp;quot;,
		...
        &amp;quot;IPAM&amp;quot;: {
			...
            &amp;quot;Config&amp;quot;: [
                {
                    &amp;quot;Subnet&amp;quot;: &amp;quot;172.19.0.0/16&amp;quot;,
                    &amp;quot;Gateway&amp;quot;: &amp;quot;172.19.0.1/16&amp;quot;
                }
            ]
        },
		...
    }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A container can join the network by specifying &lt;code&gt;--network&lt;/code&gt; during runtime:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run -it --net=test --rm --name app1 alpine sh
/ # ifconfig eth0
eth0      Link encap:Ethernet  HWaddr 02:42:AC:13:00:02
          inet addr:172.19.0.2  Bcast:0.0.0.0  Mask:255.255.0.0
          inet6 addr: fe80::42:acff:fe13:2%32744/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:71 errors:0 dropped:0 overruns:0 frame:0
          TX packets:9 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:9084 (8.8 KiB)  TX bytes:738 (738.0 B)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see the container is assigned an IP address in the subnet. Let&amp;rsquo;s run another container in the network, and take a look at the network:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker network inspect test
[
    {
        ...
        &amp;quot;Containers&amp;quot;: {
            &amp;quot;aac7e82e2b89fc021606541ec46bd11b734bc4fd97296b2f343d622e8ccb6a49&amp;quot;: {
                &amp;quot;Name&amp;quot;: &amp;quot;stupefied_albattani&amp;quot;,
                &amp;quot;EndpointID&amp;quot;: &amp;quot;5213b7177348929fae12273c4ed6df6c5894bcfeef246b3fd6ee81789533153e&amp;quot;,
                &amp;quot;MacAddress&amp;quot;: &amp;quot;02:42:ac:13:00:03&amp;quot;,
                &amp;quot;IPv4Address&amp;quot;: &amp;quot;172.19.0.3/16&amp;quot;,
                &amp;quot;IPv6Address&amp;quot;: &amp;quot;&amp;quot;
            },
            &amp;quot;e2d5d159dc1cbb1f671c01286138704128bbbf6f9c428605155dbe8b7df4de1f&amp;quot;: {
                &amp;quot;Name&amp;quot;: &amp;quot;app1&amp;quot;,
                &amp;quot;EndpointID&amp;quot;: &amp;quot;b8fb80f16e8b9d4ec53707fce4d7e49fc901b82f0d727d280fc859684cce1056&amp;quot;,
                &amp;quot;MacAddress&amp;quot;: &amp;quot;02:42:ac:13:00:02&amp;quot;,
                &amp;quot;IPv4Address&amp;quot;: &amp;quot;172.19.0.2/16&amp;quot;,
                &amp;quot;IPv6Address&amp;quot;: &amp;quot;&amp;quot;
            }
        },
        ...
    }
]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The name associated with the containers are accessible to other containers in the network:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run -it --rm --net=test alpine sh
/ # ping app1
PING app1 (172.19.0.2): 56 data bytes
64 bytes from 172.19.0.2: seq=0 ttl=64 time=0.378 ms
64 bytes from 172.19.0.2: seq=1 ttl=64 time=0.193 ms
64 bytes from 172.19.0.2: seq=2 ttl=64 time=0.294 ms
64 bytes from 172.19.0.2: seq=3 ttl=64 time=0.200 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, if you start a container outside of the &lt;code&gt;test&lt;/code&gt; network, none of the containers are going to be accessible:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run -it --rm --name outsider alpine sh
/ # ping app1
ping: bad address &#39;app1&#39;
/ # ping 172.19.0.2
PING 172.19.0.2 (172.19.0.2): 56 data bytes
^C
--- 172.19.0.2 ping statistics ---
4 packets transmitted, 0 packets received, 100% packet loss
/ #
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;be-cautious-with-net-host&#34;&gt;Be cautious with &lt;code&gt;--net=host&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;I have to confess that I&amp;rsquo;m guilty of this :) When I have container connectivity issues, I slap on &lt;code&gt;--net=host&lt;/code&gt; on &lt;code&gt;docker run&lt;/code&gt; and everything just worked. This is a bad security practice as called out during the workshop. Because &lt;code&gt;--net=host&lt;/code&gt; puts the container in the same network namespace as the host, the container can see &lt;em&gt;all&lt;/em&gt; traffic on the host:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run -it --net=host alpine sh
/ # ip a
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
2: wlp1s0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc mq state UP qlen 1000
    link/ether c8:ff:28:62:80:29 brd ff:ff:ff:ff:ff:ff
    inet 192.168.1.132/24 brd 192.168.1.255 scope global dynamic wlp1s0
       valid_lft 78812sec preferred_lft 78812sec
    inet 192.168.1.125/24 brd 192.168.1.255 scope global secondary wlp1s0
       valid_lft forever preferred_lft forever
    inet6 fe80::2475:8b1:aafd:3dde/64 scope link
       valid_lft forever preferred_lft forever
4: docker0: &amp;lt;NO-CARRIER,BROADCAST,MULTICAST,UP&amp;gt; mtu 1500 qdisc noqueue state DOWN
    link/ether 02:42:c8:75:9f:71 brd ff:ff:ff:ff:ff:ff
    inet 172.17.0.3/16 scope global docker0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:c8ff:fe75:9f71/64 scope link
       valid_lft forever preferred_lft forever
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As demonstrated above, all interfaces on the host is visible inside the container.&lt;/p&gt;

&lt;h3 id=&#34;be-cautious-with-exposed-ports&#34;&gt;Be cautious with exposed ports&lt;/h3&gt;

&lt;p&gt;When you&amp;rsquo;re connecting containers together with network namespace, you don&amp;rsquo;t need to bind the container port to the host port with the &lt;code&gt;-p&lt;/code&gt; option. Exposed ports may create conflict with port bindings on the host. However, if your container is the entrypoint to your web app, then I can&amp;rsquo;t think of a specific reason &lt;em&gt;not&lt;/em&gt; to use port binding, since otherwise, you will have to setup iptable rules to route traffic from the host interface to container IP.&lt;/p&gt;

&lt;h2 id=&#34;user-management&#34;&gt;User Management&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;root&lt;/code&gt; in the container &lt;em&gt;is&lt;/em&gt; root on the host by default. I discovered &lt;a href=&#34;http://blog.idempotent.ca/2016/05/03/docker...root...root...docker-a.k.a.-the-docker-group-is-a-backdoor/&#34;&gt;this hack&lt;/a&gt; that exploits read/write mount and &lt;code&gt;root&lt;/code&gt; user in the container. Consider this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run --rm alpine whoami
root

$ docker run --rm alpine id
uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel),11(floppy),20(dialout),26(tape),27(video)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and you can do more damaging things like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -v /:/mnt alpine rm -rf /mnt  # DON&#39;T RUN THIS!
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;run-as-non-privileged-user&#34;&gt;Run as non-privileged user&lt;/h3&gt;

&lt;p&gt;Since Docker 1.7, you can provide &lt;code&gt;-u&lt;/code&gt;|&lt;code&gt;--user&lt;/code&gt; to &lt;code&gt;run&lt;/code&gt; command to run the container as a specific user:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run -u 1000:1000 --rm -v /:/mnt alpine id
uid=1000 gid=1000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the cuser in the container doesn&amp;rsquo;t have the root privileges:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run -u 1000:1000 --rm -v /:/mnt alpine rm -rf /mnt/bin/sh
rm: can&#39;t remove &#39;/mnt/bin/sh&#39;: Permission denied
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;use-user-namespace-remapping&#34;&gt;Use user namespace remapping&lt;/h3&gt;

&lt;p&gt;Since Docker 1.10, Docker added &lt;a href=&#34;https://integratedcode.us/2015/10/13/user-namespaces-have-arrived-in-docker/&#34;&gt;support&lt;/a&gt; for user namespace for the docker daemon. With this feature, the container is able to run with the root user inside the container but an unprivileged user on the host.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see an example. To activate it, we need to rerun the docker daemon with &lt;code&gt;--userns-remap&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;First, stop docker daemon:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;systemctl stop docker.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;User namespace uses two config files &lt;code&gt;/etc/subuid&lt;/code&gt; and &lt;code&gt;/etc/subgid&lt;/code&gt;. See full description using &lt;code&gt;man subuid&lt;/code&gt; and &lt;code&gt;man subgid&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Touch these files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;touch /etc/subuid &amp;amp;&amp;amp; touch /etc/subgid
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run docker daemon:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo docker daemon --userns-remap=default
[...]
INFO[0001] User namespaces: ID ranges will be mapped to subuid/subgid ranges of: dockremap:dockremap
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, user namespaces have been activated. Furthermore:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat /etc/subuid
dockremap:100000:65536

$ cat /etc/subgid
dockremap:100000:65536
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What this means is the &lt;code&gt;dockremap&lt;/code&gt; user is allocated a block of 65536 user/group ids. Container started henceforth will be using user &lt;code&gt;root&lt;/code&gt; in the container, but to the host, it&amp;rsquo;s going to be user &lt;code&gt;dockremap&lt;/code&gt;&amp;rsquo;s subordinate users.&lt;/p&gt;

&lt;p&gt;Unfortunately, this feature requires the kernel to be compiled with user namespaces turned on. Most distributions don&amp;rsquo;t ship with this kernel config by default. Moreover, there have been security vulnerabilities related to &lt;a href=&#34;https://lwn.net/Articles/543273/&#34;&gt;user namespaces&lt;/a&gt; which hampers mainstream adoption.&lt;/p&gt;

&lt;p&gt;Another caveat about user namespace is once the daemon is run with &lt;code&gt;--userns-remap&lt;/code&gt;, the images pulled previously pulled by the daemon without the flag are going to be pulled again, since the permissioning on the file system layers are no longer valid. So, if you decide to use user namespace remap in production, do it early on and do not switch back and forth.&lt;/p&gt;

&lt;h2 id=&#34;image-distribution&#34;&gt;Image Distribution&lt;/h2&gt;

&lt;p&gt;The security goals are image provenance and trust. Provenance verifies the publisher of the image whereas trust verifies the integrity of the image.&lt;/p&gt;

&lt;h3 id=&#34;pull-by-digest-as-oppose-to-by-tag&#34;&gt;Pull by digest (as oppose to by tag)&lt;/h3&gt;

&lt;p&gt;Pulling images by tag name is surely convenient, but tags do not guarantee integrity. The same tag may not refer to the same image. This is surely the case when the tag name is &lt;code&gt;latest&lt;/code&gt;, as it always points to the latest image being pushed in the repository. Other named tags are not immutable either, since one can always untag (through &lt;code&gt;docker rmi&lt;/code&gt;) and re-tag and push image to change the image being pointed by the tag.&lt;/p&gt;

&lt;p&gt;Alternatively, pull by digest to ensure integrity and immutability. The repo digest is shown to you when you push an image to a registry:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# running the registry
# docker run -p 5000:5000 -v ~/registry:/var/lib/registry --name=registry registry:2  # only works with registry version 2

# building an image...
# docker build -t localhost:5000/test .

# push the image
$ docker push localhost:5000/test
The push refers to a repository [localhost:5000/test]
6102f0d2ad33: Pushed
latest: digest: sha256:04298820c9063b955614868b5cb2d60be91a3d7c560e0d6c377b0c3add764504 size: 528
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can subsequently pull the image using the digest:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker pull localhost:5000/test@sha256:04298820c9063b955614868b5cb2d60be91a3d7c560e0d6c377b0c3add764504
sha256:04298820c9063b955614868b5cb2d60be91a3d7c560e0d6c377b0c3add764504: Pulling from test
Digest: sha256:04298820c9063b955614868b5cb2d60be91a3d7c560e0d6c377b0c3add764504
Status: Downloaded newer image for localhost:5000/test@sha256:04298820c9063b955614868b5cb2d60be91a3d7c560e0d6c377b0c3add764504
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works well for registries you do control. However, I haven&amp;rsquo;t found an easy way to find out the repo disgest for images hosted on the official docker hub, unless I&amp;rsquo;m missing something glaringly obvious, this sort of defeats the purpose if the official docker hub doesn&amp;rsquo;t make pulling by digest easy for users.&lt;/p&gt;

&lt;h3 id=&#34;content-trust&#34;&gt;Content Trust&lt;/h3&gt;

&lt;h4 id=&#34;when-pulling&#34;&gt;When pulling&lt;/h4&gt;

&lt;p&gt;Docker 1.10 added content trust, which adds a layer of trust between the docker CLI and engine when pulling and pushing images. To enable it, set &lt;code&gt;DOCKER_CONTENT_TRUST&lt;/code&gt; to 1.&lt;/p&gt;

&lt;p&gt;When &lt;code&gt;DOCKER_CONTENT_TRUST&lt;/code&gt; is not set, what &lt;code&gt;docker pull&lt;/code&gt; does is like the following (diagram provided by the workshop)&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://blog.idempotent.ca/images/docker-pull-wo-ct.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;When content trust is turned on, what happens behind the scene is a notary server is contacted by the docker CLI, which responds with notary data for the CLI to verify, and when everything is checked out, the CLI obtains a repo digest, and asks the docker engine for the image given the repo digest. See the figure below. See the following diagram (provided by the workshop)&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://blog.idempotent.ca/images/docker-pull-w-ct.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h4 id=&#34;when-pushing&#34;&gt;When pushing&lt;/h4&gt;

&lt;p&gt;Same as pulling, you set &lt;code&gt;DOCKER_CONTENT_TRUST&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;docker push&lt;/code&gt; as usual. The difference is the metadata of the repo is signed by your key that you register with the notary service.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see it in action. First let&amp;rsquo;s pull an official image:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker pull alpine
Using default tag: latest
Pull (1 of 1): alpine:latest@sha256:3dcdb92d7432d56604d4545cbd324b14e647b313626d99b889d0626de158f73a
sha256:3dcdb92d7432d56604d4545cbd324b14e647b313626d99b889d0626de158f73a: Pulling from library/alpine
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tag it with my repo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker tag kevinjqiu/alpine-test:trusted
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Push the image to my docker hub account:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker push kevinjqiu/alpine-test:trusted
The push refers to a repository [docker.io/kevinjqiu/alpine-test]
4fe15f8d0ae6: Layer already exists
trusted: digest: sha256:3dcdb92d7432d56604d4545cbd324b14e647b313626d99b889d0626de158f73a size: 506
Signing and pushing trust metadata
You are about to create a new root signing key passphrase. This passphrase
will be used to protect the most sensitive key in your signing system. Please
choose a long, complex passphrase and be careful to keep the password and the
key file itself secure and backed up. It is highly recommended that you use a
password manager to generate the passphrase and keep it safe. There will be no
way to recover this key. You can find the key in your config directory.
Enter passphrase for new root key with ID 80375a3:
Repeat passphrase for new root key with ID 80375a3:
Enter passphrase for new repository key with ID bb34875 (docker.io/kevinjqiu/alpine-test):
Repeat passphrase for new repository key with ID bb34875 (docker.io/kevinjqiu/alpine-test):
Finished initializing &amp;quot;docker.io/kevinjqiu/alpine-test&amp;quot;
Successfully signed &amp;quot;docker.io/kevinjqiu/alpine-test&amp;quot;:trusted
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As this is the first time I&amp;rsquo;m pushing an image with &lt;code&gt;CONTENT_TRUST&lt;/code&gt; set, it prompts me for a passphrase to sign a generated root key, and then a passphrase to sign the key used with the repo I&amp;rsquo;m pushing to (in this case, &lt;code&gt;kevinjqiu/alpine-test&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The generated keys will be stored under &lt;code&gt;$HOME/.docker/trust/private/root_keys&lt;/code&gt; and &lt;code&gt;$HOME/.docker/trust/tuf_keys/&lt;/code&gt; folders.&lt;/p&gt;

&lt;h3 id=&#34;docker-security-scanning&#34;&gt;Docker Security Scanning&lt;/h3&gt;

&lt;p&gt;Docker security scanning (Nautilus) is a service provided by Docker Inc that routinely scan your file system layers for known security vulnerabilities (from &lt;a href=&#34;https://cve.mitre.org/&#34;&gt;CVE&lt;/a&gt; database). It also performs binary scan on statically linked binaries.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s worth noting that it&amp;rsquo;s not the only solution out there. There are a few other &lt;a href=&#34;https://www.aquasec.com/&#34;&gt;vendors&lt;/a&gt; at DockerCon that provide container security.&lt;/p&gt;

&lt;h2 id=&#34;capabilities-seccomp-and-linux-security-modules&#34;&gt;Capabilities, seccomp and Linux Security Modules&lt;/h2&gt;

&lt;p&gt;Now we&amp;rsquo;re in the more hardcore territory of Linux security and is frankly beyond my understanding of Linux. However, the advice given by the workshop is an easy one: use the default, and do not give more privilege than that&amp;rsquo;s required.&lt;/p&gt;

&lt;h3 id=&#34;do-not-run-container-with-privileged&#34;&gt;Do not run container with &amp;ndash;privileged&amp;hellip;&lt;/h3&gt;

&lt;p&gt;Root user on the container by default doesn&amp;rsquo;t get all the capabilities granted by the kernel. See &lt;code&gt;man capabilities&lt;/code&gt; for a list of capabilities. By default, docker container&amp;rsquo;s root user gets about a dozen capabilities. You can add or remove capabilities during runtime by specifying &lt;code&gt;--cap-add&lt;/code&gt; or &lt;code&gt;--cap-drop&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s worth pointing out that capabilities only apply to root users. If a container is run with &lt;code&gt;--user&lt;/code&gt;, then &lt;code&gt;--cap-add&lt;/code&gt; or &lt;code&gt;--cap-drop&lt;/code&gt; don&amp;rsquo;t apply, since non-root users don&amp;rsquo;t have capabilities.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--privileged&lt;/code&gt; gives a root user all capabilities, so unless you know what you&amp;rsquo;re doing, don&amp;rsquo;t do it. For docker development, it&amp;rsquo;s recommended that you run the development container in privileged mode, but in general, there&amp;rsquo;s never a reason to run with &lt;code&gt;--privileged&lt;/code&gt; on production, since it gives &lt;em&gt;ALL&lt;/em&gt; privileges.&lt;/p&gt;

&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/security/security/&#34;&gt;https://docs.docker.com/engine/security/security/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/riyazdf/dockercon-workshop/tree/master/capabilities&#34;&gt;https://github.com/riyazdf/dockercon-workshop/tree/master/capabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/riyazdf/dockercon-workshop/tree/master/apparmor&#34;&gt;https://github.com/riyazdf/dockercon-workshop/tree/master/apparmor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/riyazdf/dockercon-workshop/tree/master/seccomp&#34;&gt;https://github.com/riyazdf/dockercon-workshop/tree/master/seccomp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Docker...root...root...Docker (a.k.a. the docker group is a backdoor)</title>
      <link>http://blog.idempotent.ca/2016/05/03/docker...root...root...docker-a.k.a.-the-docker-group-is-a-backdoor/</link>
      <pubDate>Tue, 03 May 2016 22:52:41 -0400</pubDate>
      
      <guid>http://blog.idempotent.ca/2016/05/03/docker...root...root...docker-a.k.a.-the-docker-group-is-a-backdoor/</guid>
      <description>&lt;p&gt;While working with docker related stuff and when I use volume mount to a subdir of my home dir, I always come across the issue of the container littering folders with &lt;code&gt;root:root&lt;/code&gt; permission in my home folder and then I have to &lt;code&gt;sudo rm ...&lt;/code&gt; it, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -d $(pwd)/data:/var/lib/mysql/data mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It always annoys me but today, it came to me like an epiphany that this is actually a pretty severe security vulnerability.&lt;/p&gt;

&lt;p&gt;At &lt;code&gt;$DAYJOB&lt;/code&gt;, our build machines and staging hosts are all locked down, so we developers don&amp;rsquo;t have &lt;code&gt;sudo&lt;/code&gt; privilege to run anything &lt;strong&gt;except&lt;/strong&gt; &lt;code&gt;/usr/bin/docker&lt;/code&gt;, so it&amp;rsquo;s &lt;code&gt;/etc/sudoers&lt;/code&gt; file have something to the effect of:&lt;/p&gt;

&lt;p&gt;%dev            ALL =(root) NOPASSWD: /usr/bin/docker&lt;/p&gt;

&lt;p&gt;This is fine and dandy for other commands, but with &lt;code&gt;docker&lt;/code&gt;, when you run it with &lt;code&gt;sudo&lt;/code&gt;, you &lt;em&gt;are&lt;/em&gt; essentially &lt;code&gt;root&lt;/code&gt;, inside the container and outside. I thought: what if I create an image, and volume mount &lt;code&gt;/&lt;/code&gt; into the image? Wouldn&amp;rsquo;t that give me root privilege to everything?&lt;/p&gt;

&lt;p&gt;A quick proof of concept proved my suspicion:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run -it --rm -v /:/mnt alpine /bin/sh
/ # chroot /mnt
root@0a327dad801b:/# ls /
bin   config   dev  home        initrd.img.old  lib64  logs        media  opt   root  sbin     srv  syslog-logs  usr  vmlinuz
boot  content  etc  initrd.img  lib             local  lost+found  mnt    proc  run   selinux  sys  tmp          var  vmlinuz.old
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hey, I have a &lt;em&gt;root shell&lt;/em&gt; on the host machine where my user account has only limited permissions. Once I&amp;rsquo;m root, the possibility is endless: I can &lt;code&gt;cd&lt;/code&gt; into &lt;code&gt;/home/opsuser&lt;/code&gt;, and insert an ssh key I own to their &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt; file and suddenly I can &lt;code&gt;ssh&lt;/code&gt; as that user without this docker backdoor. I can setup a MITMproxy and capture all traffic on the host. I can inspect the log files I&amp;rsquo;m not suppsed to see, etc etc etc. Of course I&amp;rsquo;m not going to do that, but just thinking of it gives me chills, and what if some rogue employee discovers this and either steals my account credentials or impersonates me?&lt;/p&gt;

&lt;p&gt;Anyhow, I thought that was quite a revelation, and was about to email security@docker.com, until I searched online. Apparently, this is a &lt;a href=&#34;http://reventlov.com/advisories/using-the-docker-command-to-root-the-host&#34;&gt;known&lt;/a&gt; &lt;a href=&#34;https://fosterelli.co/privilege-escalation-via-docker.html&#34;&gt;security vulnerability&lt;/a&gt; that Docker does not consider as such. Once again, the Internet beat me to it :(&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>