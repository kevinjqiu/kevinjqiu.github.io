<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gae on Qiu&#39;s Quibble</title>
    <link>https://blog.idempotent.ca/categories/gae/</link>
    <description>Recent content in Gae on Qiu&#39;s Quibble</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 Mar 2010 13:24:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.idempotent.ca/categories/gae/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Building a GAE&#43;GWT application using the best practices (Part 5)</title>
      <link>https://blog.idempotent.ca/2010/03/09/building-a-gae-gwt-application-using-the-best-practices-part-5/</link>
      <pubDate>Tue, 09 Mar 2010 13:24:00 +0000</pubDate>
      
      <guid>https://blog.idempotent.ca/2010/03/09/building-a-gae-gwt-application-using-the-best-practices-part-5/</guid>
      <description>Building a GAE+GWT application using the best practices series  Part 1 Part 2 Part 3 Part 4 Part 5  In the last post of the series, I&amp;rsquo;ve shown how to setup a client side GIN+MVP project. This post will discuss the actual building of the UI and GWT-RPC web service calls using GWT-Dispatch on the client side.
Use cases Before we dive into the code, let&amp;rsquo;s go over again the use cases our little app has.</description>
    </item>
    
    <item>
      <title>Building a GAE&#43;GWT application using the best practices (Part 4)</title>
      <link>https://blog.idempotent.ca/2010/03/03/building-a-gae-gwt-application-using-the-best-practices-part-4/</link>
      <pubDate>Wed, 03 Mar 2010 13:15:00 +0000</pubDate>
      
      <guid>https://blog.idempotent.ca/2010/03/03/building-a-gae-gwt-application-using-the-best-practices-part-4/</guid>
      <description>Building a GAE+GWT application using the best practices series  Part 1 Part 2 Part 3 Part 4 Part 5  In the last blog post, we went over how to write GWT-RPC handlers using GWT-dispatch and dependency injection (Guice). This section, we&amp;rsquo;re going to see how the client side is set up.
Dependencies We need the following dependencies * Gin * GWT-dispatch * GWT-presenter * GWT-log
They need to be on the classpath when you compile your GWT code, but not under the war directory like the server dependencies need to be.</description>
    </item>
    
    <item>
      <title>Building a GAE&#43;GWT application using the best practices (Part 3)</title>
      <link>https://blog.idempotent.ca/2010/03/03/building-a-gae-gwt-application-using-the-best-practices-part-3/</link>
      <pubDate>Wed, 03 Mar 2010 01:02:00 +0000</pubDate>
      
      <guid>https://blog.idempotent.ca/2010/03/03/building-a-gae-gwt-application-using-the-best-practices-part-3/</guid>
      <description>Building a GAE+GWT application using the best practices series  Part 1 Part 2 Part 3 Part 4 Part 5  In this part of the series, we&amp;rsquo;re going to explore the designing of the web services for RateChecker and coding them using the command pattern from GWT-dispatch based on Ray Ryan&amp;rsquo;s presentation.
The big picture 
To correctly implement web services using the command pattern, we first have to get the big picture.</description>
    </item>
    
    <item>
      <title>Building a GAE&#43;GWT application using the best practices (Part 2)</title>
      <link>https://blog.idempotent.ca/2010/03/01/building-a-gae-gwt-application-using-the-best-practices-part-2/</link>
      <pubDate>Mon, 01 Mar 2010 00:44:00 +0000</pubDate>
      
      <guid>https://blog.idempotent.ca/2010/03/01/building-a-gae-gwt-application-using-the-best-practices-part-2/</guid>
      <description>Building a GAE+GWT application using the best practices series  Part 1 Part 2 Part 3 Part 4 Part 5  In Part 2, we&amp;rsquo;re going to go over project setup for GAE and GWT applications, and wire the server (servlet) using Guice and GWT-Dispatch.
Project setup I&amp;rsquo;m using Eclipse as my development environment. Install Google Eclipse plugin, and install the provided GWT (2.0.2) and GAE (1.3.1) with the plugin.</description>
    </item>
    
    <item>
      <title>Building a GAE&#43;GWT application using the best practices (Part 1)</title>
      <link>https://blog.idempotent.ca/2010/02/26/building-a-gae-gwt-application-using-the-best-practices-part-1/</link>
      <pubDate>Fri, 26 Feb 2010 00:39:00 +0000</pubDate>
      
      <guid>https://blog.idempotent.ca/2010/02/26/building-a-gae-gwt-application-using-the-best-practices-part-1/</guid>
      <description>Building a GAE+GWT application using the best practices series  Part 1 Part 2 Part 3 Part 4 Part 5  This is the first installment of the series Building a GAE+GWT application using the best practices.
Introduction In the next few blog posts, I&amp;rsquo;m going to present my experience building a simple (but non-trivial) web application using GWT and Google App Engine, while applying the best practices introduced by Ray Ryan in his excellent GWT best practices at Google IO last year.</description>
    </item>
    
  </channel>
</rss>