<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: gwt, | Qiu's Quibble]]></title>
  <link href="http://kevinjqiu.github.io/blog/categories/gwt/atom.xml" rel="self"/>
  <link href="http://kevinjqiu.github.io/"/>
  <updated>2015-05-01T00:00:15-04:00</updated>
  <id>http://kevinjqiu.github.io/</id>
  <author>
    <name><![CDATA[Kevin Jing Qiu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building a GAE+GWT application using the best practices (Part 5)]]></title>
    <link href="http://kevinjqiu.github.io/2010/03/09/building-a-gae-plus-gwt-application-using-the-best-practices-part-5/"/>
    <updated>2010-03-09T13:24:00-05:00</updated>
    <id>http://kevinjqiu.github.io/2010/03/09/building-a-gae-plus-gwt-application-using-the-best-practices-part-5</id>
    <content type="html"><![CDATA[<h2>Building a GAE+GWT application using the best practices series</h2>

<ol>
<li><a href="/2010/02/26/building-a-gae-plus-gwt-application-using-the-best-practices-part-1/">Part 1</a></li>
<li><a href="/2010/03/01/building-a-gae-plus-gwt-application-using-the-best-practices-part-2/">Part 2</a></li>
<li><a href="/2010/03/03/building-a-gae-plus-gwt-application-using-the-best-practices-part-3/">Part 3</a></li>
<li><a href="/2010/03/03/building-a-gae-plus-gwt-application-using-the-best-practices-part-4/">Part 4</a></li>
<li>Part 5</li>
</ol>


<p>In the last post of the series, I&rsquo;ve shown how to setup a client side GIN+MVP project. This post will discuss the actual building of the UI and GWT-RPC web service calls using GWT-Dispatch on the client side.</p>

<h2>Use cases</h2>

<p>Before we dive into the code, let&rsquo;s go over again the use cases our little app has.
<a href="http://reminiscential.files.wordpress.com/2010/02/screenshot2.png"><img src="http://reminiscential.files.wordpress.com/2010/02/screenshot2.png" alt="" title="RateChecker" width="259" height="216" class="aligncenter size-full wp-image-145" /></a></p>

<ul>
<li>When the UI loads, it should automatically fetch the latest saved rate</li>
<li>Also, the table below the latest rate should display the 10 most recent rates stored in the data store</li>
<li>The &ldquo;Refresh&rdquo; button does the above two steps</li>
<li>The &ldquo;Fetch latest&rdquo; button fetches the rate from the bank website, store it in the data store, and insert the latest rate in the recent rate table</li>
</ul>


<h2>MVP pattern</h2>

<p>For traditional desktop application, there&rsquo;s the MVC (Model-View-Control) pattern that&rsquo;s been in existence for over 20 years, since the Smalltalk days. However, the responsibility separation between the view and controller hasn&rsquo;t been well defined and over the years, people have been arguing about what whether the business logic should be entirely in controller.</p>

<p>With the MVP (Model-View-Presenter) pattern, the view itself doesn&rsquo;t contain any logic. The presenter manipulates the view according to business logic. Therefore, the pattern is also called &ldquo;supervising controller&rdquo; or &ldquo;passive view&rdquo;. This brings a huge benefit because now unit tests only have to deal with presenters, and mock out the view through the display interface. With this setup, the presenter unit tests can be run entirely in JVM. Otherwise, the tests need to involve GWT widgets, which can only be tested with GWTTestCase, which takes a lot longer to run.</p>

<h2>MainView</h2>

<p>Here I&rsquo;m using the new GWT2 UiBinder feature. UiBinder makes developing UI less boring.</p>

<pre><code class="xml MainView.ui.xml">&lt;!DOCTYPE ui:UiBinder SYSTEM "http://dl.google.com/gwt/DTD/xhtml.ent"&gt;
&lt;ui:UiBinder xmlns:ui="urn:ui:com.google.gwt.uibinder"
    xmlns:g="urn:import:com.google.gwt.user.client.ui"&gt;
    &lt;ui:style&gt;
        .rateDisplay {
            font-size: x-large;
            font-weight: bolder;
        }

        .mainPanel {
            padding: 10px;
        }
    &lt;/ui:style&gt;

    &lt;ui:with type="ratechecker.client.bundles.RateCheckerClientBundle"
        field="bundle"&gt;&lt;/ui:with&gt;
    &lt;g:DecoratorPanel height="200px"&gt;
        &lt;g:VerticalPanel styleName="{style.mainPanel}" verticalAlignment="ALIGN_TOP"&gt;
            &lt;g:Label&gt;Latest Selling Rate&lt;/g:Label&gt;
            &lt;g:Image resource="{bundle.loading}" visible="false"
                ui:field="loading"&gt;&lt;/g:Image&gt;
            &lt;g:Label ui:field="rateDisplay" styleName="{style.rateDisplay}"&gt;&lt;/g:Label&gt;
            &lt;g:HorizontalPanel&gt;
                &lt;g:Button ui:field="fetchLatest"&gt;Fetch Latest&lt;/g:Button&gt;
                &lt;g:Button ui:field="refresh"&gt;Refresh&lt;/g:Button&gt;
            &lt;/g:HorizontalPanel&gt;

            &lt;g:Label&gt;Recent rates&lt;/g:Label&gt;
            &lt;g:FlexTable ui:field="rateTable"&gt;
            &lt;/g:FlexTable&gt;
        &lt;/g:VerticalPanel&gt;
    &lt;/g:DecoratorPanel&gt;
&lt;/ui:UiBinder&gt; 
</code></pre>

<p>UiBinder can inter-operate with GWT2 ClientBundle. If you have used GWT1.x&rsquo;s ImageBundle, ClientBundle is similar to that, except now with ClientBundle, other client resources are able to be bundled such as CSS stylesheet and external text resource.</p>

<h3>MainPresenter.Display</h3>

<p>The display interface is the only thing presenter knows about the UI, and the presenter operates/manipulates UI only through the display interface.</p>

<p>The display interface can be standalone, but I find it&rsquo;s much more convenient to have it as an inner interface inside the presenter class.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Display</span> <span class="kd">extends</span> <span class="n">WidgetDisplay</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">HasText</span> <span class="nf">getRateDisplayLabel</span><span class="o">();</span>
</span><span class='line'>    <span class="n">HasClickHandlers</span> <span class="nf">getFetchLatest</span><span class="o">();</span>
</span><span class='line'>    <span class="n">HasClickHandlers</span> <span class="nf">getRefresh</span><span class="o">();&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="kt">void</span> <span class="nf">setEnabledFetchLatestButton</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">isEnabled</span><span class="o">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">setShowLoadingCurrentRate</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">isLoading</span><span class="o">);</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Add the rate to the recent rate table.</span>
</span><span class='line'><span class="cm"> * @param rate</span>
</span><span class='line'><span class="cm"> *      The {@link Rate} object</span>
</span><span class='line'><span class="cm"> * @param toHead</span>
</span><span class='line'><span class="cm"> *      &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt; - rate is inserted to the beginning of the table</span>
</span><span class='line'><span class="cm"> *      &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt; - rate is appended to the end of the table</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">addToRecentRates</span><span class="o">(</span><span class="n">Rate</span> <span class="n">rate</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">toHead</span><span class="o">);</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Clear the recent rates table.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">clearRecentRates</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">Here</span> <span class="n">we</span> <span class="n">use</span> <span class="n">the</span> <span class="s">&quot;characteristic interface&quot;</span> <span class="n">of</span> <span class="n">the</span> <span class="n">UI</span> <span class="n">elements</span> <span class="n">as</span> <span class="k">return</span> <span class="n">type</span> <span class="n">as</span> <span class="n">they</span> <span class="n">can</span> <span class="n">be</span> <span class="n">mocked</span><span class="o">.</span> <span class="n">For</span> <span class="n">things</span> <span class="n">that</span> <span class="n">cannot</span> <span class="n">be</span> <span class="n">returned</span> <span class="n">as</span> <span class="n">characteristic</span> <span class="nf">interfaces</span> <span class="o">(</span><span class="n">like</span> <span class="n">FlexTable</span><span class="o">),</span> <span class="n">we</span> <span class="n">provide</span> <span class="n">methods</span> <span class="k">for</span> <span class="n">the</span> <span class="n">presenter</span> <span class="n">to</span> <span class="n">manipulate</span> <span class="n">the</span> <span class="n">state</span> <span class="n">of</span> <span class="n">the</span> <span class="n">UI</span> <span class="nf">objects</span> <span class="o">(</span><span class="n">such</span> <span class="n">as</span> <span class="nf">clearRecentRates</span><span class="o">()).</span>
</span><span class='line'>
</span><span class='line'><span class="err">###</span> <span class="n">MainView</span><span class="o">.</span><span class="na">java</span>
</span><span class='line'>
</span><span class='line'><span class="n">Now</span> <span class="n">we</span> <span class="n">have</span> <span class="n">the</span> <span class="n">display</span> <span class="n">interface</span><span class="o">,</span> <span class="n">we</span> <span class="n">can</span> <span class="n">map</span> <span class="n">these</span> <span class="kd">interface</span> <span class="nc">methods</span> <span class="n">onto</span> <span class="n">our</span> <span class="n">UI</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">package</span> <span class="n">ratechecker</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">mvp</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainView</span> <span class="kd">extends</span> <span class="n">Composite</span> <span class="kd">implements</span> <span class="n">MainPresenter</span><span class="o">.</span><span class="na">Display</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">private</span> <span class="kd">static</span> <span class="n">MainViewUiBinder</span> <span class="n">uiBinder</span> <span class="o">=</span> <span class="n">GWT</span>
</span><span class='line'><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">MainViewUiBinder</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">interface</span> <span class="nc">MainViewUiBinder</span> <span class="kd">extends</span> <span class="n">UiBinder</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Widget</span><span class="o">,</span> <span class="n">MainView</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@UiField</span>
</span><span class='line'><span class="n">Button</span> <span class="n">refresh</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@UiField</span>
</span><span class='line'><span class="n">Button</span> <span class="n">fetchLatest</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@UiField</span>
</span><span class='line'><span class="n">Label</span> <span class="n">rateDisplay</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@UiField</span>
</span><span class='line'><span class="n">FlexTable</span> <span class="n">rateTable</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@UiField</span>
</span><span class='line'><span class="n">Image</span> <span class="n">loading</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="n">DateTimeFormat</span> <span class="n">_dateTimeFormat</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Inject</span>
</span><span class='line'><span class="kd">public</span> <span class="nf">MainView</span><span class="o">(</span><span class="kd">final</span> <span class="n">DateTimeFormat</span> <span class="n">dateTimeFormat</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="n">_dateTimeFormat</span> <span class="o">=</span> <span class="n">dateTimeFormat</span><span class="o">;</span>
</span><span class='line'><span class="n">initWidget</span><span class="o">(</span><span class="n">uiBinder</span><span class="o">.</span><span class="na">createAndBindUi</span><span class="o">(</span><span class="k">this</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">HasClickHandlers</span> <span class="nf">getFetchLatest</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="k">return</span> <span class="n">fetchLatest</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">Widget</span> <span class="nf">asWidget</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">HasText</span> <span class="nf">getRateDisplayLabel</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="k">return</span> <span class="n">rateDisplay</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setEnabledFetchLatestButton</span><span class="o">(</span><span class="kd">final</span> <span class="kt">boolean</span> <span class="n">isEnabled</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="n">fetchLatest</span><span class="o">.</span><span class="na">setEnabled</span><span class="o">(</span><span class="n">isEnabled</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">addToRecentRates</span><span class="o">(</span><span class="kd">final</span> <span class="n">Rate</span> <span class="n">rate</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">toHead</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="kd">final</span> <span class="kt">int</span> <span class="n">newRowIdx</span> <span class="o">=</span> <span class="n">toHead</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">rateTable</span><span class="o">.</span><span class="na">getRowCount</span><span class="o">();</span>
</span><span class='line'><span class="n">rateTable</span><span class="o">.</span><span class="na">insertRow</span><span class="o">(</span><span class="n">newRowIdx</span><span class="o">);</span>
</span><span class='line'><span class="n">rateTable</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">newRowIdx</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">_dateTimeFormat</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">rate</span><span class="o">.</span><span class="na">getTimeFetched</span><span class="o">()));</span>
</span><span class='line'><span class="n">rateTable</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">newRowIdx</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">rate</span><span class="o">.</span><span class="na">getRate</span><span class="o">()));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">clearRecentRates</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="n">rateTable</span><span class="o">.</span><span class="na">removeAllRows</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">HasClickHandlers</span> <span class="nf">getRefresh</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="k">return</span> <span class="n">refresh</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setShowLoadingCurrentRate</span><span class="o">(</span><span class="kd">final</span> <span class="kt">boolean</span> <span class="n">isLoading</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="n">loading</span><span class="o">.</span><span class="na">setVisible</span><span class="o">(</span><span class="n">isLoading</span><span class="o">);</span>
</span><span class='line'><span class="n">rateDisplay</span><span class="o">.</span><span class="na">setVisible</span><span class="o">(!</span><span class="n">isLoading</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">startProcessing</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">stopProcessing</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>A lot of this is boilerplate code to satisfy both UiBinder and GWT-presenter.Display interface. Ideally, the VIew shouldn&rsquo;t do too much, if any at all. Realistically, this is harder to achieve.</p>

<h3>MainPresenter</h3>

<p>Finally, we can show you the presenter code.
<figure class='code'><figcaption><span>MainPresenter.java</p></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainPresenter</span> <span class="kd">extends</span> <span class="n">WidgetPresenter</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">MainPresenter</span><span class="o">.</span><span class="na">Display</span><span class="o">&gt;</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">private</span> <span class="kd">final</span> <span class="n">DispatchAsync</span> <span class="n">_dispatch</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="n">ILog</span> <span class="n">_logger</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Inject</span>
</span><span class='line'><span class="kd">public</span> <span class="nf">MainPresenter</span><span class="o">(</span><span class="kd">final</span> <span class="n">Display</span> <span class="n">display</span><span class="o">,</span> <span class="kd">final</span> <span class="n">EventBus</span> <span class="n">eventBus</span><span class="o">,</span> <span class="kd">final</span> <span class="n">DispatchAsync</span> <span class="n">dispatch</span><span class="o">,</span> <span class="kd">final</span> <span class="n">ILog</span> <span class="n">logger</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">(</span><span class="n">display</span><span class="o">,</span> <span class="n">eventBus</span><span class="o">);</span>
</span><span class='line'>    <span class="n">_dispatch</span> <span class="o">=</span> <span class="n">dispatch</span><span class="o">;</span>
</span><span class='line'>    <span class="n">_logger</span> <span class="o">=</span> <span class="n">logger</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onBind</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">registerHandler</span><span class="o">(</span><span class="n">display</span><span class="o">.</span><span class="na">getFetchLatest</span><span class="o">().</span><span class="na">addClickHandler</span><span class="o">(</span><span class="k">new</span> <span class="nf">ClickHandler</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="kd">final</span> <span class="n">ClickEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">fetchSellingRate</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">registerHandler</span><span class="o">(</span><span class="n">eventBus</span><span class="o">.</span><span class="na">addHandler</span><span class="o">(</span><span class="n">RateFetchedEvent</span><span class="o">.</span><span class="na">TYPE</span><span class="o">,</span> <span class="k">new</span> <span class="nf">RateFetchedHandler</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onRateFetched</span><span class="o">(</span><span class="kd">final</span> <span class="n">Rate</span> <span class="n">rate</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">saveRate</span><span class="o">(</span><span class="n">rate</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">registerHandler</span><span class="o">(</span><span class="n">eventBus</span><span class="o">.</span><span class="na">addHandler</span><span class="o">(</span><span class="n">RateSavedEvent</span><span class="o">.</span><span class="na">TYPE</span><span class="o">,</span> <span class="k">new</span> <span class="nf">RateSavedHandler</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onRateSaved</span><span class="o">(</span><span class="kd">final</span> <span class="n">Rate</span> <span class="n">rate</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">display</span><span class="o">.</span><span class="na">addToRecentRates</span><span class="o">(</span><span class="n">rate</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">registerHandler</span><span class="o">(</span><span class="n">display</span><span class="o">.</span><span class="na">getRefresh</span><span class="o">().</span><span class="na">addClickHandler</span><span class="o">(</span><span class="k">new</span> <span class="nf">ClickHandler</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="kd">final</span> <span class="n">ClickEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">getLatestSavedRates</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">getLatestSavedRates</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">getLatestSavedRates</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">display</span><span class="o">.</span><span class="na">setShowLoadingCurrentRate</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">final</span> <span class="n">GetRates</span> <span class="n">getRates</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">GetRates</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">_dispatch</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">getRates</span><span class="o">,</span> <span class="k">new</span> <span class="n">AsyncCallback</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">GetRatesResult</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onFailure</span><span class="o">(</span><span class="kd">final</span> <span class="n">Throwable</span> <span class="n">caught</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">display</span><span class="o">.</span><span class="na">setShowLoadingCurrentRate</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>            <span class="n">_logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;Unable to get saved rates: &quot;</span> <span class="o">+</span> <span class="n">caught</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onSuccess</span><span class="o">(</span><span class="kd">final</span> <span class="n">GetRatesResult</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">display</span><span class="o">.</span><span class="na">setShowLoadingCurrentRate</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>            <span class="n">display</span><span class="o">.</span><span class="na">clearRecentRates</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kd">final</span> <span class="n">Rate</span> <span class="n">rate</span> <span class="o">:</span> <span class="n">result</span><span class="o">.</span><span class="na">getRates</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">display</span><span class="o">.</span><span class="na">addToRecentRates</span><span class="o">(</span><span class="n">rate</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Put the latest rate in the box</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">getRates</span><span class="o">().</span><span class="na">size</span><span class="o">()</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="kd">final</span> <span class="n">Rate</span> <span class="n">latestRate</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">getRates</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>                <span class="n">display</span><span class="o">.</span><span class="na">getRateDisplayLabel</span><span class="o">().</span><span class="na">setText</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">latestRate</span><span class="o">.</span><span class="na">getRate</span><span class="o">()));</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">fetchSellingRate</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">display</span><span class="o">.</span><span class="na">setShowLoadingCurrentRate</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">CheckRate</span> <span class="n">checkRate</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">CheckRate</span><span class="o">(</span><span class="n">RateType</span><span class="o">.</span><span class="na">Selling</span><span class="o">);</span>
</span><span class='line'>    <span class="n">_dispatch</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">checkRate</span><span class="o">,</span> <span class="k">new</span> <span class="n">AsyncCallback</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">CheckRateResult</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onFailure</span><span class="o">(</span><span class="kd">final</span> <span class="n">Throwable</span> <span class="n">caught</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">display</span><span class="o">.</span><span class="na">setShowLoadingCurrentRate</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>            <span class="n">_logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;Unable to fetch rate: &quot;</span> <span class="o">+</span> <span class="n">caught</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onSuccess</span><span class="o">(</span><span class="kd">final</span> <span class="n">CheckRateResult</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">display</span><span class="o">.</span><span class="na">setShowLoadingCurrentRate</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>            <span class="c1">// enable the fetch button</span>
</span><span class='line'>            <span class="n">display</span><span class="o">.</span><span class="na">setEnabledFetchLatestButton</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>            <span class="n">display</span><span class="o">.</span><span class="na">getRateDisplayLabel</span><span class="o">().</span><span class="na">setText</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">getRate</span><span class="o">().</span><span class="na">getRate</span><span class="o">()));</span>
</span><span class='line'>            <span class="n">eventBus</span><span class="o">.</span><span class="na">fireEvent</span><span class="o">(</span><span class="k">new</span> <span class="nf">RateFetchedEvent</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">getRate</span><span class="o">()));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// disable the fetch button until RPC succeeds</span>
</span><span class='line'>    <span class="n">display</span><span class="o">.</span><span class="na">setEnabledFetchLatestButton</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">saveRate</span><span class="o">(</span><span class="kd">final</span> <span class="n">Rate</span> <span class="n">rate</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">SaveRate</span> <span class="n">saveRate</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SaveRate</span><span class="o">(</span><span class="n">rate</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">_dispatch</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">saveRate</span><span class="o">,</span> <span class="k">new</span> <span class="n">AsyncCallback</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">SaveRateResult</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onFailure</span><span class="o">(</span><span class="kd">final</span> <span class="n">Throwable</span> <span class="n">caught</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">_logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;Unable to save rate: &quot;</span> <span class="o">+</span> <span class="n">caught</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onSuccess</span><span class="o">(</span><span class="kd">final</span> <span class="n">SaveRateResult</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">eventBus</span><span class="o">.</span><span class="na">fireEvent</span><span class="o">(</span><span class="k">new</span> <span class="nf">RateSavedEvent</span><span class="o">(</span><span class="n">rate</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span> <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onPlaceRequest</span><span class="o">(</span><span class="kd">final</span> <span class="n">PlaceRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span> <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onUnbind</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">refreshDisplay</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">revealDisplay</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span> <span class="kd">public</span> <span class="n">Place</span> <span class="nf">getPlace</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="kc">null</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>In the binding process, the event handlers are attached to the view components. <code>MainPresenter.bind()</code> was explicitly called by <code>AppPresenter.go()</code>. This is a simple application with one presenter. If there are more presenters, <code>AppPresenter</code> needs to manage the state of these sub-presenters: if they&rsquo;re active, the <code>bind()</code> method is called. If the presenter is no-longer active, the presenter&rsquo;s <code>unbind()</code> method should be called to un-attach the handlers, so they don&rsquo;t interfere with the event handlers that are currently in the active presenter.</p>

<p>The presenter is also responsible for making web service calls and deal with the returns. To call GWT-RPC web service using GWT-dispatch, we inject a DispatchAsync, which is an asynchronous counter part of the DispatchServlet introduced a few posts ago.</p>

<p>To call a web service, we simply construct an action object with required parameters and pass it in <code>DispatchAsync.execute()</code> and expect an <code>AsyncCallback</code> of type result that&rsquo;s coupled with the action. (remember each action has a coupled result type). Also, in this application, every action has a related event to indicate whether the action is successful. The event is thrown onto the event bus, so any interested party can handle that. The main benefit of using event bus is that my web service calls don&rsquo;t have to be coupled with the subsequent actions. For example, saveRate() method is responsible for making the web service calls, but the subsequent action (adding the saved rate to the recent rate table) isn&rsquo;t part of saveRate() method, and it shouldn&rsquo;t be. If in the future, some other actions need to be carried out when a rate is saved, we just have to add the action in the RateSavedHandler, and indeed, if another part of the UI (not visible by main presenter) need to do something after the rate is saved, that presenter only needs to handle that event in there without affecting saveRate() method at all.</p>

<p>For view the full source code, take a look at the project I created on <a href="http://github.com/kevinjqiu/ratechecker">Github</a>.</p>

<p><strong>EDIT:</strong> For any Google App Engine experts out there happened to be reading this post, I&rsquo;m having trouble with the performance of this simple app. Seems like the data store is taking way too much time executing my query. Initially I thought it was because URL fetch is slow, but I recently added a property in Rate entity to track the time spent on fetching the URL and every request takes less than 1 second. However, the GetRates action takes a long time to return (usually ~3 to 5 seconds, sometimes even over 10 seconds). It&rsquo;s a simple query ordering on a single property so no complex index is needed. So I&rsquo;m wondering what&rsquo;s wrong here.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a GAE+GWT application using the best practices (Part 4)]]></title>
    <link href="http://kevinjqiu.github.io/2010/03/03/building-a-gae-plus-gwt-application-using-the-best-practices-part-4/"/>
    <updated>2010-03-03T13:15:00-05:00</updated>
    <id>http://kevinjqiu.github.io/2010/03/03/building-a-gae-plus-gwt-application-using-the-best-practices-part-4</id>
    <content type="html"><![CDATA[<h2>Building a GAE+GWT application using the best practices series</h2>

<ol>
<li><a href="/2010/02/26/building-a-gae-plus-gwt-application-using-the-best-practices-part-1/">Part 1</a></li>
<li><a href="/2010/03/01/building-a-gae-plus-gwt-application-using-the-best-practices-part-2/">Part 2</a></li>
<li><a href="/2010/03/03/building-a-gae-plus-gwt-application-using-the-best-practices-part-3/">Part 3</a></li>
<li>Part 4</li>
<li><a href="/2010/03/09/building-a-gae-plus-gwt-application-using-the-best-practices-part-5/">Part 5</a></li>
</ol>


<p>In the last blog post, we went over how to write GWT-RPC handlers using GWT-dispatch and dependency injection (Guice). This section, we&rsquo;re going to see how the client side is set up.</p>

<h2>Dependencies</h2>

<p>We need the following dependencies
* <a href="http://code.google.com/p/google-gin/">Gin</a>
* <a href="http://code.google.com/p/gwt-dispatch/">GWT-dispatch</a>
* <a href="http://code.google.com/p/gwt-presenter/">GWT-presenter</a>
* <a href="http://code.google.com/p/gwt-log/">GWT-log</a></p>

<p>They need to be on the classpath when you compile your GWT code, but not under the war directory like the server dependencies need to be.</p>

<h2>Module definition</h2>

<p><a href="http://reminiscential.files.wordpress.com/2010/03/screenshot1.png"><img src="http://reminiscential.files.wordpress.com/2010/03/screenshot1.png?w=200" alt="" title="Screenshot" width="200" height="300" class="aligncenter size-medium wp-image-172" /></a></p>

<p>The first step is to declare the inherited GWT modules in the module XML file:
RateChecker.gwt.xml
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="ni">&amp;lt;</span>?xml version=<span class="ni">&amp;ldquo;</span>1.0<span class="ni">&amp;rdquo;</span> encoding=<span class="ni">&amp;ldquo;</span>UTF-8<span class="ni">&amp;rdquo;</span>?&gt;
</span><span class='line'><span class="nt">&lt;module</span> <span class="na">rename-to=</span><span class="s">&quot;ratechecker&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;inherits</span> <span class="na">name=</span><span class="s">&quot;com.google.gwt.user.User&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;inherits</span> <span class="na">name=</span><span class="s">&quot;com.google.gwt.inject.Inject&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;inherits</span> <span class="na">name=</span><span class="s">&quot;net.customware.gwt.dispatch.Dispatch&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;inherits</span> <span class="na">name=</span><span class="s">&quot;net.customware.gwt.presenter.Presenter&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;inherits</span> <span class="na">name=</span><span class="s">&quot;com.allen_sauer.gwt.log.gwt-log-DEBUG&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;inherits</span> <span class="na">name=</span><span class="s">&quot;com.google.gwt.user.theme.chrome.Chrome&quot;</span><span class="nt">/&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>entry-point class=&quot;ratechecker.client.RateChecker&quot; /<span class="ni">&amp;gt;</span>
</span><span class='line'>
</span><span class='line'><span class="ni">&amp;lt;</span>source path=&quot;client&quot; /<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>source path=&quot;shared&quot; /<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/module&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Here we specify the explicitly the packages need to be included for compiling - &ldquo;client&rdquo; and &ldquo;shared&rdquo;. If not specified, GWT will by default compile every source file under the client package.</p>

<h2>Create a Gin Module</h2>

<p>Gin and Guice implements the same API (or rather, Gin has the same interface as Guice), but Gin uses GWT deferred binding &ldquo;magic&rdquo;. Similar to what we have on the server side, on the client side, we start by defining our module:
RateCheckerClientModule:</p>

<pre><code class="java RateCheckerClientModule.java">public class RateCheckerClientModule extends AbstractPresenterModule {

    public RateCheckerClientModule() {
    }

    @Override
    protected void configure() {

        bind(EventBus.class).to(DefaultEventBus.class).in(Singleton.class);
        bind(PlaceManager.class).in(Singleton.class);

    }
}
</code></pre>

<p>To start up, we bind EventBus and PlaceManager in the singleton scope. They&rsquo;re both provided by GWT-mvp library.</p>

<h2>AppPresenter</h2>

<p>There are different ways to facilitate the MVP pattern but the way I find the most convenient is to have an AppPresenter manage all subsequent presenters. The view the AppPresenter represents is the RootPanel of GWT.</p>

<pre><code class="java AppPresenter.java">public class AppPresenter {

    private HasWidgets _container;

    private final MainPresenter _mainPresenter;


    @Inject
    public AppPresenter(final MainPresenter mainPresenter) {
        _mainPresenter = mainPresenter;
        _mainPresenter.bind();
    }


    public void go(final HasWidgets container) {
        _container = container;
        _container.clear();
        _container.add(_mainPresenter.getDisplay().asWidget());
    }
}
</code></pre>

<p>Here, MainPresenter is the actual UI. The go() method of AppPresenter is for the module entry point to call when the module first initializes. We need to add the bindings to the client module:</p>

<pre><code class="java">        ...
    @Override
    protected void configure() {

        bind(EventBus.class).to(DefaultEventBus.class).in(Singleton.class);
        bind(PlaceManager.class).in(Singleton.class);
        bind(ILog.class).to(GwtLogAdapter.class).in(Singleton.class);
        bind(AppPresenter.class);

        bindPresenter(MainPresenter.class, MainPresenter.Display.class, MainView.class);
    }
        ...
</code></pre>

<p>Here we specify the explicitly the packages need to be included for compiling - &ldquo;client&rdquo; and &ldquo;shared&rdquo;. If not specified, GWT will by default compile every source file under the client package.</p>

<h2>Ginjector</h2>

<p>Similar to &ldquo;Injector&rdquo; interface on the server side, the client side needs to define a Ginjector that act as a gateway for Gin managed object instances.</p>

<pre><code class="java RateCheckerGinjector.java">@GinModules({RateCheckerClientModule.class, ClientDispatchModule.class})
public interface RateCheckerGinjector extends Ginjector {

    AppPresenter getAppPresenter();

}
</code></pre>

<p>Here the annotation <code>@GinModules({...})</code> makes the instances managed by <code>RateCheckerClientModule</code> and <code>ClientDispatchModule</code> available for the ginjector. ClientDispatchModule binds DispatchAsync interface, which is what we will use to interface with the web service methods.</p>

<h2>Entry Point</h2>

<p>Finally, here&rsquo;s the module entry point:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;*</span>
</span><span class='line'> <span class="o">*</span> <span class="n">Entry</span> <span class="n">point</span> <span class="n">classes</span> <span class="n">define</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">onModuleLoad</span><span class="o">()&lt;/</span><span class="n">code</span><span class="o">&gt;.</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RateChecker</span> <span class="kd">implements</span> <span class="n">EntryPoint</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">RateCheckerGinjector</span> <span class="n">_injector</span> <span class="o">=</span> <span class="n">GWT</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">RateCheckerGinjector</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onModuleLoad</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">final</span> <span class="n">AppPresenter</span> <span class="n">appPresenter</span> <span class="o">=</span> <span class="n">_injector</span><span class="o">.</span><span class="na">getAppPresenter</span><span class="o">();</span>
</span><span class='line'>    <span class="n">appPresenter</span><span class="o">.</span><span class="na">go</span><span class="o">(</span><span class="n">RootPanel</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;root&quot;</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><code>GWT.create(...)</code> statement here creates the ginjector at runtime. Behind the scene, it generates a class (by the name of something like RateCheckerGinjector_Impl) that contains the code to instantiate the bound classes, and when Gin sees a @Inject annotation on a class&rsquo;s constructor, it provides the instances with the correct scope from the dependency injection container (Ginjector) to the constructor so that the said class can be instantiated.</p>

<p>The onModuleLoad() method doesn&rsquo;t do much. It simple binds the appPresenter with the RootPanel where the app&rsquo;s UI is going to be displayed.</p>

<p>I know a lot of the concrete UI creation has been left out of this post, but hopefully it will become clearer once the next post is in.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a GAE+GWT application using the best practices (Part 2)]]></title>
    <link href="http://kevinjqiu.github.io/2010/03/01/building-a-gae-plus-gwt-application-using-the-best-practices-part-2/"/>
    <updated>2010-03-01T00:44:00-05:00</updated>
    <id>http://kevinjqiu.github.io/2010/03/01/building-a-gae-plus-gwt-application-using-the-best-practices-part-2</id>
    <content type="html"><![CDATA[<h2>Building a GAE+GWT application using the best practices series</h2>

<ol>
<li><a href="/2010/02/26/building-a-gae-plus-gwt-application-using-the-best-practices-part-1/">Part 1</a></li>
<li>Part 2</li>
<li><a href="/2010/03/03/building-a-gae-plus-gwt-application-using-the-best-practices-part-3/">Part 3</a></li>
<li><a href="/2010/03/03/building-a-gae-plus-gwt-application-using-the-best-practices-part-4/">Part 4</a></li>
<li><a href="/2010/03/09/building-a-gae-plus-gwt-application-using-the-best-practices-part-5/">Part 5</a></li>
</ol>


<p>In Part 2, we&rsquo;re going to go over project setup for GAE and GWT applications, and wire the server (servlet) using <a href="http://code.google.com/p/google-guice/">Guice</a> and <a href="http://code.google.com/p/gwt-dispatch/">GWT-Dispatch</a>.</p>

<h2>Project setup</h2>

<p>I&rsquo;m using Eclipse as my development environment. Install <a href="http://code.google.com/eclipse/">Google Eclipse plugin</a>, and install the provided GWT (2.0.2) and GAE (1.3.1) with the plugin. Create a new project in Eclipse using the &ldquo;New web application project&rdquo; wizard, and create a sample project.</p>

<p>Now, because during deployment, GAE applications are executed within its own servlet container, all dependencies have to be placed inside the directory /war/WEB-INF/lib. Go ahead, download <a href="http://code.google.com/p/google-guice/downloads/list">Guice</a>, <a href="http://code.google.com/p/gwt-dispatch/downloads/list">GWT-dispatch</a>, <a href="http://code.google.com/p/gwt-log/downloads/list">GWT-log</a>, <a href="http://commons.apache.org/downloads/download_logging.cgi">commons-logging</a> and <a href="http://logging.apache.org/log4j/1.2/download.html">log4j</a>. Put the jar files inside /war/WEB-INF/lib directory. Then in Eclipse, select the jars you just placed, right click and select &ldquo;Add to build path&rdquo;. Your lib directory should look something like this:</p>

<p><a href="http://reminiscential.files.wordpress.com/2010/03/screenshot.png"><img class="aligncenter size-medium wp-image-158" title="Screenshot" src="http://reminiscential.files.wordpress.com/2010/03/screenshot.png?w=168" alt="" width="168" height="300" /></a></p>

<h2>&ldquo;Wiring&rdquo; the server</h2>

<p>Now that the project is setup, we need to wire the server to utilize the dependency injection container Guice. The details can be found <a href="http://code.google.com/p/google-guice/wiki/GoogleAppEngine">here</a> but in short, we need to do the following:</p>

<h3>Modify web.xml</h3>

<p>Find web.xml in /war/WEB-INF. In traditional GWT-RPC development, every service needs to be written as a servlet and declared in web.xml. For Guice + GWT-dispatch, we only need a filter and a listener (as the entry point).</p>

<pre><code class="xml">&lt;webapp&gt;
        [...]
    &lt;filter&gt;
        &lt;filter-name&gt;guiceFilter&lt;/filter-name&gt;
        &lt;filter-class&gt;com.google.inject.servlet.GuiceFilter&lt;/filter-class&gt;
    &lt;/filter&gt;

    &lt;filter-mapping&gt;
        &lt;filter-name&gt;guiceFilter&lt;/filter-name&gt;
        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
    &lt;/filter-mapping&gt;

    &lt;listener&gt;
        &lt;listener-class&gt;ratechecker.server.guice.GuiceServletConfig&lt;/listener-class&gt;
    &lt;/listener&gt;
        [...]
&lt;/webapp&gt;
</code></pre>

<p>Here, our listener is ratechecker.server.guice.GuiceServletConfig. It reads like the following</p>

<pre><code class="java">public class GuiceServletConfig extends GuiceServletContextListener {

    private ServletContext _ctx;

    @Override
    public void contextDestroyed(final ServletContextEvent servletContextEvent) {
        _ctx = null;
        super.contextDestroyed(servletContextEvent);
    }

    @Override
    public void contextInitialized(final ServletContextEvent servletContextEvent) {
        _ctx = servletContextEvent.getServletContext();
        super.contextInitialized(servletContextEvent);
    }

    @Override
    protected Injector getInjector() {
        return Guice.createInjector(new GuiceServerModule(), new DispatchServletModule());
    }

}
</code></pre>

<p>This code is borrowed from <a href="http://james.apache.org/hupa/project-info.html">Hupa</a>. The responsibility of this servlet context listener is to construct an injector (achieved by the last method). Here, our injector contains two modules, <code>ratechecker.server.guice.GuiceServerModule</code> and <code>ratechecker.server.guice.DispatchServletModule</code>.</p>

<pre><code class="java DispatchServletModule.java">public class DispatchServletModule extends ServletModule {
    @Override
    protected void configureServlets() {
        super.configureServlets();
        serve("/ratechecker/dispatch").with(RateCheckerDispatchServlet.class);
    }
}
</code></pre>

<p>This module has a mapping of URIs and its serving classes. It serves &ldquo;/ratechecker/dispatch&rdquo; with <code>RateCheckerDispatchServlet</code>, which is the entry point for GWT-dispatch.</p>

<pre><code class="java GuiceServerModule.java">public class GuiceServerModule extends ActionHandlerModule {

    public GuiceServerModule() {
    }

    @Override
    protected void configureHandlers() {
            // declare bindings
    }

}
</code></pre>

<p>This is where you declare your bindings for the application. We&rsquo;ll come back to this file frequently as the application develops.</p>

<pre><code class="java RateCheckerDispatchServlet.java">@Singleton
public class RateCheckerDispatchServlet extends DispatchServiceServlet {

    private static final long serialVersionUID = 4895255235709260169L;

    private final Log _logger;

    @Inject
    public RateCheckerDispatchServlet(final Dispatch dispatch, final Log logger) {
        super(dispatch);
        _logger = logger;
    }

    @Override
    public Result execute(final Action&lt;?&gt; action) throws ActionException {
        try {
            _logger.info("executing: " + action.getClass().getName());
            final Result res = super.execute(action);
            _logger.info("finished: " + action.getClass().getName());
            return res;
        } catch (final ActionException ae) {
            _logger.error(ae.getMessage());
            ae.printStackTrace();
            throw ae;
        } catch (final Exception e) {
            _logger.error("Unexpected exception: " + e.getMessage());
            e.printStackTrace();
        }
        return null;
    }
}
</code></pre>

<p>This servlet extends from GWT-dispatch&rsquo;s DispatchServiceServlet. It&rsquo;s main responsibility is to provide unified logging.</p>

<p>Notice you cannot run the application, because Guice is complaining that there&rsquo;s no binding for <code>org.apache.commons.logging.Log</code>, which we declared as a dependency for RateCheckerDispatchServlet. We go ahead write our <code>LogProvider</code> (to provide lazy initialization for the Log object to its users)</p>

<pre><code class="java LogProvider.java">public class LogProvider implements Provider&lt;Log&gt; {

    @Override
    public Log get() {
        return new Log4JLogger("RateCheckerLogger");
    }

}
</code></pre>

<p>Now the binding should be added to <code>GuiceServerModule</code>:
<code>java GuiceServerModule.java
[...]
    @Override
    protected void configureHandlers() {
            bind(Log.class).toProvider(LogProvider.class).in(Singleton.class);
    }
[...]
</code></p>

<p>Now everytime Guice sees <code>Log.class</code> declared as a dependency in the constructor, it uses <code>LogProvider.get()</code> method to retrieve an instance of the log if there&rsquo;s none, and uses the existing log instance if it&rsquo;s been initialized (because of the singleton scope).</p>

<p>In the end, your server package should look like this:
<a href="http://reminiscential.files.wordpress.com/2010/03/screenshot-1.png"><img src="http://reminiscential.files.wordpress.com/2010/03/screenshot-1.png?w=300" alt="" title="Screenshot-1" width="300" height="154" class="aligncenter size-medium wp-image-159" /></a></p>

<p>We haven&rsquo;t covered PersistenceManagerProvider but it&rsquo;s the same idea as LogProvider. It provides an instance of PersistenceManager, which is used by the data store related action handlers to deal with data persistence.</p>

<p>That&rsquo;s it for server wiring. In the next blog post, I&rsquo;ll go through designing and writing GWT-RPC services using Guice and GWT-dispatch.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a GAE+GWT application using the best practices (Part 1)]]></title>
    <link href="http://kevinjqiu.github.io/2010/02/26/building-a-gae-plus-gwt-application-using-the-best-practices-part-1/"/>
    <updated>2010-02-26T00:39:00-05:00</updated>
    <id>http://kevinjqiu.github.io/2010/02/26/building-a-gae-plus-gwt-application-using-the-best-practices-part-1</id>
    <content type="html"><![CDATA[<h2>Building a GAE+GWT application using the best practices series</h2>

<ol>
<li>Part 1</li>
<li><a href="/2010/03/01/building-a-gae-plus-gwt-application-using-the-best-practices-part-2/">Part 2</a></li>
<li><a href="/2010/03/03/building-a-gae-plus-gwt-application-using-the-best-practices-part-3/">Part 3</a></li>
<li><a href="/2010/03/03/building-a-gae-plus-gwt-application-using-the-best-practices-part-4/">Part 4</a></li>
<li><a href="/2010/03/09/building-a-gae-plus-gwt-application-using-the-best-practices-part-5/">Part 5</a></li>
</ol>


<p>This is the first installment of the series Building a GAE+GWT application using the best practices.</p>

<h2>Introduction</h2>

<p>In the next few blog posts, I&rsquo;m going to present my experience building a simple (but non-trivial) web application using GWT and Google App Engine, while applying the best practices introduced by Ray Ryan in his excellent <a href="http://code.google.com/events/io/2009/sessions/GoogleWebToolkitBestPractices.html">GWT best practices</a> at Google IO last year.</p>

<p>The application I&rsquo;m going to build is called RateChecker. It&rsquo;s simply a tool that goes fetches the posted USD/CAD exchange rate from a bank website, persists the rate to the data store, and present the user with the recent rates when requested. It can potentially do more (like generating a histogram of the rates, etc), but for the purpose of blog series, I&rsquo;m going with the basics to illustrate the implementation pattern without losing my bearings in the embellishing.</p>

<p>Here&rsquo;s a screenshot of the finished application:</p>

<p style="text-align:center;"><a href="http://reminiscential.files.wordpress.com/2010/02/screenshot2.png"><img class="size-full wp-image-145 aligncenter" title="RateChecker" src="http://reminiscential.files.wordpress.com/2010/02/screenshot2.png" alt="" width="259" height="216" /></a></p>


<h2>The Goals</h2>

<p>I intend to use this minimal application to practice using the following technologies/techniques:
* Server/Persistence tier:
    * Google Guice as dependency injection container on the server side
    * JDO as the persistence layer
    * AppEngine Cron task
    * Command pattern for request handling
* Client tier:
    * Google GIN as dependency injection container on the client side
    * Model-View-Presenter pattern on the client side
    * EventBus to decouple components
    * Command pattern for remote service calls
* Unit Testing on both Client/Server side with mock objects</p>

<p>Also I plan to rewrite the service layer with one of the alternate JVM language, such as Scala or Clojure, if I my schedule allows and I have enough motivation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up GWT2 project with gwt-maven-plugin]]></title>
    <link href="http://kevinjqiu.github.io/2009/12/18/setting-up-gwt2-project-with-gwt-maven-plugin/"/>
    <updated>2009-12-18T00:29:00-05:00</updated>
    <id>http://kevinjqiu.github.io/2009/12/18/setting-up-gwt2-project-with-gwt-maven-plugin</id>
    <content type="html"><![CDATA[<p>GWT2 offers a lot of exciting new features: OOPHM, SOYC, code splitting, declarative UI, to name a few. This evening, I experimented setting up a GWT2 project using Codehaus&rsquo;s gwt-maven-plugin.</p>

<p>I&rsquo;m using Eclipse, so obviously, you need m2eclipse and Google Eclipse Plugin. First step is creating a Maven project:
<code>File-&gt;New-&gt;Project...-&gt;Maven Project</code></p>

<p>In the archetype selection dialog, select org.codehaus.mojo.gwt-maven-plugin:1.1.
<a href="http://reminiscential.wordpress.com/files/2009/12/screenshot-new-maven-project.png"><img class="alignnone size-medium wp-image-119" title="Screenshot-New Maven Project" src="http://reminiscential.wordpress.com/files/2009/12/screenshot-new-maven-project.png?w=300" alt="" width="300" height="200" /></a></p>

<p>We choose this to create an archetype but 1.1 doesn&rsquo;t work with GWT2. Later on, we will modify pom.xml to use another version of the plugin.</p>

<p>Enter your project&rsquo;s GroupId, ArtifactId, Version, and Package -&gt; Finish
<a href="http://reminiscential.wordpress.com/files/2009/12/screenshot-new-maven-project-1.png"><img class="alignnone size-medium wp-image-120" title="Screenshot-New Maven Project -1" src="http://reminiscential.wordpress.com/files/2009/12/screenshot-new-maven-project-1.png?w=300" alt="" width="300" height="200" /></a></p>

<p>The plugin generates an archetype of GWT 1.6 project. In Eclipse, open pom.xml. As stated earlier, gwt-maven-plugin 1.1 doesn&rsquo;t work with GWT2. You need 1.2, but since 1.2 hasn&rsquo;t been released, we will use the snapshot version. The snapshot version is hosted on codehaus&rsquo;s snapshot repository, so we need to add the repository first.
<a href="http://reminiscential.wordpress.com/files/2009/12/plugin-repo1.png"><img class="alignnone size-medium wp-image-121" title="plugin-repo1" src="http://reminiscential.wordpress.com/files/2009/12/plugin-repo1.png?w=300" alt="" width="300" height="148" /></a></p>

<pre><code>Id: codehaus-snapshot-repository
Name: (anything you like)
URL: http://snapshots.repository.codehaus.org
</code></pre>

<p>Then, change the version of gwt-maven-plugin from 1.1 to 1.2-SNAPSHOT</p>

<p><a href="http://reminiscential.wordpress.com/files/2009/12/plugin-repo.png"><img class="alignnone size-medium wp-image-122" title="plugin version" src="http://reminiscential.wordpress.com/files/2009/12/plugin-repo.png?w=300" alt="" width="300" height="149" /></a></p>

<p>Also, you need to specify the module and runTarget in the configuration of the plugin, something similar to the following:</p>

<pre><code class="xml">        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
                &lt;artifactId&gt;gwt-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;1.2-SNAPSHOT&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;compile&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
                &lt;configuration&gt;
                    &lt;module&gt;com.mycomp.demo.mygwt2.Application&lt;/module&gt;
                    &lt;runTarget&gt;com.mycomp.demo.mygwt2.Application/Application.html&lt;/runTarget&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
  &lt;/plugins&gt;
</code></pre>

<p>Save the pom. Eclipse will be busy fetching the dependencies and building the project.</p>

<p>After it&rsquo;s done, it&rsquo;s time to create launchers.</p>

<p>Right click on pom.xml, Run As-&gt;Maven Build&hellip;, in the Run Configurations dialog, put &ldquo;gwt:compile gwt:run&rdquo; as the goals.
<a href="http://reminiscential.wordpress.com/files/2009/12/screenshot-run-configurations.png"><img class="alignnone size-medium wp-image-123" title="Screenshot-Run Configurations" src="http://reminiscential.wordpress.com/files/2009/12/screenshot-run-configurations.png?w=300" alt="" width="300" height="172" /></a></p>

<p>Hit &ldquo;run&rdquo;, GWT Development Mode application will appear.
<a href="http://reminiscential.wordpress.com/files/2009/12/screenshot-gwt-development-mode.png"><img class="alignnone size-medium wp-image-124" title="Screenshot-GWT Development Mode" src="http://reminiscential.wordpress.com/files/2009/12/screenshot-gwt-development-mode.png?w=300" alt="" width="300" height="210" /></a></p>

<p>The final missing piece is the debug mode. One of the advantages of using GWT is developing AJAX application with existing Java tooling. So let&rsquo;s go ahead and set it up.
Right click on pom.xml-&gt;Run As-&gt;Maven build&hellip;
In the following dialog, enter &ldquo;gwt:debug&rdquo; as goals, save it.</p>

<p>Click on the dropdown of the debug button on the toolbar, select &ldquo;Debug Configurations&rdquo;.
In the left panel, find &ldquo;Remote Java Application&rdquo;, select it and click the icon for &ldquo;New launch configuration&rdquo; (top left corner). Accept defaults, save, and close.
<a href="http://reminiscential.wordpress.com/files/2009/12/screenshot-debug-configurations.png"><img class="alignnone size-medium wp-image-125" title="Screenshot-Debug Configurations" src="http://reminiscential.wordpress.com/files/2009/12/screenshot-debug-configurations.png?w=300" alt="" width="300" height="172" /></a></p>

<p>Put a breakpoint at Application.onModuleLoad(), start the debug server by running the debug launcher we just created. (the one with goal gwt:debug). When you see &ldquo;Listening for transport dt_socket at address: 8000&rdquo; in the console output, run the attach launcher we just created (the remote debugger). The GWT Development Mode app pops up. Because GWT2 uses OOPHM (Out Of Process Hosted Mode), you need to copy the start URL and paste it in a browser (I&rsquo;m using FF). If it&rsquo;s the first time you run hosted mode like that, you will be asked to install a Firefox plugin. After it&rsquo;s installed, paste the URL into the address bar. If everything goes well, your breakpoint will be hit.
<a href="http://reminiscential.wordpress.com/files/2009/12/screenshot-debug-mygwt2-src-main-java-com-mycomp-demo-mygwt2-client-application-java-eclipse.png"><img class="alignnone size-medium wp-image-126" title="Screenshot-Debug - mygwt2-src-main-java-com-mycomp-demo-mygwt2-client-Application.java - Eclipse" src="http://reminiscential.wordpress.com/files/2009/12/screenshot-debug-mygwt2-src-main-java-com-mycomp-demo-mygwt2-client-application-java-eclipse.png?w=300" alt="" width="300" height="213" /></a></p>

<p>There you have it. A sample mavenized GWT2 project. Enjoy the goodies offered by both GWT2 and Maven!</p>
]]></content>
  </entry>
  
</feed>
