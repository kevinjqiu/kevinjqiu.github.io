<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: gae, | Qiu's Quibble]]></title>
  <link href="http://kevinjqiu.github.io/blog/categories/gae/atom.xml" rel="self"/>
  <link href="http://kevinjqiu.github.io/"/>
  <updated>2014-11-27T01:02:58-05:00</updated>
  <id>http://kevinjqiu.github.io/</id>
  <author>
    <name><![CDATA[Kevin Jing Qiu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building a GAE+GWT application using the best practices (Part 3)]]></title>
    <link href="http://kevinjqiu.github.io/2010/03/03/building-a-gae-plus-gwt-application-using-the-best-practices-part-3/"/>
    <updated>2010-03-03T01:02:00-05:00</updated>
    <id>http://kevinjqiu.github.io/2010/03/03/building-a-gae-plus-gwt-application-using-the-best-practices-part-3</id>
    <content type="html"><![CDATA[<h2>Building a GAE+GWT application using the best practices series</h2>

<ol>
<li><a href="/2010/02/26/building-a-gae-plus-gwt-application-using-the-best-practices-part-1/">Part 1</a></li>
<li><a href="/2010/03/01/building-a-gae-plus-gwt-application-using-the-best-practices-part-2/">Part 2</a></li>
<li>Part 3</li>
<li><a href="/2010/03/03/building-a-gae-plus-gwt-application-using-the-best-practices-part-4/">Part 4</a></li>
<li><a href="/2010/03/09/building-a-gae-plus-gwt-application-using-the-best-practices-part-5/">Part 5</a></li>
</ol>


<p>In this part of the series, we&rsquo;re going to explore the designing of the web services for RateChecker and coding them using the command pattern from <a href="http://code.google.com/p/gwt-dispatch/">GWT-dispatch</a> based on Ray Ryan&rsquo;s <a href="http://www.youtube.com/watch?v=PDuhR18-EdM">presentation</a>.</p>

<h2>The big picture</h2>

<p><a href="http://reminiscential.files.wordpress.com/2010/03/classdiagram.png"><img class="aligncenter size-medium wp-image-166" title="ClassDiagram" src="http://reminiscential.files.wordpress.com/2010/03/classdiagram.png?w=300" alt="" width="300" height="272" /></a></p>

<p>To correctly implement web services using the command pattern, we first have to get the big picture. There are three &ldquo;actors&rdquo; involved in this: an action, a result and a handler.</p>

<h3>Action</h3>

<p>An action is used to store the parameters of the web service call (if any). For instance, a CheckRate action needs to know what type of rate the user is checking: buying rate? selling rate? currency?</p>

<h3>Result</h3>

<p>A result object stores the result (duh&hellip;) of the web service call. In the case of CheckRate method, the result is the rate object containing the details of the rate.</p>

<h3>Handler</h3>

<p>A handler is the actual &ldquo;worker&rdquo; that actually does the work of checking the rate. In this case, the check rate method fetches the posted rate page , parses the text (if needed) to get the rate information.</p>

<h3>Dispatch and DispatchAsync</h3>

<p>A Handler is executed on the server side (by the DispatchServlet we saw in the last post). On the client side, there&rsquo;s a counterpart &ldquo;DispatchAsync&rdquo;, which is the asynchronous interface that the client code calls.</p>

<h2>Implementing web service methods</h2>

<p>Now that we have the big picture in place, we&rsquo;re going to look into how to actually implement them.
The first step is to define a domain model. In this case, it&rsquo;s our Rate class:</p>

<pre><code class="java">@PersistenceCapable(identityType=IdentityType.APPLICATION)
public class Rate implements Serializable {

    private static final long serialVersionUID = -4415279469780082174L;

    @PrimaryKey
    @Persistent(valueStrategy=IdGeneratorStrategy.IDENTITY)
    private Long id;

    @Persistent
    private RateType type;

    @Persistent
    private Date timeFetched;

    @Persistent
    private Double rate;

    public Rate() {
    }
    // ... getters and setters omitted
}
</code></pre>

<pre><code class="java">public enum RateType {
    Selling,
    Buying,
}
</code></pre>

<p>In our example application, we are going to define three simple web methods:</p>

<ul>
<li>Check rate: use Url fetch to get the posted rate page and return a rate object from that.</li>
<li>Save rate: persist the rate object into the data store.</li>
<li>Get rate: get the rates from the data store.</li>
</ul>


<h3>Check rate</h3>

<p>As we have shown in the big picture, every action needs three pieces: action, result (both in shared package, as they will be used by both the client and the server) and the handler (lives in the server package).</p>

<p>For CheckRate action, we need to specify the type of rate it needs to check. For simplicity, I&rsquo;m always dealing with USD/CAD rate. The parameter here is only for whether to check for buying rate or selling rate.</p>

<pre><code class="java">public class CheckRate implements Action&lt;CheckRateResult&gt; {

    private static final long serialVersionUID = -1716760883016361503L;

    private RateType _type;

    public CheckRate() {
    }

    public CheckRate(final RateType type) {
        _type = type;
    }

    public void setType(final RateType type) {
        _type = type;
    }

    public RateType getType() {
        return _type;
    }

}
</code></pre>

<p>The result is designed to hold the returned Rate object.</p>

<pre><code class="java">public class CheckRateResult implements Result {

    private static final long serialVersionUID = -9099789297842581458L;

    private Rate _rate;

    public CheckRateResult() {
    }

    public CheckRateResult(final Rate rate) {
        _rate = rate;
    }

    public void setRate(final Rate rate) {
        _rate = rate;
    }

    public Rate getRate() {
        return _rate;
    }
}
</code></pre>

<p>Word of caution: because both action and result are serialized and sent over the wire as part of GWT-RPC call, they are required to have a default public constructor.</p>

<p>Now, on to the handler:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CheckRateHandler</span> <span class="kd">implements</span> <span class="n">ActionHandler</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">CheckRate</span><span class="o">,</span> <span class="n">CheckRateResult</span><span class="o">&gt;</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">URL_BUY</span> <span class="o">=</span> <span class="s">&quot;http://www.ingdirect.ca/en/datafiles/rates/usbuying.html&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">URL_SELL</span> <span class="o">=</span> <span class="s">&quot;http://www.ingdirect.ca/en/datafiles/rates/usselling.html&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="nf">CheckRateHandler</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">CheckRateResult</span> <span class="nf">execute</span><span class="o">(</span><span class="kd">final</span> <span class="n">CheckRate</span> <span class="n">action</span><span class="o">,</span> <span class="kd">final</span> <span class="n">ExecutionContext</span> <span class="n">ctx</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ActionException</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">CheckRateResult</span> <span class="n">retval</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">CheckRateResult</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">String</span> <span class="n">strUrl</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="k">switch</span> <span class="o">(</span><span class="n">action</span><span class="o">.</span><span class="na">getType</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nl">Buying:</span>
</span><span class='line'>        <span class="n">strUrl</span> <span class="o">=</span> <span class="n">URL_BUY</span><span class="o">;</span>
</span><span class='line'>        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nl">Selling:</span>
</span><span class='line'>        <span class="n">strUrl</span> <span class="o">=</span> <span class="n">URL_SELL</span><span class="o">;</span>
</span><span class='line'>        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">URL</span> <span class="n">url</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">URL</span><span class="o">(</span><span class="n">strUrl</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nf">InputStreamReader</span><span class="o">(</span><span class="n">url</span><span class="o">.</span><span class="na">openStream</span><span class="o">()));</span>
</span><span class='line'>
</span><span class='line'>            <span class="kd">final</span> <span class="kt">double</span> <span class="n">dRate</span> <span class="o">=</span> <span class="n">Double</span><span class="o">.</span><span class="na">parseDouble</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>            <span class="kd">final</span> <span class="n">Rate</span> <span class="n">rate</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Rate</span><span class="o">();</span>
</span><span class='line'>            <span class="n">rate</span><span class="o">.</span><span class="na">setRate</span><span class="o">(</span><span class="n">dRate</span><span class="o">);</span>
</span><span class='line'>            <span class="n">rate</span><span class="o">.</span><span class="na">setType</span><span class="o">(</span><span class="n">action</span><span class="o">.</span><span class="na">getType</span><span class="o">());</span>
</span><span class='line'>            <span class="n">rate</span><span class="o">.</span><span class="na">setTimeFetched</span><span class="o">(</span><span class="k">new</span> <span class="nf">Date</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">retval</span><span class="o">.</span><span class="na">setRate</span><span class="o">(</span><span class="n">rate</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">br</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>                <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="kd">final</span> <span class="n">MalformedURLException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">ActionException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="kd">final</span> <span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">ActionException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="kd">final</span> <span class="n">NumberFormatException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">ActionException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">retval</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="c1">// ... other methods omitted</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>As you can see, the handler does the actual work of fetching the rate using URL Fetch service offered by Google App Engine.</p>

<p>The other two web method implementations are similar. You can follow the project on Github <a href="http://github.com/kevinjqiu/ratechecker">here</a>. In the next section, I&rsquo;m going to go over the building of the UI in GWT, as well as making AJAX calls from GWT to the server.</p>
]]></content>
  </entry>
  
</feed>
